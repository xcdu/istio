Jwt origin auth on ingress for some hosts but not for others - Security - Discuss Istio,,,,"---
apiVersion: ""authentication.istio.io/v1alpha1""                                  
kind: ""Policy""                                                                  
metadata:                                                                       
  name: ""ingress-jwt""
  namespace: ""istio-system""
spec:
  targets:
    - name: istio-ingressgateway
  peers:
    - mtls:
        mode: STRICT
  originIsOptional: true
  origins:
    - jwt:
        issuer: https://keycloak.example.com/auth/realms/master
        jwksUri: https://keycloak.example.com/auth/realms/master/protocol/openid-connect/certs                                                 
  principalBinding: USE_ORIGIN
 ---
apiVersion: ""rbac.istio.io/v1alpha1""
kind: ClusterRbacConfig
metadata:
  name: default
spec:
  mode: 'ON_WITH_INCLUSION'
  inclusion:
    services: [""istio-ingressgateway.istio-system.svc.cluster.local""]
 ----
apiVersion: ""rbac.istio.io/v1alpha1""
kind: ServiceRole
metadata:
  name: istio-ingressgateway-allow-www
  namespace: istio-system
spec:
  rules:
  - services: [""istio-ingressgateway.istio-system.svc.cluster.local""]
    methods: [""*""]
    constraints:
    - key: ""request.headers[:authority]""
      values: [""www.example.com"", ""keycloak.example.com""]
 ---
apiVersion: ""rbac.istio.io/v1alpha1""
kind: ServiceRoleBinding
metadata:
  name: all-user-istio-ingressgateway-allow-www
  namespace: default
spec:
  subjects:
  - user: ""*""
  roleRef:
    kind: ServiceRole
    name: ""istio-ingressgateway-allow-www""
 ----
kind: ServiceRole
metadata:
  name: istio-ingressgateway-allow-all
  namespace: istio-system
spec:
  rules:
  - services: [""istio-ingressgateway.istio-system.svc.cluster.local""]
    methods: [""*""]
    constraints:
    - key: ""request.headers[:authority]""
      values: [""*""]
 ---
apiVersion: ""rbac.istio.io/v1alpha1""
kind: ServiceRoleBinding
metadata:
  name: all-user-istio-ingressgateway-allow-all
  namespace: default
spec:
  subjects:
  - properties:
      source.principal: ""*""
  roleRef:
    kind: ServiceRole
    name: ""istio-ingressgateway-allow-all""",,
Istio JWT verification against JWKS with internally signed certificate - Security - Discuss Istio,"2018-10-24T03:22:41.052354Z error   model   Failed to fetch pubkey from ""https://iam.company.com.au/oauth2/jwks"":  Get https://iam.company.com.au/oauth2/jwks:  x509: certificate signed by unknown authority
2018-10-24T03:22:41.052371Z warn    Failed to fetch jwt public key from ""https://iam.company.com.au/oauth2/jwks ""
 apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: ""our-service-jwt-example""
spec:
  targets:
  - name: our-service
  origins:
  - jwt:
      issuer: iam.company.com.au
      jwksUri: ""https://iam.company.com.au/oauth2/jwks""
  principalBinding: USE_ORIGIN
",,,,," --mount-path=/cacerts \
",,
Configuring TLS Versions - Security - Discuss Istio,,,,,,,,"  - applyTo: CLUSTER
    match:
      context: SIDECAR_OUTBOUND
    patch:
      operation: MERGE
      value:
        transport_socket_matches:
        - name: ""tlsMode-istio""
          match:
            tlsMode: ""istio""
          transport_socket:
            name: ""envoy.transport_sockets.tls""
            typed_config:
              ""@type"": ""type.googleapis.com/envoy.api.v2.auth.UpstreamTlsContext""
              common_tls_context:
                tls_params:
                  tls_maximum_protocol_version: TLSv1_3
                  tls_minimum_protocol_version: TLSv1_3
",,"apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: sidecar-tls-version
  namespace: hobby
spec:
  workloadSelector:
    labels:
      app: productpage
  configPatches:
  - applyTo: CLUSTER
    match:
      context: SIDECAR_OUTBOUND
      cluster:
        portNumber: 443
        service: ""www.google.com""
    patch:
      operation: MERGE
      value:
        transport_socket:
          typed_config:
            '@type': type.googleapis.com/envoy.api.v2.auth.UpstreamTlsContext
            common_tls_context:
              tls_params:
                tls_maximum_protocol_version: TLSv1_3
                tls_minimum_protocol_version: TLSv1_3
",,,"apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: google-com
  namespace: hobby
spec:
  hosts:
  - www.google.com
  location: MESH_EXTERNAL
  ports:
  - name: http-port-for-tls-origination
    number: 443
    protocol: HTTP
  resolution: NONE
---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: google-com
  namespace: hobby
spec:
  host: www.google.com
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    portLevelSettings:
    - port:
        number: 443
      tls:
        mode: SIMPLE
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: goole-com
  namespace: hobby
spec:
  configPatches:
  - applyTo: CLUSTER
    match:
      cluster:
        portNumber: 443
        service: www.google.com
      context: SIDECAR_OUTBOUND
    patch:
      operation: MERGE
      value:
        transport_socket:
          typed_config:
            '@type': type.googleapis.com/envoy.api.v2.auth.UpstreamTlsContext
            common_tls_context:
              tls_params:
                tls_maximum_protocol_version: TLSv1_3
                tls_minimum_protocol_version: TLSv1_3
  workloadSelector:
    labels:
      app: sleep # modify this for your pod
",
TLS origination from sidecar proxy instead of the Egress Gateway - Security - Discuss Istio,"apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: external-host-mtls
spec:
  hosts:
  - external-host-example.com
  location: MESH_EXTERNAL
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  resolution: DNS


apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: external-mtls
spec:
  hosts:
  - external-host-example.com
  tls:
  - match:
    - port: 443
      sniHosts:
        - external-host-example.com
    route:
    - destination:
        host: external-host-example.com
        port:
          number: 443

apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: external-mtls
spec:
  host: external-host-example.com
  trafficPolicy:
    tls:
      mode: MUTUAL
      clientCertificate: /etc/client-certs/client.pem
      privateKey: /etc/client-certs/client.key
      caCertificates: /etc/client-certs/ca.pem
 * About to connect() to external-host-example.com port 443 (#0)
*   Trying x.x.x.x...
* Connected to external-host-example.com (x.x.x.x) port 443 (#0)
* Initializing NSS with certpath: sql:/etc/pki/nssdb
*   CAfile: /etc/pki/tls/certs/ca-bundle.crt
  CApath: none
* NSS error -5938 (PR_END_OF_FILE_ERROR)
* Encountered end of file
* Closing connection 0
curl: (35) Encountered end of file
 |2020-11-17T15:53:58.226367Z|debug|envoy filter|[external/envoy/source/extensions/filters/listener/tls_inspector/tls_inspector.cc:148] tls:onServerName(), requestedServerName: external-host-example.com|
|2020-11-17T15:53:58.226443Z|debug|envoy filter|[external/envoy/source/common/tcp_proxy/tcp_proxy.cc:251] [C161] new tcp proxy session|
|2020-11-17T15:53:58.226480Z|debug|envoy filter|[external/envoy/source/common/tcp_proxy/tcp_proxy.cc:395] [C161] Creating connection to cluster outbound|443||external-host-example.com|
|2020-11-17T15:53:58.226509Z|debug|envoy pool|[external/envoy/source/common/tcp/conn_pool.cc:83] creating a new connection|
|2020-11-17T15:53:58.226550Z|debug|envoy pool|[external/envoy/source/common/tcp/conn_pool.cc:364] [C162] connecting|
|2020-11-17T15:53:58.226557Z|debug|envoy connection|[external/envoy/source/common/network/connection_impl.cc:727] [C162] connecting to x.x.x.x:443|
|2020-11-17T15:53:58.226641Z|debug|envoy connection|[external/envoy/source/common/network/connection_impl.cc:736] [C162] connection in progress|
|2020-11-17T15:53:58.226656Z|debug|envoy pool|[external/envoy/source/common/tcp/conn_pool.cc:109] queueing request due to no available connections|
|2020-11-17T15:53:58.226662Z|debug|envoy conn_handler|[external/envoy/source/server/connection_handler_impl.cc:411] [C161] new connection|
|2020-11-17T15:53:58.252446Z|debug|envoy connection|[external/envoy/source/common/network/connection_impl.cc:592] [C162] connected|
|2020-11-17T15:53:58.252555Z|debug|envoy connection|[external/envoy/source/extensions/transport_sockets/tls/ssl_socket.cc:191] [C162] handshake expecting read|
|2020-11-17T15:53:58.277388Z|debug|envoy connection|[external/envoy/source/extensions/transport_sockets/tls/ssl_socket.cc:191] [C162] handshake expecting read|
|2020-11-17T15:53:58.277417Z|debug|envoy connection|[external/envoy/source/extensions/transport_sockets/tls/ssl_socket.cc:191] [C162] handshake expecting read|
|2020-11-17T15:53:58.277595Z|debug|envoy connection|[external/envoy/source/extensions/transport_sockets/tls/ssl_socket.cc:176] [C162] handshake complete|
|2020-11-17T15:53:58.277633Z|debug|envoy pool|[external/envoy/source/common/tcp/conn_pool.cc:285] [C162] assigning connection|
|2020-11-17T15:53:58.277661Z|debug|envoy filter|[external/envoy/source/common/tcp_proxy/tcp_proxy.cc:624] TCP:onUpstreamEvent(), requestedServerName:external-host-example.com|
|2020-11-17T15:53:58.303804Z|debug|envoy connection|[external/envoy/source/extensions/transport_sockets/tls/ssl_socket.cc:226] [C162]|
|2020-11-17T15:53:58.303830Z|debug|envoy connection|[external/envoy/source/common/network/connection_impl.cc:558] [C162] remote close|
|2020-11-17T15:53:58.303834Z|debug|envoy connection|[external/envoy/source/common/network/connection_impl.cc:200] [C162] closing socket: 0|
|2020-11-17T15:53:58.303853Z|debug|envoy connection|[external/envoy/source/extensions/transport_sockets/tls/ssl_socket.cc:298] [C162] SSL shutdown: rc=-1|
|2020-11-17T15:53:58.303855Z|debug|envoy connection|[external/envoy/source/extensions/transport_sockets/tls/ssl_socket.cc:226] [C162]|
|2020-11-17T15:53:58.303880Z|debug|envoy pool|[external/envoy/source/common/tcp/conn_pool.cc:124] [C162] client disconnected|
|2020-11-17T15:53:58.303894Z|debug|envoy connection|[external/envoy/source/common/network/connection_impl.cc:109] [C161] closing data_to_write=0 type=0|
|2020-11-17T15:53:58.303900Z|debug|envoy connection|[external/envoy/source/common/network/connection_impl.cc:200] [C161] closing socket: 1|
|2020-11-17T15:53:58.303985Z|debug|envoy conn_handler|[external/envoy/source/server/connection_handler_impl.cc:111] [C161] adding to cleanup list|
"
Istio AuthorizationPolicy based on claims - Security - Discuss Istio,"apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: admin-api
  namespace: default
spec:
  action: DENY
  selector:
    matchLabels:
      app: app1
  rules:
  - to:
    - operation:
        methods: [""GET""]
        paths: [""/admin-api""]
    when:
    - key: request.auth.claims[roles]
      notValues: [""admin""]
 {
  ""exp"": 1606396674,
  ""groups"": ""company1"",
  ""iat"": 1606393074,
  ""iss"": ""testing@secure.istio.io"",
  ""roles"": ""admin"",
  ""sub"": ""testing@secure.istio.io""
}
 {
  ""exp"": 1606401862,
  ""iat"": 1606398262,
  ""iss"": ""testing@secure.istio.io"",
  ""nested"": {    
    ""roles"": [
      ""admin"",
      ""sale""
    ]
  },
  ""sub"": ""testing@secure.istio.io""
}
 apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: admin-api
  namespace: default
spec:
  action: DENY
  selector:
    matchLabels:
      app: app1
  rules:
  - to:
    - operation:
        methods: [""GET""]
        paths: [""/admin-api""]
    when:
    - key: request.auth.claims[nested][roles]
      notValues: [""admin""]
",
Configuring CORS - Security - Discuss Istio,"apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: example
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - example.com
    - port:
        number: 443
        name: https
        protocol: HTTPS
      tls:
        mode: SIMPLE
        credentialName: example-tls
      hosts:
        - example.com
 apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: example
spec:
  hosts:
    - ""example.com""
  gateways:
    - example
  http:
    - match:
        - uri:
            prefix: /api/graphql
      route:
        - destination:
            host: example.default.svc.cluster.local
            port:
              number: 9999
      corsPolicy:
        allowMethods:
          - POST
          - OPTIONS
        allowOrigin:
          - https://example.com
        allowHeaders:
          - authorization
          - content-type
    - route:
        - destination:
            host: example-ui.default.svc.cluster.local
            port:
              number: 80
 curl -X OPTIONS https://example.com/api/graphql -I
HTTP/2 404
content-type: text/plain; charset=UTF-8
date: Fri, 10 Jul 2020 14:31:52 GMT
content-length: 9
x-envoy-upstream-service-time: 4
server: istio-envoy
 curl -X OPTIONS https://example.com/api/graphql -I
HTTP/2 204
server: nginx/1.17.8
date: Fri, 10 Jul 2020 14:57:39 GMT
strict-transport-security: max-age=15724800; includeSubDomains
access-control-allow-origin: *
access-control-allow-credentials: true
access-control-allow-methods: POST, OPTIONS
access-control-allow-headers: DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization
access-control-max-age: 1728000
",,,,,"apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
 name: cors-rule
spec:
 hosts:
 - http-server.default.svc.cluster.local
 http:
 - route:
   - destination:
       host: http-server.default.svc.cluster.local
   corsPolicy:
     allowOrigins:
     - exact: http://www.example.com
     allowMethods:
     - POST
     - GET
     allowHeaders:
     - X-Custom-Header
     exposeHeaders:
     - X-Expose-Header
     maxAge: 24h
     allowCredentials: false
",
Istio 1.7 - JWT authentication policy problem - Security - Discuss Istio,"apiVersion: ""security.istio.io/v1beta1""
kind: ""RequestAuthentication""
metadata:
  name: ""jwt-auth-istio-embedkey""
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  jwtRules:
    - issuer: ""testing@secure.istio.io""
      jwks: ""eyAia2V5cyI6WyB7ImUiOiJBUUFCIiwia2lkIjoiREhGYnBvSVVxclk4dDJ6cEEycVhmQ21yNVZPNVpFcjRSekhVXy1lbnZ2USIsImt0eSI6IlJTQSIsIm4iOiJ4QUU3ZUI2cXVnWHlDQUczeWhoN3BrRGtUNjVwSHltWC1QN0tmSXVwamY1OXZzZG85MWJTUDlDOEgwN3BTQUdRTzFNVl94Rmo5VnN3Z3NDZzRSNm90bWc1UFYySGU5NWxaZEh0T2NVNURYSWdfcGJoTGRLWGJpNjZHbFZlSzZBQlpPVVczV1l0bk5IRC05MWdWdW9lSlRfRHd0R0djcDRpZ25rZ1hma2lFbTRzdy00c2ZiNHFkdDVvTGJ5VnBtVzZ4OWNmYTd2czJXVGZVUmlDckJvVXFnQm9fLTRXVGlVTG1tSFNHWkhPanp3YThXdHJ0T1FHc0FGaklibm84NWpwNk1uR0dHWlBZWmJEQWFfYjN5NXUtWXBXN3lwWnJ2RDhCZ3RLVmpndFFnWmhMQUdlek10MHVhM0RSclduS3FUWjBCSl9FeXhPR3VISnJMc24wMGZuTVEifV19""
",,,,,,,"apiVersion: ""security.istio.io/v1beta1""
kind: ""RequestAuthentication""
metadata:
  name: ""jwt-example""
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  jwtRules:
  - issuer: ""testing@secure.istio.io""
    jwks: |
      { ""keys"":[ {""e"":""AQAB"",""kid"":""DHFbpoIUqrY8t2zpA2qXfCmr5VO5ZEr4RzHU_-envvQ"",""kty"":""RSA"",""n"":""xAE7eB6qugXyCAG3yhh7pkDkT65pHymX-P7KfIupjf59vsdo91bSP9C8H07pSAGQO1MV_xFj9VswgsCg4R6otmg5PV2He95lZdHtOcU5DXIg_pbhLdKXbi66GlVeK6ABZOUW3WYtnNHD-91gVuoeJT_DwtGGcp4ignkgXfkiEm4sw-4sfb4qdt5oLbyVpmW6x9cfa7vs2WTfURiCrBoUqgBo_-4WTiULmmHSGZHOjzwa8WtrtOQGsAFjIbno85jp6MnGGGZPYZbDAa_b3y5u-YpW7ypZrvD8BgtKVjgtQgZhLAGezMt0ua3DRrWnKqTZ0BJ_EyxOGuHJrLsn00fnMQ""}]}
",
Use environment variable RequestAuthentication/AuthorizationPolicy - Security - Discuss Istio,"apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: my-api
spec:
  selector:
    matchLabels:
      app: my-api
  jwtRules:
  - issuer: ${ISSUER}
    jwksUri: ${JWK_URI}
    forwardOriginalToken: true",
Syntax suggestion: authorization policy behind a reverse proxy - Security - Discuss Istio,"apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: ingress-policy
  namespace: istio-system
spec:
  selector:
    matchLabels:
      app: istio-ingressgateway
  action: ALLOW
  rules:
    - to:
        - operation:
            notHosts:
              - telemetry.example.com
    - to:
        - operation:
            hosts:
              - telemetry.example.com
      when:
        - key: request.headers[x-forwarded-for]
          values:
            - ""12.34.56.78*""

     - from:
        - source:
            proxiedIPBlocks[ ""12,34,56,78/32"" ]
      to:
        - operation:
            hosts:
              - telemetry.example.com
",,
Istio (1.6.2) : RBAC Access Denied for Valid JWT Token - Security - Discuss Istio,,,,,,"apiVersion: ""security.istio.io/v1beta1""
kind: ""RequestAuthentication""
metadata:
  name: ""dex-ms-contact-jwt""
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  jwtRules:
  - issuer:  “https://dev-n63ipah2.us.auth0.com/”
    jwksUri: “https://dev-n63ipah2.us.auth0.com/.well-known/jwks.json”
    audience:
     - “http://10.97.72.213/”
     apiVersion: ""security.istio.io/v1beta1""
    kind: ""AuthorizationPolicy""
    metadata:
      name: ""dex-ms-contact-require-jwt""
      namespace: istio-system
    spec:
      selector:
        matchLabels:
          istio: ingressgateway
      action: ALLOW
      rules:
      - from:
        - source:
           requestPrincipals: [""https://dev-n63ipah2.us.auth0.com/sEbjHGBcZ16D0jk8wohIp7vPoT0MWTO0@clients""]
        to:
        - operation:
           methods: [""*""]
           paths: [""*""]
        when:
        - key: request.auth.claims[iss]
          values: [""https://dev-n63ipah2.us.auth0.com/""]
",,,,,,,,,,,
Getting RBAC denied even the servicerolebinding checked to be allowed - Security - Discuss Istio,"[root@gke-client-tf leilichao]# k get clusterrbacconfigs -o yaml
apiVersion: v1
items:
- apiVersion: rbac.istio.io/v1alpha1
  kind: ClusterRbacConfig
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {""apiVersion"":""rbac.istio.io/v1alpha1"",""kind"":""ClusterRbacConfig"",""metadata"":{""annotations"":{},""name"":""default""},""spec"":{""mode"":""ON""}}
    creationTimestamp: ""2020-07-04T01:28:52Z""
    generation: 2
    name: default
    resourceVersion: ""5986075""
    selfLink: /apis/rbac.istio.io/v1alpha1/clusterrbacconfigs/default
    uid: db70920e-f364-40ec-a93b-a3364f88650f
  spec:
    mode: ""ON""
kind: List
metadata:
  resourceVersion: """"
  selfLink: """"
[root@gke-client-tf leilichao]# k get envoyfilter -n istio-system -o yaml
apiVersion: v1
items:
- apiVersion: networking.istio.io/v1alpha3
  kind: EnvoyFilter
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {""apiVersion"":""networking.istio.io/v1alpha3"",""kind"":""EnvoyFilter"",""metadata"":{""annotations"":{},""labels"":{""app.kubernetes.io/component"":""oidc-authservice"",""app.kubernetes.io/instance"":""oidc-authservice-v1.0.0"",""app.kubernetes.io/managed-by"":""kfctl"",""app.kubernetes.io/name"":""oidc-authservice"",""app.kubernetes.io/part-of"":""kubeflow"",""app.kubernetes.io/version"":""v1.0.0""},""name"":""authn-filter"",""namespace"":""istio-system""},""spec"":{""filters"":[{""filterConfig"":{""httpService"":{""authorizationRequest"":{""allowedHeaders"":{""patterns"":[{""exact"":""cookie""},{""exact"":""X-Auth-Token""}]}},""authorizationResponse"":{""allowedUpstreamHeaders"":{""patterns"":[{""exact"":""kubeflow-userid""}]}},""serverUri"":{""cluster"":""outbound|8080||authservice.istio-system.svc.cluster.local"",""failureModeAllow"":false,""timeout"":""10s"",""uri"":""http://authservice.istio-system.svc.cluster.local""}},""statusOnError"":{""code"":""GatewayTimeout""}},""filterName"":""envoy.ext_authz"",""filterType"":""HTTP"",""insertPosition"":{""index"":""FIRST""},""listenerMatch"":{""listenerType"":""GATEWAY""}}],""workloadLabels"":{""istio"":""ingressgateway""}}}
    creationTimestamp: ""2020-07-04T01:40:43Z""
    generation: 1
    labels:
      app.kubernetes.io/component: oidc-authservice
      app.kubernetes.io/instance: oidc-authservice-v1.0.0
      app.kubernetes.io/managed-by: kfctl
      app.kubernetes.io/name: oidc-authservice
      app.kubernetes.io/part-of: kubeflow
      app.kubernetes.io/version: v1.0.0
    name: authn-filter
    namespace: istio-system
    resourceVersion: ""4715289""
    selfLink: /apis/networking.istio.io/v1alpha3/namespaces/istio-system/envoyfilters/authn-filter
    uid: e599ba82-315a-4fc1-9a5d-e8e35d93ca26
  spec:
    filters:
    - filterConfig:
        httpService:
          authorizationRequest:
            allowedHeaders:
              patterns:
              - exact: cookie
              - exact: X-Auth-Token
          authorizationResponse:
            allowedUpstreamHeaders:
              patterns:
              - exact: kubeflow-userid
          serverUri:
            cluster: outbound|8080||authservice.istio-system.svc.cluster.local
            failureModeAllow: false
            timeout: 10s
            uri: http://authservice.istio-system.svc.cluster.local
        statusOnError:
          code: GatewayTimeout
      filterName: envoy.ext_authz
      filterType: HTTP
      insertPosition:
        index: FIRST
      listenerMatch:
        listenerType: GATEWAY
    workloadLabels:
      istio: ingressgateway
kind: List
metadata:
  resourceVersion: """"
  selfLink: """"

 [2020-08-06 13:32:43.290][26][debug][rbac] [external/envoy/source/extensions/filters/http/rbac/rbac_filter.cc:64] checking request: remoteAddress: 10.1.1.2:58012, localAddress: 10.1.2.66:8888, ssl: none, headers: ':authority', 'compliance-kf-system.ml'
':path', '/notebook/roger-l-c-lei/aug06/'
':method', 'GET'
'user-agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36'
'accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'
'accept-encoding', 'gzip, deflate'
'accept-language', 'en,zh-CN;q=0.9,zh;q=0.8'
'cookie', 'authservice_session=MTU5NjY5Njk0MXxOd3dBTkZvMldsVllVMUZPU0VaR01sSk5RVlJJV2xkRFVrRTFTVUl5V0RKV1EwdEhTMU5QVjFCVlUwTkpSVFpYUlVoT1RGVlBUa0U9fN3lPBXDDSZMT9MTJRbG8jv7AtblKTE3r84ayeCYuKOk; _xsrf=2|1e6639f2|10d3ea0a904e0ae505fd6425888453f8|1596697030'
'referer', 'http://compliance-kf-system.ml/jupyter/'
'upgrade-insecure-requests', '1'
'x-forwarded-for', '10.10.10.230'
'x-forwarded-proto', 'http'
'x-request-id', 'babbf884-4cec-93fd-aea6-2fc60d3abb83'
'kubeflow-userid', 'roger.l.c.lei@XXXX.com'
'x-istio-attributes', 'CjAKHWRlc3RpbmF0aW9uLnNlcnZpY2UubmFtZXNwYWNlEg8SDXJvZ2VyLWwtYy1sZWkKIwoYZGVzdGluYXRpb24uc2VydmljZS5uYW1lEgcSBWF1ZzA2Ck4KCnNvdXJjZS51aWQSQBI+a3ViZXJuZXRlczovL2lzdGlvLWluZ3Jlc3NnYXRld2F5LTg5Y2Q0YmQ0Yy1kdnF3dC5pc3Rpby1zeXN0ZW0KQQoXZGVzdGluYXRpb24uc2VydmljZS51aWQSJhIkaXN0aW86Ly9yb2dlci1sLWMtbGVpL3NlcnZpY2VzL2F1ZzA2CkMKGGRlc3RpbmF0aW9uLnNlcnZpY2UuaG9zdBInEiVhdWcwNi5yb2dlci1sLWMtbGVpLnN2Yy5jbHVzdGVyLmxvY2Fs'
'x-envoy-expected-rq-timeout-ms', '300000'
'x-b3-traceid', '3bf35cca1f7b75e7a42a046b1c124b1f'
'x-b3-spanid', 'a42a046b1c124b1f'
'x-b3-sampled', '1'
'x-envoy-original-path', '/notebook/roger-l-c-lei/aug06/'
'content-length', '0'
'x-envoy-internal', 'true'
, dynamicMetadata: filter_metadata {
  key: ""istio_authn""
  value {
  }
}

[2020-08-06 13:32:43.290][26][debug][rbac] [external/envoy/source/extensions/filters/http/rbac/rbac_filter.cc:108] enforced denied
   if (engine.has_value()) {
    if (engine->allowed(*callbacks_->connection(), headers,
                        callbacks_->streamInfo().dynamicMetadata(), nullptr)) {
      ENVOY_LOG(debug, ""enforced allowed"");
      config_->stats().allowed_.inc();
      return Http::FilterHeadersStatus::Continue;
    } else {
      ENVOY_LOG(debug, ""enforced denied"");
      callbacks_->sendLocalReply(Http::Code::Forbidden, ""RBAC: access denied"", nullptr,
                                 absl::nullopt);
      config_->stats().denied_.inc();
      return Http::FilterHeadersStatus::StopIteration;
    }
  }
 {
 ""name"": ""envoy.filters.http.rbac"",
 ""config"": {
  ""rules"": {
   ""policies"": {
    ""ns-access-istio"": {
     ""permissions"": [
      {
       ""and_rules"": {
        ""rules"": [
         {
          ""any"": true
         }
        ]
       }
      }
     ],
     ""principals"": [
      {
       ""and_ids"": {
        ""ids"": [
         {
          ""header"": {
           ""exact_match"": ""roger.l.c.lei@XXXX.com""
          }
         }
        ]
       }
      }
     ]
    }
   }
  }
 }
}
 [root@gke-client-tf leilichao]# k get servicerolebinding -n roger-l-c-lei -o yaml
apiVersion: v1
items:
- apiVersion: rbac.istio.io/v1alpha1
  kind: ServiceRoleBinding
  metadata:
    annotations:
      role: admin
      user: roger.l.c.lei@XXXX.com
    creationTimestamp: ""2020-07-04T01:35:30Z""
    generation: 5
    name: owner-binding-istio
    namespace: roger-l-c-lei
    ownerReferences:
    - apiVersion: kubeflow.org/v1
      blockOwnerDeletion: true
      controller: true
      kind: Profile
      name: roger-l-c-lei
      uid: 689c9f04-08a6-4c51-a1dc-944db1a66114
    resourceVersion: ""23201026""
    selfLink: /apis/rbac.istio.io/v1alpha1/namespaces/roger-l-c-lei/servicerolebindings/owner-binding-istio
    uid: bbbffc28-689c-4099-837a-87a2feb5948f
  spec:
    roleRef:
      kind: ServiceRole
      name: ns-access-istio
    subjects:
    - properties:
        request.headers[]: roger.l.c.lei@XXXX.com
  status: {}
kind: List
metadata:
  resourceVersion: """"
  selfLink: """"
```

I wanted to have a try updating this ServiceRoleBinding to validate some assumption since I can't debug the envoy source code and there's not enough log to show why exactly is the ""allow"" method returnning false.

However I find myself cannot update the servicerolebinding. It resumes to its orriginal version everytime right after I finish editing it.

I'm stuck here for more than 1 week. So any tip/advice is welcome on below questions!

# Please help advice my query below
I find that there's this istio-galley validatingAdmissionConfig map that monitors these istio rbac resources.

```
[root@gke-client-tf leilichao]# k get validatingwebhookconfigurations istio-galley -oyaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  creationTimestamp: ""2020-08-04T15:00:59Z""
  generation: 1
  labels:
    app: galley
    chart: galley
    heritage: Tiller
    istio: galley
    release: istio
  name: istio-galley
  ownerReferences:
  - apiVersion: extensions/v1beta1
    blockOwnerDeletion: true
    controller: true
    kind: Deployment
    name: istio-galley
    uid: 11fef012-4145-49ac-a43c-2e1d0a460ea4
  resourceVersion: ""22484680""
  selfLink: /apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/istio-galley
  uid: 6f485e28-3b5a-4a3b-b31f-a5c477c82619
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    caBundle: 
    .
    .
    .
    service:
      name: istio-galley
      namespace: istio-system
      path: /admitpilot
      port: 443
  failurePolicy: Fail
  matchPolicy: Exact
  name: pilot.validation.istio.io
  namespaceSelector: {}
  objectSelector: {}
  rules:
  - apiGroups:
    - config.istio.io
    apiVersions:
    - v1alpha2
    operations:
    - CREATE
    - UPDATE
    resources:
    - httpapispecs
    - httpapispecbindings
    - quotaspecs
    - quotaspecbindings
    scope: '*'
  - apiGroups:
    - rbac.istio.io
    apiVersions:
    - '*'
    operations:
    - CREATE
    - UPDATE
    resources:
    - '*'
    scope: '*'
  - apiGroups:
    - authentication.istio.io
    apiVersions:
    - '*'
    operations:
    - CREATE
    - UPDATE
    resources:
    - '*'
    scope: '*'
  - apiGroups:
    - networking.istio.io
    apiVersions:
    - '*'
    operations:
    - CREATE
    - UPDATE
    resources:
    - destinationrules
    - envoyfilters
    - gateways
    - serviceentries
    - sidecars
    - virtualservices
    scope: '*'
  sideEffects: Unknown
  timeoutSeconds: 30
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    caBundle: 
    .
    .
    .
    service:
      name: istio-galley
      namespace: istio-system
      path: /admitmixer
      port: 443
  failurePolicy: Fail
  matchPolicy: Exact
  name: mixer.validation.istio.io
  namespaceSelector: {}
  objectSelector: {}
  rules:
  - apiGroups:
    - config.istio.io
    apiVersions:
    - v1alpha2
    operations:
    - CREATE
    - UPDATE
    resources:
    - rules
    - attributemanifests
    - circonuses
    - deniers
    - fluentds
    - kubernetesenvs
    - listcheckers
    - memquotas
    - noops
    - opas
    - prometheuses
    - rbacs
    - solarwindses
    - stackdrivers
    - cloudwatches
    - dogstatsds
    - statsds
    - stdios
    - apikeys
    - authorizations
    - checknothings
    - listentries
    - logentries
    - metrics
    - quotas
    - reportnothings
    - tracespans
    scope: '*'
  sideEffects: Unknown
  timeoutSeconds: 30

```
Here's something I don't understand

## I cannot update the ServiceRoleBinding even after I deleted the validating webhook

I tried to delete this webhook to update the servicerolebinding. The resource resumes right after I save it.

## Is there some kind of cache in galley that mixer uses to distribute the config
I can't find any relevent log that indicates the rbac.istio.io resource is protected/validated by some service in the istio-system namespace.

## How can I get the log of the MIXER
I need to understand which component exactly controls the policy

## Most importantly How do I debug the envoy container
I need to debug the envoy app to understand why it's returnning false for the allow function.
If we can not debug it easily. Is there a document that lets me update the code to add more log and build a new image to GCR so I can have another run and based on the log to see what's going on behind the scene."
Online Boutique Extensions - Security - Discuss Istio,"$ istioctl version
client version: 1.4.6
control plane version: 1.4.6-gke.0
data plane version: 1.4.6-gke.0 (16 proxies)
 apiVersion: v1
kind: ServiceAccount
metadata:
  name: frontend-serviceaccount
---
 kind: AuthorizationPolicy
metadata:
 name: allow-cart-and-frontend-comm
 namespace: default
spec:
 selector:
   matchLabels:
     app: cartservice
 rules:
  - from:
    - source:
       namespaces: 
         - ""default""
      # principals: [""cluster.local/ns/default/sa/frontend-serviceaccount"", ""frontend"", ""frontend-serviceaccount"", ""frontend-serviceaccount.default.sa.cluster.local"", ""/api/v1/namespaces/default/serviceaccounts/frontend-serviceaccount"", ""frontend.default.svc.cluster.local""]
",
ISTIO_MUTUAL for gateway - Security - Discuss Istio,,"openssl pkcs12 -in mycert.pfx -nokeys -chain | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > mycert.certs.pem
 openssl pkcs12 -in mycert.pfx -nocerts -nodes -out mycert_key.pem
 kubectl create -n istio-system secret generic gkegatewaysecret \
    --from-file=key=./mycert_key.pem \
    --from-file=cert=./mycert_cert.pem
 apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: ingress-gateway
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: ISTIO_MUTUAL
      credentialName: ""gkegatewaysecret""
    hosts:
    - ""*""
",,,,
"Best practices for mounting egress caCertificates (Trouble with: Envoy proxy is NOT ready: config not received from Pilot (is Pilot running?): cds updates: 0 successful, 6 rejected; lds updates: 5 successful, 0 rejected) - Security - Discuss Istio","apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: my-host-name
spec:
  host: my.host.name
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    portLevelSettings:
      - port:
          number: 9443
        tls:
          caCertificates: /etc/istio/egressgateway-ca-certs/CA-CERTS.pem
          mode: SIMPLE
",,,,,,
How make AuthorizationPolicy work? - Security - Discuss Istio,"apiVersion: v1
kind: ServiceAccount
metadata:
  name: hostname-serviceaccount
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hostname-deployment-v1
  labels:
    app: hostname
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: hostname
      version: v1
  template:
    metadata:
      labels:
        app: hostname
        version: v1
    spec:
      serviceAccountName: hostname-serviceaccount
      containers:
      - name: hostname
        image: hostname:0.2
        ports:
        - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: downstream-deployment-v1
  labels:
    app: downstream
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: downstream
      version: v1
  template:
    metadata:
      labels:
        app: downstream
        version: v1
    spec:
      containers:
      - name: downstream
        image: downstream:0.1
        ports:
        - containerPort: 80
 apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: downstream-authorizationpolicy-default-deny-all
spec:
 selector:
   matchLabels:
     app: downstream
 action: DENY
 rules:
  # This denies all traffic
  - {}
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: downstream-authorizationpolicy-allow-from-hostname
spec:
 selector:
   matchLabels:
     app: downstream
 action: ALLOW
 rules:
  - from:
    - source:
       principals: [""cluster.local/ns/default/sa/hostname-serviceaccount""]
  - to:
    - operation:
       ports: [""80""]
       methods: [""GET""]
 apiVersion: ""security.istio.io/v1beta1""
kind: ""PeerAuthentication""
metadata:
  name: ""default""
  namespace: ""istio-system""
spec:
  mtls:
    mode: STRICT
 curl -v -k https://localhost:30000
* Rebuilt URL to: https://localhost:30000/
*   Trying 127.0.0.1...
* TCP_NODELAY set
* Connected to localhost (127.0.0.1) port 30000 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* successfully set certificate verify locations:
*   CAfile: /etc/ssl/certs/ca-certificates.crt
  CApath: /etc/ssl/certs
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
* TLSv1.3 (IN), TLS Unknown, Certificate Status (22):
* TLSv1.3 (IN), TLS handshake, Unknown (8):
* TLSv1.3 (IN), TLS handshake, Request CERT (13):
* TLSv1.3 (IN), TLS handshake, Certificate (11):
* TLSv1.3 (IN), TLS handshake, CERT verify (15):
* TLSv1.3 (IN), TLS handshake, Finished (20):
* TLSv1.3 (OUT), TLS change cipher, Client hello (1):
* TLSv1.3 (OUT), TLS Unknown, Certificate Status (22):
* TLSv1.3 (OUT), TLS handshake, Certificate (11):
* TLSv1.3 (OUT), TLS Unknown, Certificate Status (22):
* TLSv1.3 (OUT), TLS handshake, Finished (20):
* SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384
* ALPN, server accepted to use h2
* Server certificate:
*  subject: [NONE]
*  start date: Jun 22 10:42:22 2020 GMT
*  expire date: Jun 23 10:42:22 2020 GMT
*  issuer: O=cluster.local
*  SSL certificate verify result: self signed certificate in certificate chain (19), continuing anyway.
* Using HTTP2, server supports multi-use
* Connection state changed (HTTP/2 confirmed)
* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0
* TLSv1.3 (OUT), TLS Unknown, Unknown (23):
* TLSv1.3 (OUT), TLS Unknown, Unknown (23):
* TLSv1.3 (OUT), TLS Unknown, Unknown (23):
* Using Stream ID: 1 (easy handle 0x55dce5cd5580)
* TLSv1.3 (OUT), TLS Unknown, Unknown (23):
> GET / HTTP/2
> Host: localhost:30000
> User-Agent: curl/7.58.0
> Accept: */*
>
* TLSv1.3 (IN), TLS Unknown, Unknown (21):
* TLSv1.3 (IN), TLS alert, Server hello (2):
* OpenSSL SSL_read: error:1409445C:SSL routines:ssl3_read_bytes:tlsv13 alert certificate required, errno 0
* Failed receiving HTTP2 data
* Connection #0 to host localhost left intact
curl: (56) OpenSSL SSL_read: error:1409445C:SSL routines:ssl3_read_bytes:tlsv13 alert certificate required, errno 0
 kubectl describe peerauthentications.security.istio.io default
Name:         default
Namespace:    default
Labels:       <none>
Annotations:  API Version:  security.istio.io/v1beta1
Kind:         PeerAuthentication
Metadata:
  Creation Timestamp:  2020-06-22T11:49:39Z
  Generation:          2
  Managed Fields:
    API Version:  security.istio.io/v1beta1
    Fields Type:  FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .:
          f:kubectl.kubernetes.io/last-applied-configuration:
      f:spec:
        .:
        f:mtls:
          .:
          f:mode:
    Manager:         kubectl
    Operation:       Update
    Time:            2020-06-22T11:50:43Z
  Resource Version:  771334
  Self Link:         /apis/security.istio.io/v1beta1/namespaces/default/peerauthentications/default
  UID:               550f3903-5776-4716-97b7-d7560bf40c2b
Spec:
  Mtls:
    Mode:  PERMISSIVE
Events:    <none>
 kubectl -it exec hostname-deployment-v1-964588564-j5qzd -c hostname -- curl -v downstream-service
*   Trying 10.107.31.0:80...
* TCP_NODELAY set
* Connected to downstream-service (10.107.31.0) port 80 (#0)
> GET / HTTP/1.1
> Host: downstream-service
> User-Agent: curl/7.67.0
> Accept: */*
>
* Mark bundle as not supporting multiuse
< HTTP/1.1 200 OK
< date: Mon, 22 Jun 2020 13:04:50 GMT
< content-length: 132
< content-type: text/plain; charset=utf-8
< x-envoy-upstream-service-time: 3
< server: envoy
<",,,,"apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: downstream-authorizationpolicy-allow-from-hostname
spec:
 selector:
   matchLabels:
     app: downstream
 action: ALLOW
 rules:
  - from:
    - source:
       principals: [""cluster.local/ns/default/sa/hostname-serviceaccount""]
    to: # <- There should be no dash preceding 'to' 
    - operation:
       ports: [""80""]
       methods: [""GET""]
"
Authorization Policy - ISTIO - Security - Discuss Istio,"apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: istio-deny
 namespace: dev
spec:
 action: DENY
 rules:
 - from:
   - source:
       notNamespaces: [""dev""]
 - to:
   - operation:
       notHosts: [""dev.mydomain.com""]
 kind: AuthorizationPolicy
metadata:
 name: istio-deny
 namespace: dev
spec:
 action: DENY
 rules:
 - to:
   - operation:
       notHosts: [""dev.svc.cluster.local"",""dev.mydomain.com""]
",,,"apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: istio-deny
 namespace: dev
spec:
 action: ALLOW
 rules:
 - from:
   - source:
       namespaces: [""dev""]
 - to:
   - operation:
       hosts: [""dev.mydomain.com""]
",,,"{
    ""name"": ""envoy.filters.http.rbac"",
    ""typed_config"": {
      ""@type"": ""type.googleapis.com/envoy.config.filter.http.rbac.v2.RBAC"",
      ""rules"": {
        ""policies"": {
          ""ns[authpns]-policy[allow-path-abc]-rule[0]"": {
            ""permissions"": [
              {
                ""and_rules"": {
                  ""rules"": [
                    {
                      ""or_rules"": {
                        ""rules"": [
                          {
                            ""header"": {
                              ""name"": "":path"",
                              ""exact_match"": ""/authp/abc""
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            ""principals"": [
              {
                ""and_ids"": {
                  ""ids"": [
                    {
                      ""any"": true
                    }
                  ]
                }
              }
            ]
          },
          ""ns[authpns]-policy[deny-get]-rule[0]"": {
            ""permissions"": [
              {
                ""and_rules"": {
                  ""rules"": [
                    {
                      ""or_rules"": {
                        ""rules"": [
                          {
                            ""header"": {
                              ""name"": "":method"",
                              ""exact_match"": ""GET""
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            ""principals"": [
              {
                ""and_ids"": {
                  ""ids"": [
                    {
                      ""any"": true
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    }
  },
 ---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: deny-all
  namespace: authpns
spec: {}
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: deny-get
  namespace: authpns
spec:
  selector:
    matchLabels:
      app: authp
  action: DENY
  rules:
  - to:
    - operation:
        methods: [""GET""]
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: allow-path-abc
  namespace: authpns
spec:
  action: ALLOW
  rules:
  - to:
    - operation:
        paths: [""/authp/abc""]
"
Why css and png are not accessible? - Security - Discuss Istio,"apiVersion: v1
kind: Service
metadata:
  name: hello-kubernetes-first
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: hello-kubernetes-first
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-kubernetes-first
spec:
  replicas: 3
  selector:
    matchLabels:
      app: hello-kubernetes-first
  template:
    metadata:
      labels:
        app: hello-kubernetes-first
    spec:
      containers:
        - name: hello-kubernetes
          image: paulbouwer/hello-kubernetes:1.8
          ports:
            - containerPort: 8080
          env:
            - name: MESSAGE
              value: Hello from the first deployment!
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: istio
  name: helloworld-ingress
spec:
  rules:
    - host: ""hw.service.databaker.io""
      http:
        paths:
          - path: /
            backend:
              serviceName: hello-kubernetes-first
              servicePort: 80
---
",
Restrict access from one service to another - Security - Discuss Istio,,,,"apiVersion: ""rbac.istio.io/v1alpha1""
kind: ServiceRole
metadata:
  name: httpbin
  namespace: default
spec:
  rules:
  - services: [""httpbin.default.svc.cluster.local""]
    methods: [""GET"", ""HEAD""]
 apiVersion: ""rbac.istio.io/v1alpha1""
kind: ServiceRoleBinding
metadata:
  name: httpbind
  namespace: default
spec:
  subjects:
  - properties:
      source.namespace: ""default"" // What property to use ???
  roleRef:
    kind: ServiceRole
    name: ""httpbin""
",,,,,,"apiVersion: networking.istio.io/v1alpha3
kind: Sidecar
metadata:
  name: iam
  namespace: ns1
spec:
  workloadSelector:
    labels:
      app: iam
  egress:
    - hosts:
        - ""ns1/postgres.ns1.svc.cluster.local""
",
Istio Authorization using Keycloak - Security - Discuss Istio,"{
  ""jti"": ""f9f5af0c-b187-4510-8302-d2d553c3bdee"",
  ""exp"": 1573594538,
  ""nbf"": 0,
  ""iat"": 1573558569,
  ""iss"": ""https://kc.krk.wtf/auth/realms/K2"",
  ""aud"": ""account"",
  ""sub"": ""920fadc1-5a30-4d94-8604-8bd14cea2685"",
  ""typ"": ""Bearer"",
  ""azp"": ""ufinity"",
  ""auth_time"": 1573558538,
  ""session_state"": ""c5679b6d-fc0e-4536-abc2-3533e6ba8c85"",
  ""acr"": ""1"",
  ""realm_access"": {
""roles"": [
  ""provider"",
  ""offline_access"",
  ""uma_authorization""
]
  },
  ""resource_access"": {
""ufinity"": {
  ""roles"": [
    ""provider1""
  ]
},
""account"": {
  ""roles"": [
    ""manage-account"",
    ""manage-account-links"",
    ""view-profile""
  ]
}
  },
  ""scope"": ""openid email profile"",
  ""email_verified"": false,
  ""name"": ""Kannan2 Provider"",
  ""preferred_username"": ""kannan2"",
  ""given_name"": ""Kannan2"",
  ""family_name"": ""Provider"",
  ""email"": ""kannan2@yopmail.com""
}
 apiVersion: ""rbac.istio.io/v1alpha1""
kind: ClusterRbacConfig
metadata:
  name: default
spec:
  mode: 'ON_WITH_INCLUSION'
  inclusion:
    services:
    - ""record.default.svc.cluster.local""
---
apiVersion: ""rbac.istio.io/v1alpha1""
kind: ServiceRole
metadata:
  name: regular-user
  namespace: default
spec:
  rules:
  - services: 
    - ""record"" 
    paths: [""/users/*""]
    methods: [""GET""]
---
apiVersion: ""rbac.istio.io/v1alpha1""
kind: ServiceRoleBinding
metadata:
  name: regular-user-binding
  namespace: default
spec:
  subjects:
  - user: ""*""
  roleRef:
    kind: ServiceRole
    name: ""regular-user""
---
apiVersion: ""rbac.istio.io/v1alpha1""
kind: ServiceRole
metadata:
  name: provider-role
  namespace: default
spec:
  rules:
  - services: [""*""]
    paths: [""*""]
    methods: [""*""]
---
apiVersion: ""rbac.istio.io/v1alpha1""
kind: ServiceRoleBinding
metadata:
  name: provider-role-binding
  namespace: default
spec:
  subjects:
  - properties:
      request.auth.claims[roles]: ""provider1""
  roleRef:
    kind: ServiceRole
    name: ""provider-role""
",,
Match authentication header - Security - Discuss Istio,"apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: istio-ingress
  namespace: some-namespace
spec:
  hosts:
  - ""foo.bar.mydomain.com""
  gateways:
  - default-gateway.istio-system.svc.cluster.local
  - gateway-ha.istio-system.svc.cluster.local
  http:
  - match:
    - headers:
        authorization:
          exact: some-unique-string-here
      name: some-name
    route:
    - destination:
        host: my-service
",
Authentication and Authorization with JWT get 403 - Security - Discuss Istio,"kind: ""Policy""
metadata:
  name: ""gateway-jwt-policy""
  namespace: ""istio-system""
spec:
  targets:
  - name: istio-ingressgateway
  origins:
  - jwt:
      issuer: ""Keycloak-URI""
      jwksUri: ""Keycloak-URI""
      audiences:
      - ""client-test""
    incipalBinding: USE_ORIGIN
 kind: ClusterRbacConfig
metadata:
  name: default
spec:
  mode: 'ON_WITH_INCLUSION'
  inclusion:
    services: [""http-test.istio-system.svc.cluster.local""]
 kind: ServiceRole
metadata:
  name: http-admin
  namespace: istio-system
spec:
  rules:
  - services: [""http-test.istio-system.svc.cluster.local""]
    methods: [""*""]
    paths: [""*""]


kind: ServiceRoleBinding
metadata:
  name: bind-http-admin
  namespace: istio-system
spec:
  subjects:
  - properties:
      request.auth.claims[x_role]: ""operator""
  roleRef:
    kind: ServiceRole
    name: ""http-admin""
 HEADER:
{
  ""alg"": ""RS256"",
  ""typ"": ""JWT"",
  ""kid"": ""9fPzbbb3-E1r411Uj1Tuxrc1jutq4N7Vs1dt7sCKOvY""
}

PAYLOAD:
{
  ""jti"": ""be075fff-ed7f-4387-abc7-a632c884a269"",
  ""exp"": 1573227250,
  ""nbf"": 0,
  ""iat"": 1573226950,
  ""iss"": ""keycloak"",
  ""aud"": [
    ""client-test"",
    ""account""
  ],
  ""sub"": ""8388d162-7222-4d8d-bc5b-d68e2ab2c8ce"",
  ""typ"": ""Bearer"",
  ""azp"": ""client-test"",
  ""auth_time"": 0,
  ""session_state"": ""7c14902d-c0e9-4942-bd51-df45c2e222a8"",
  ""acr"": ""1"",
  ""allowed-origins"": [
    """"
  ],
  ""realm_access"": {
    ""roles"": [
      ""operator""
    ]
  },
  ""resource_access"": {
    ""account"": {
      ""roles"": [
        ""manage-account"",
        ""manage-account-links"",
        ""view-profile""
      ]
    }
  },
  ""scope"": ""openid profile email"",
  ""email_verified"": true,
  ""x_role"": ""operator"",
  ""groups"": [
    ""operator""
  ],
  ""preferred_username"": ""test"",
  ""email"": ""test@test.com"",
  ""userRoleName"": [
    ""operator""
  ]
}
",,,
JWT Authentication always 401 - Security - Discuss Istio,"apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: ""require-mtls-jwt-reglogverify""
  namespace: default
spec:
  targets:
  - name: account-rodata
    ports:
    - number: 8080
  - name: case-launching
    ports:
    - number: 8080
  - name: case-rodata
    port:
    - number: 8080
  - name: conference
    port:
    - number: 8080
  - name: conference-read
    port:
    - number: 8080
  origins:
  - jwt:
      issuer: ""xxx""
      jwksUri: ""sss""
      jwt_headers:
      - ""key""
      trigger_rules:
      - excluded_paths:
        - exact: /api/base_register
        - exact: /actuator/health
        - exact: /api/search_case
        - exact: /api/passive_register
  principalBinding: USE_ORIGIN
",,
mTLS working just between some services with tls-check showing STATUS OK - Security - Discuss Istio,"api/serviceA[istio-proxy]: [2019-09-02T12:59:55.366Z] ""- - -"" 0 - ""-"" ""-"" 1939 0 2 - ""-"" ""-"" ""-"" ""-"" ""10.20.208.248:4567"" outbound|4567||database.auth.svc.cluster.local 10.20.128.44:35366 10.20.208.248:4567 
10.20.128.44:35364 -
api/serviceA[istio-proxy]: [2019-09-02T12:59:55.326Z] ""POST /api/my-call HTTP/1.1"" 500 - ""-"" ""-"" 74 90 60 24 ""10.90.0.22, 127.0.0.1, 127.0.0.1"" ""PostmanRuntime/7.15.0"" ""14d93a85-192d-4aa7-aa45-1501a71d4924"" ""serviceA.api.svc.cluster.local:9090"" ""127.0.0.1:9090"" inbound|9090|http-serviceA|serviceA.api.svc.cluster.local - 10.20.128.44:9090 127.0.0.1:0 outbound_.9090_._.serviceA.api.svc.cluster.local
 apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: ""default""
  namespace: gateway
spec:
  peers:
    - mtls:
        mode: STRICT

---
apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: ""default""
  namespace: auth
spec:
  peers:
    - mtls:
        mode: STRICT


---
apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: ""default""
  namespace: api
spec:
  peers:
    - mtls:
        mode: STRICT
 apiVersion: ""networking.istio.io/v1alpha3""
kind: ""DestinationRule""
metadata:
  name: ""mutual-gateway""
  namespace: ""gateway""
spec:
  host: ""*.gateway.svc.cluster.local""
  trafficPolicy:
tls:
  mode: ISTIO_MUTUAL

---
apiVersion: ""networking.istio.io/v1alpha3""
kind: ""DestinationRule""
metadata:
  name: ""mutual-api""
  namespace: ""api""
spec:
  host: ""*.api.svc.cluster.local""
  trafficPolicy:
tls:
  mode: ISTIO_MUTUAL

---
apiVersion: ""networking.istio.io/v1alpha3""
kind: ""DestinationRule""
metadata:
  name: ""mutual-auth""
  namespace: ""auth""
spec:
  host: ""*.auth.svc.cluster.local""
  trafficPolicy:
tls:
  mode: ISTIO_MUTUAL
 apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: ""myDatabase""
  namespace: ""auth""
spec:
  host: ""database.auth.svc.cluster.local""
  trafficPolicy:
    tls:
      mode: DISABLE
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: ""k8s-api-server""
  namespace: default
spec:
  host: ""kubernetes.default.svc.cluster.local""
  trafficPolicy:
tls:
  mode: DISABLE
 apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: ingress-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway # use istio default ingress gateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - my-api.example.com
      tls:
        httpsRedirect: true # sends 301 redirect for http requests
    - port:
        number: 443
        name: https
        protocol: HTTPS
      tls:
        mode: SIMPLE
        serverCertificate: /etc/istio/ingressgateway-certs/tls.crt
        privateKey: /etc/istio/ingressgateway-certs/tls.key
      hosts:
        - my-api.example.com
 apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: ingress-nginx
  namespace: gateway
spec:
  hosts:
    - my-api.example.com
  gateways:
    - ingress-gateway.istio-system
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            port:
              number: 80
            host: ingress.gateway.svc.cluster.local      # this is NGINX pod
      corsPolicy:
        allowOrigin:
          - my-api.example.com
        allowMethods:
          - POST
          - GET
          - DELETE
          - PATCH
          - OPTIONS
        allowCredentials: true
        allowHeaders:
          - ""*""
        maxAge: ""24h""

---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: api-gateway
  namespace: gateway
spec:
  hosts:
    - my-api.example.com
    - api-gateway.gateway.svc.cluster.local
  gateways:
    - mesh
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            port:
              number: 80
            host: api-gateway.gateway.svc.cluster.local
      corsPolicy:
        allowOrigin:
          - my-api.example.com
        allowMethods:
          - POST
          - GET
          - DELETE
          - PATCH
          - OPTIONS
        allowCredentials: true
        allowHeaders:
          - ""*""
        maxAge: ""24h""
"
Using Gateway + VirtualService + http01 + SDS - Security - Discuss Istio,,,,,"apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: httpbin
spec:
  hosts:
  - ""httpbin.example.com""
  gateways:
  - httpbin-gateway
  http:
  - match:
    - uri:
        prefix: /.well-known
    route:
      destination: cm-acme-http-solver-wgvxd
  - match:
    route: 
      destination: httpbin
",,,"apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: cert-htt01-challenge 
  namespace: istio-system
spec:
  host: ""*.istio-system.svc.cluster.local""
  trafficPolicy:
    tls:
      # keeping the same mTLS mode as  `default` DestinationRule in istio-system 
      mode: ISTIO_MUTUAL 
    portLevelSettings:
    - port:
        # CertManager generate services to perform the challenge on port 8089
        # it looks so far no other services in istio-system use this port
        number: 8089
      tls:
        mode: DISABLE",,
Ext_authz filter for HTTP protocol doesn't send request body field to Authz service - Security - Discuss Istio,"apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: >
      {""apiVersion"":""networking.istio.io/v1alpha3"",""kind"":""EnvoyFilter"",""metadata"":{""annotations"":{},""name"":""ext-authz-grpc"",""namespace"":""ott-demo""},""spec"":{""filters"":[{""filterConfig"":{""grpc_service"":{""google_grpc"":{""stat_prefix"":""ext_authz"",""target_uri"":""localhost:8080""}}},""filterName"":""envoy.ext_authz"",""filterType"":""HTTP"",""insertPosition"":{""index"":""FIRST""},""listenerMatch"":{""listenerProtocol"":""HTTP"",""listenerType"":""SIDECAR_OUTBOUND"",""portNumber"":8002}}],""workloadLabels"":{""app"":""sleep""}}}
  creationTimestamp: '2019-08-28T07:48:11Z'
  generation: 1
  name: ext-authz-grpc
  namespace: ott-demo
  resourceVersion: '21497400'
  selfLink: >-
    /apis/networking.istio.io/v1alpha3/namespaces/ott-demo/envoyfilters/ext-authz-grpc
  uid: 2f0d7285-c968-11e9-9c6d-fa163e388199
spec:
  filters:
    - filterConfig:
        grpc_service:
          google_grpc:
            stat_prefix: ext_authz
            target_uri: 'localhost:8080'
        timeout: 1s
        with_request_body:
          allow_partial_message: true
          max_request_bytes: 8192
      filterName: envoy.ext_authz
      filterType: HTTP
      insertPosition:
        index: FIRST
      listenerMatch:
        listenerProtocol: HTTP
        listenerType: SIDECAR_OUTBOUND
        portNumber: 8002
  workloadLabels:
    app: sleep
 Request: attributes {
  source {
    address {
      socket_address {
        address: ""10.129.1.4""
        port_value: 40706
      }
    }
  }
  destination {
    address {
      socket_address {
        address: ""172.30.88.86""
        port_value: 8002
      }
    }
  }
  request {
    http {
      id: ""1397461714216104324""
      method: ""POST""
      headers {
        key: ""accept""
        value: ""*/*""
      }
      headers {
        key: ""user-agent""
        value: ""curl/7.60.0""
      }
      headers {
        key: ""authorization""
        value: ""Basic dXNlcm5hbWU6cGFzc3dvcmQ=""
      }
      headers {
        key: ""content-length""
        value: ""16""
      }
      headers {
        key: "":method""
        value: ""POST""
      }
      headers {
        key: "":path""
        value: ""/post""
      }
      headers {
        key: ""x-envoy-decorator-operation""
        value: ""vertx-simple-web-server.ott-demo.svc.cluster.local:8002/*""
      }
      headers {
        key: ""x-forwarded-proto""
        value: ""http""
      }
      headers {
        key: ""content-type""
        value: ""application/x-www-form-urlencoded""
      }
      headers {
        key: "":authority""
        value: ""vertx-simple-web-server.ott-demo.svc.cluster.local:8002""
      }
      headers {
        key: ""debug""
        value: ""true""
      }
      headers {
        key: ""ott-token""
        value: ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c""
      }
      headers {
        key: ""x-request-id""
        value: ""108f255c-c497-9dc9-9260-30f2c90139b5""
      }
      path: ""/post""
      host: ""vertx-simple-web-server.ott-demo.svc.cluster.local:8002""
      size: 16
      protocol: ""HTTP/1.1""
    }
  }
}

Rssponse: ok_response {
  headers {
    header {
      key: ""OTT-token""
      value: ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c""
    }
    append {
    }
  }
}",
Cannot use JWT policy with an ExternalName VirtualService target - Security - Discuss Istio,">kubectl apply -f - <<EOF
apiVersion: v1                                
kind: Service
metadata:
  name: httpbinext
  namespace: foo
spec:
  externalName: httpbin.org
  ports:
  - name: http-httpbinext
    port: 80                           
    protocol: TCP                                                                                              
    targetPort: 80
  sessionAffinity: None
  type: ExternalName
EOF
 >kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: httpbinext
  namespace: foo
spec:
  hosts:
  - httpbinext.foo.svc.cluster.local
  gateways:
  - mesh                               
  - httpbinext-gateway                                                                                         
  http:                       
  - route:
    - destination:
        host: httpbinext
    corsPolicy:
      allowOrigin:
      - 'example.com'
      allowMethods:
      - POST
      - GET
      allowCredentials: false
      allowHeaders:
      - X-Foo-Bar
      - X-Bar-Foo
      maxAge: ""24h""
EOF
 >kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: httpbinext-gateway
  namespace: foo        
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:                        
      number: 80                                                                                               
      name: http
      protocol: HTTP
    hosts:
    - ""httpbinext.foo.svc.cluster.local""
EOF
 >curl --head -X OPTIONS $INGRESS_URL/headers -s -H 'Host: httpbinext.foo.svc.cluster.local' -H 'Access-Control-Request-Method: GET' -H 'Access-Control-Request-Headers: Content-Type, Accept' -H 'Origin:example.com'
HTTP/1.1 200 OK
access-control-allow-origin: example.com
access-control-allow-methods: POST,GET
access-control-allow-headers: X-Foo-Bar,X-Bar-Foo
access-control-max-age: 86400
date: Thu, 20 Jun 2019 15:18:43 GMT
server: istio-envoy
content-length: 0
 cat <<EOF | kubectl apply -n foo -f -
apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: ""jwt-httpbinext""
spec:
  targets:
  - name: httpbinext
  origins:
  - jwt:
      issuer: ""testing@secure.istio.io""
      jwksUri: ""https://raw.githubusercontent.com/istio/istio/release-1.1/security/tools/jwt/samples/jwks.json""
  principalBinding: USE_ORIGIN
EOF
 >curl $INGRESS_URL/headers -s -o /dev/null -w '%{http_code}\n' -H 'Host: httpbinext.foo.svc.cluster.local'
200
 >curl $INGRESS_URL/headers -s -o /dev/null -w '%{http_code}\n' -H 'Host: httpbin.foo.svc.cluster.local'
401
",,,">cat <<EOF | kubectl apply -n istio-system -f -
apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: ""jwt-ingress""
spec:
  targets:
  - name: istio-ingressgateway
  origins:
  - jwt:
      issuer: ""testing@secure.istio.io""
      jwksUri: ""https://raw.githubusercontent.com/istio/istio/release-1.1/security/tools/jwt/samples/jwks.json""
  principalBinding: USE_ORIGIN
EOF
"
gRPC Validation loophole? [solved] - Security - Discuss Istio,"grpc_cli call $CLUSTER_INGRESS dev.cognizant_ai.experiment.Service.Get ""uid: '1'"" --metadata authorization:""Bearer 1""
connecting to aa39e9512911911e9b04006555a6c797-546098767.us-west-2.elb.amazonaws.com:80
Sending client initial metadata:
authorization : Bearer 1
Received trailing metadata from server:
date : Mon, 17 Jun 2019 17:48:34 GMT
server : istio-envoy
x-envoy-upstream-service-time : 1
Rpc failed with status code 16, error message: square/go-jose: compact JWS format must have three parts token=""...arer 1"" stack=""[auth.go:136 auth.go:192 experimentsrv.pb.go:416 server.go:900 server.go:1122 server.go:617]""
 metadata.MD{""x-b3-traceid"":[]string{""be8d87a1d4059fab20fa7f1b6100d40f""}, ""grpc-accept-encoding"":[]string{""identity,deflate,gzip""}, ""accept-encoding"":[]string{""identity,gzip""}, ""x-envoy-external-address"":[]string{""100.96.1.1""}, ""x-forwarded-client-cert"":[]string{""By=spiffe://cluster.local/ns/default/sa/default;Hash=d84eb4500c490da5b446c8d8624a3a871f7806d2edff227274077ea8d69156ec;Subject=\""\"";URI=spiffe://cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account""}, ""authorization"":[]string{""Bearer 1""}, ""x-forwarded-for"":[]string{""100.96.1.1""}, ""x-request-id"":[]string{""63dc3828-6529-43e5-98ab-6e9d9ef9aa86""}, "":authority"":[]string{""aa39e9512911911e9b04006555a6c797-546098767.us-west-2.elb.amazonaws.com:80""}, ""x-forwarded-proto"":[]string{""http""}, ""x-b3-spanid"":[]string{""a44b08f39f64c5a7""}, ""x-b3-sampled"":[]string{""0""}, ""user-agent"":[]string{""grpc-c++/1.21.2 grpc-c/7.0.0 (linux; chttp2; gandalf)""}, ""x-b3-parentspanid"":[]string{""20fa7f1b6100d40f""}}
 grpc_cli call $CLUSTER_INGRESS dev.cognizant_ai.experiment.Service.Get ""uid: '1'""                                    
connecting to aa39e9512911911e9b04006555a6c797-546098767.us-west-2.elb.amazonaws.com:80
Received trailing metadata from server:
date : Mon, 17 Jun 2019 17:49:16 GMT
server : istio-envoy
x-envoy-upstream-service-time : 0
Rpc failed with status code 16, error message: invalid security token
 grpc_cli call $CLUSTER_INGRESS dev.cognizant_ai.experiment.Service.Get ""uid: '1'""                                    
connecting to aa39e9512911911e9b04006555a6c797-546098767.us-west-2.elb.amazonaws.com:80
Received trailing metadata from server:
date : Mon, 17 Jun 2019 17:49:16 GMT
server : istio-envoy
x-envoy-upstream-service-time : 0
Rpc failed with status code 16, error message: invalid security token
",,"apiVersion: rbac.istio.io/v1alpha1
kind: ClusterRbacConfig
metadata:
  name: default
spec:
  mode: 'ON_WITH_INCLUSION'
  inclusion:
    namespaces: [""default""]
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: ingress-gateway
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP2
    hosts:
    - ""*""
#
# Authentication is still an alpha feature so retain the service side validation and make
# mesh authentication optional as it is not yet stable
#
---
apiVersion: authentication.istio.io/v1alpha1
kind: Policy
metadata:
  name: experiment-auth-policy
spec:
  targets:
  - name: ingress-gateway
  peers:
  - mtls: {}
  origins:
  - jwt:
      issuer: ""https://cognizant-ai.auth0.com/""
      jwksUri: ""https://cognizant-ai.auth0.com/.well-known/jwks.json""
      audiences:
        - ""http://api.cognizant-ai.dev/experimentsrv""
  principalBinding: USE_ORIGIN
---
apiVersion: rbac.istio.io/v1alpha1
kind: ServiceRole
metadata:
  name: service-user
spec:
  rules:
  - services: [""*""]
    paths: [""*""]
    methods: [""*""]
---
apiVersion: rbac.istio.io/v1alpha1
kind: ServiceRoleBinding
metadata:
  name: all-authenticated-users
spec:
  subjects:
  - properties:
      source.principal: ""*""
#      request.auth.claims[scope]: ""all:experiments""
  roleRef:
    kind: ServiceRole
    name: service-user
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: grpc-experiment-service
spec:
  gateways:
  - ingress-gateway
  hosts:
  - ""*""
  http:
  - match:
    - uri:
        prefix: ""/dev.cognizant_ai.experiment.Service/""
    - uri:
       prefix: ""/grpc.reflection.v1alpha.ServerReflection/""
    route:
    - destination:
        host: experiment.default.svc.cluster.local
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: experiment
spec:
  host: experiment
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
---
apiVersion: v1
kind: Service
metadata:
  name: experiment
  labels:
    app: experiment
spec:
  ports:
  - port: 30001
    name: grpc-exp
    targetPort: 30001
  selector:
    app: experiment
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: experiment-v1
  labels:
    version: v1
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: experiment
        version: v1
    spec:
      containers:
      - name: experiment
        {{if .duat.awsecr}}
        image: {{.duat.awsecr}}/platform-services/{{.duat.module}}:{{.duat.version}}
        {{else}}
        image: localhost:32000/platform-services/{{.duat.module}}:{{.duat.version}}
        {{end}}
        imagePullPolicy: Always
        resources:
          requests:
            memory: ""2048Mi""
            cpu: ""100m""
          limits:
            memory: ""2048Mi""
            cpu: ""100m""
        ports:
        - containerPort: 30001
          name: grpc-exp
        env:
        - name: ""LOGXI_FORMAT""
          value: ""happy,maxcol=1024""
        - name: ""LOGXI""
          value: ""*=TRC""
        - name: ""IP_PORT""
          value: "":30001,0.0.0.0:30001""
        - name: ""PGHOST""
          valueFrom:
            secretKeyRef:
              name: postgres
              key: host
        - name: ""PGPORT""
          valueFrom:
            secretKeyRef:
              name: postgres
              key: port
        - name: ""PGDATABASE""
          valueFrom:
            secretKeyRef:
              name: postgres
              key: database
        - name: ""PGUSER""
          valueFrom:
            secretKeyRef:
              name: postgres
              key: username
        - name: ""PGPASSWORD""
          valueFrom:
            secretKeyRef:
              name: postgres
              key: password
---
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: auth0-egress
spec:
  hosts:
  - ""cognizant-ai.auth0.com""
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  - number: 80
    name: http
    protocol: HTTP
  resolution: DNS
  location: MESH_EXTERNAL
---
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: psql-egress
spec:
  hosts:
    - ""{{ expandenv ""$PGHOST"" }}""
  ports:
    - name: psql
      number: 5432
      protocol: tcp
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
 name: psql-egress
spec:
 host: ""{{ expandenv ""$PGHOST"" }}""
 trafficPolicy:
   tls:
     mode: DISABLE
","kubectl -n istio-system exec  $(kubectl get pod -lapp=istio-ingressgateway -o jsonpath={.items..metadata.name} -n istio-system) -- curl localhost:15000/config_dump
","Name:         experiment-auth-policy
Namespace:    istio-system
Labels:       <none>
Annotations:  kubectl.kubernetes.io/last-applied-configuration:
                {""apiVersion"":""authentication.istio.io/v1alpha1"",""kind"":""Policy"",""metadata"":{""annotations"":{},""name"":""experiment-auth-policy"",""namespace"":...
API Version:  authentication.istio.io/v1alpha1
Kind:         Policy
Metadata:
  Creation Timestamp:  2019-06-22T07:00:34Z
  Generation:          1
  Resource Version:    13593
  Self Link:           /apis/authentication.istio.io/v1alpha1/namespaces/istio-system/policies/experiment-auth-policy
  UID:                 6e39fac5-94bb-11e9-92d3-064fcdbb8a36
Spec:
  Origins:
    Jwt:
      Audiences:
        http://api.cognizant-ai.dev/experimentsrv
      Issuer:    https://cognizant-ai.auth0.com/
      Jwks Uri:  https://cognizant-ai.auth0.com/.well-known/jwks.json
  Peers:
    Mtls:
  Principal Binding:  USE_ORIGIN
  Targets:
    Name:       istio-ingressgateway
    Namespace:  istio-system
Events:         <none>
 apiVersion: authentication.istio.io/v1alpha1
kind: Policy
metadata:
  name: experiment-auth-policy
  namespace: istio-system
spec:
  targets:
  - name: istio-ingressgateway
    namespace: istio-system
  peers:
  - mtls: {}
  origins:
  - jwt:
      issuer: ""https://cognizant-ai.auth0.com/""
      jwksUri: ""https://cognizant-ai.auth0.com/.well-known/jwks.json""
      audiences:
        - ""http://api.cognizant-ai.dev/experimentsrv""
  principalBinding: USE_ORIGIN
",,"apiVersion: authentication.istio.io/v1alpha1
kind: Policy
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {""apiVersion"":""authentication.istio.io/v1alpha1"",""kind"":""Policy"",""metadata"":{""annotations"":{},""name"":""experiment-auth-policy"",""namespace"":""istio-system""},""spec"":{""origins"":[{""jwt"":{""audiences"":[""http://api.cognizant-ai.dev/experimentsrv""],""issuer"":""https://cognizant-ai.auth0.com/"",""jwksUri"":""https://cognizant-ai.auth0.com/.well-known/jwks.json""}}],""peers"":[{""mtls"":{}}],""principalBinding"":""USE_ORIGIN"",""targets"":[{""name"":""istio-ingressgateway"",""namespace"":""istio-system""}]}}
  creationTimestamp: ""2019-06-24T05:50:37Z""
  generation: 1
  name: experiment-auth-policy
  namespace: istio-system
  resourceVersion: ""1291""
  selfLink: /apis/authentication.istio.io/v1alpha1/namespaces/istio-system/policies/experiment-auth-policy
  uid: fdd87926-9643-11e9-958c-06dd7915cd8a
spec:
  origins:
  - jwt:
      audiences:
      - http://api.cognizant-ai.dev/experimentsrv
      issuer: https://cognizant-ai.auth0.com/
      jwksUri: https://cognizant-ai.auth0.com/.well-known/jwks.json
  peers:
  - mtls: {}
  principalBinding: USE_ORIGIN
  targets:
  - name: istio-ingressgateway
    namespace: istio-system
",
Mutual TLS origination by Egress Gateway - Security - Discuss Istio,"apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: myservice-ext
  namespace: my-namespace
spec:
  hosts:
  - myservice.domain.local
  ports:
  - number: 80
    name: http-port
    protocol: HTTP
  - number: 443
    name: https
    protocol: HTTPS
  resolution: DNS
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: myservice-egressgateway
  namespace: my-namespace
spec:
  selector:
    istio: egressgateway
  servers:
  - port:
      number: 80
      name: https
      protocol: HTTPS
    hosts:
    - myservice.domain.local
    tls:
      mode: MUTUAL
      serverCertificate: /etc/certs/cert-chain.pem
      privateKey: /etc/certs/key.pem
      caCertificates: /etc/certs/root-cert.pem
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: egressgateway-for-myservice-ext
  namespace: my-namespace
spec:
  host: istio-egressgateway.istio-system.svc.cluster.local
  subsets:
  - name: myservice-ext
trafficPolicy:
  loadBalancer:
    simple: ROUND_ROBIN
  portLevelSettings:
  - port:
      number: 80
    tls:
      mode: ISTIO_MUTUAL
      sni: myservice.domain.local
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: direct-myservice-ext-through-egress-gateway
  namespace: my-namespace
spec:
  hosts:
  - myservice.domain.local
  gateways:
  - myservice-egressgateway
  - mesh
  http:
  - match:
- gateways:
  - mesh
  port: 80
route:
- destination:
    host: istio-egressgateway.istio-system.svc.cluster.local
    subset: myservice-ext
    port:
      number: 443
  weight: 100
  - match:
- gateways:
  - myservice-egressgateway
  port: 443
route:
- destination:
    host: myservice.domain.local
    port:
      number: 443
  weight: 100
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: originate-mtls-for-myservice-ext
  namespace: my-namespace
spec:
  host: myservice.domain.local
  trafficPolicy:
loadBalancer:
  simple: ROUND_ROBIN
portLevelSettings:
- port:
    number: 443
  tls:
    mode: MUTUAL
    clientCertificate: /etc/myservice-ext-certs/tls.crt
    privateKey: /etc/myservice-ext-certs/tls.key
    caCertificates: /etc/ca-certs/ca-certs.pem
    sni: myservice.domain.local
",,"apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: egressgateway-for-my-service
  namespace: my-namespace
spec:
  host: istio-egressgateway.istio-system.svc.cluster.local
  subsets:
  - name: my-service
    trafficPolicy:
      loadBalancer:
        simple: ROUND_ROBIN
      portLevelSettings:
      - port:
          number: 80
        tls:
          mode: DISABLE
          sni: myservice.domain.local
"
The ratings-v2 service fails to work for MongoDB - Security - Discuss Istio,"# istioctl authn tls-check ratings-v2-54f78f7c8c-2b22l | grep -i ratings
ratings.istio-lab.svc.cluster.local:9080                            OK           mTLS          mTLS       default/istio-lab                            ratings/istio-lab
 istioctl authn tls-check ratings-v2-54f78f7c8c-2b22l | grep -i mongodb
mongodb.istio-lab.svc.cluster.local:27017                           CONFLICT     mTLS          HTTP       default/istio-lab                            -
",,,"apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: mongodb
spec:
  host: mongodb.istio-lab.svc.cluster.local
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
",
Ingressgateway not grabbing end user authentication certs? - Security - Discuss Istio,"# Install istio and helm on brand new GKE cluster
helm init \
--tiller-tls \
--tiller-tls-cert tiller.cert.pem \
--tiller-tls-key tiller.key.pem \
--tiller-tls-verify \
--tls-ca-cert ca.cert.pem \
--service-account tiller
helm install {tls stuff} install/kubernetes/helm/istio --set security.enabled=true --name istio --namespace istio-system
helm install {tls stuff} keycloak --namespace keycloak

# Configure default namespace for sidecars
k label namespace default istio-injection=enabled

# Deploy the bookinfo app
k apply -f samples/bookinfo/platform/kube/bookinfo.yaml
k apply -f samples/bookinfo/networking/bookinfo-gateway.yaml

# Export ingress
export INGRESS_HOST=$(k -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
export INGRESS_PORT=$(k -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name==""http2"")].port}')
export SECURE_INGRESS_PORT=$(k -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name==""https"")].port}')

# Test Curl
curl $INGRESS_HOST/api/v1/products -s -o /dev/null -w ""%{http_code}\n""
200

# Create istio realm in keycloak via UI, create user, etc
# ...

# Create the Policy:

cat <<EOF | k apply -f -
apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: ""ingressgateway""
  namespace: istio-system
spec:
  targets:
  - name: istio-ingressgateway
  origins:
  - jwt:
      issuer: ""http://keycloak-http.keycloak/auth/realms/istio""
      jwksUri: ""http://keycloak-http.keycloak/auth/realms/istio/protocol/openid-connect/certs""
  principalBinding: USE_ORIGIN
EOF

# Test Curl Again
curl $INGRESS_HOST/api/v1/products -s -o /dev/null -w ""%{http_code}\n""
401

# Get token
k port-forward --namespace keycloak $POD_NAME 8080
TOKEN=$(curl http://127.0.0.1:8080/auth/realms/istio/protocol/openid-connect/token -d 'username=****&password=*****&grant_type=password&client_id=test'| jq -r "".access_token"")

# Attempt curl again:
curl --header ""Authorization: Bearer $TOKEN"" $INGRESS_HOST/api/v1/products -s -o /dev/null -w ""%{http_code}\n""
401


# Notice there are no certs in the ingress
k exec -it -n istio-system $(k -n istio-system get pods -l istio=ingressgateway -o jsonpath='{.items[0].metadata.name}') -- ls -al /etc/istio/ingressgateway-certs

total 8
drwxrwxrwt 3 root root   80 Jan 21 16:04 .
drwxr-xr-x 1 root root 4096 Jan 21 16:05 ..
drwxr-xr-x 2 root root   40 Jan 21 16:04 ..2019_01_21_16_04_59.194970182
lrwxrwxrwx 1 root root   31 Jan 21 16:04 ..data -> ..2019_01_21_16_04_59.194970182

# Notice the ingress is unaware of the cert chain
k exec -ti $(k get po -l istio=ingressgateway -n istio-system -o jsonpath={.items[0]..metadata.name}) -n istio-system -- curl  127.0.0.1:15000/certs


{
	""ca_cert"": ""Certificate Path: /etc/certs/root-cert.pem, Serial Number: d21fd824708e78c89704373c6487f13a, Days until Expiration: 364"",
	""cert_chain"": ""Certificate Path: /etc/certs/cert-chain.pem, Serial Number: 0d0a1e2ea98fa68d3248c3853c4acc23, Days until Expiration: 89""
}",
[Probably solved in 1.1] Which steps are required to set up trusted service communication? - Security - Discuss Istio,"$ kubectl describe meshpolicies.authentication.istio.io default
Spec:
  Peers:
    Mtls:
 $ kubectl describe -n ns2 policies.authentication.istio.io mariadb-tls-policy
Spec:
  Peers:
    Mtls:
      Mode:  STRICT
  Targets:
    Name:  mariadb

$ kubectl describe -n ns2 destinationrules.networking.istio.io mariadb-mtls
Spec:
  Host:  mariadb.ns2.svc.cluster.local
  Traffic Policy:
    Tls:
      Mode:  ISTIO_MUTUAL

$ kubectl describe -n ns2 serviceroles.rbac.istio.io mariadb-consumer-role
Spec:
  Rules:
    Methods:
      *
    Services:
      mariadb.ns2.svc.cluster.local

$ kubectl describe -n ns2 servicerolebindings.rbac.istio.io mariadb-consumer-role-binding
Spec:
  Role Ref:
    Kind:  ServiceRole
    Name:  mariadb-consumer-role
  Subjects:
    User:  xxx
 Escape character is '^]'.
Y
5.5.5-10.2.21-MariaDB�K'!m&q*z�����LJme5upU5GFgmysql_native_password
Connection closed by foreign host.
",,"$ docker history bitnami/mariadb:10.2.21
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
78d69dae35ab        5 days ago          /bin/sh -c #(nop)  CMD [""/run.sh""]              0 B
<missing>           5 days ago          /bin/sh -c #(nop)  ENTRYPOINT [""/entrypoin...   0 B
<missing>           5 days ago          /bin/sh -c #(nop)  USER 1001                    0 B
<missing>           5 days ago          /bin/sh -c #(nop)  EXPOSE 3306                  0 B
[...]
   containers:
  - env:
    - name: MARIADB_ROOT_PASSWORD
      valueFrom:
        secretKeyRef:
          key: mariadb-root-password
          name: mariadb
    - name: MARIADB_USER
      value: test
    - name: MARIADB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: mariadb-password
          name: mariadb
    - name: MARIADB_DATABASE
      value: test
    image: docker.io/bitnami/mariadb:10.2.21
    imagePullPolicy: IfNotPresent
    livenessProbe:
      exec:
        command:
        - sh
        - -c
        - exec mysqladmin status -uroot -p$MARIADB_ROOT_PASSWORD
      failureThreshold: 3
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    name: mariadb
    ports:
    - containerPort: 3306
      name: mysql
[...]
   istio-proxy:
    Container ID:  docker://00a89be493b58568b4c446dd2b1e787129c9e23e1834367c581d3945d7ff1376
    Image:         docker.io/istio/proxyv2:1.0.5
    Image ID:      docker-pullable://istio/proxyv2@sha256:8b7d549100638a3697886e549c149fb588800861de8c83605557a9b4b20343d4
    Port:          15090/TCP
    Host Port:     0/TCP
    Args:
      proxy
      sidecar
      --configPath
      /etc/istio/proxy
      --binaryPath
      /usr/local/bin/envoy
      --serviceCluster
      mariadb
      --drainDuration
      45s
      --parentShutdownDuration
      1m0s
      --discoveryAddress
      istio-pilot.istio-system:15007
      --discoveryRefreshDelay
      1s
      --zipkinAddress
      zipkin.istio-system:9411
      --connectTimeout
      10s
      --proxyAdminPort
      15000
      --controlPlaneAuthPolicy
      NONE
    State:          Running
      Started:      Fri, 01 Feb 2019 23:04:42 +0000
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  10m
    Environment:
      POD_NAME:                      mariadb-mariadb-0 (v1:metadata.name)
      POD_NAMESPACE:                 ns2 (v1:metadata.namespace)
      INSTANCE_IP:                    (v1:status.podIP)
      ISTIO_META_POD_NAME:           mariadb-mariadb-0 (v1:metadata.name)
      ISTIO_META_INTERCEPTION_MODE:  REDIRECT
      ISTIO_METAJSON_LABELS:         {""app"":""mariadb"",""chart"":""mariadb-5.5.0"",""component"":""master"",""release"":""mariadb""}
                                     
    Mounts:
      /etc/certs/ from istio-certs (ro)
      /etc/istio/proxy from istio-envoy (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-9qq9x (ro)","  runAsUser: 0
  runAsNonRoot: false
 image: docker.io/istio/proxy_init:1.0.5
imagePullPolicy: IfNotPresent
name: istio-init
resources: {}
securityContext:
  runAsUser: 0
  runAsNonRoot: false
  capabilities:
    add:
    - NET_ADMIN
  privileged: true",,"[2019-02-04T21:00:17.592Z] - 4 130 517 ""127.0.0.1:3306"" inbound|3306||mariadb.ns2.svc.cluster.local 127.0.0.1:40772 10.44.0.79:3306 10.36.0.219:47318
 $ ./../istio/istio-1.0.5/bin/istioctl authn tls-check mariadb.ns2.svc.cluster.local
Stderr when execute [/usr/local/bin/pilot-discovery request GET /debug/authenticationz ]: gc 1 @0.028s 7%: 0.12+1.0+2.0 ms clock, 0.49+0.080/0.47/0.49+8.1 ms cpu, 4->4->1 MB, 5 MB goal, 4 P
gc 2 @0.043s 8%: 0.062+1.4+1.1 ms clock, 0.24+0.19/1.1/1.1+4.4 ms cpu, 4->4->2 MB, 5 MB goal, 4 P

HOST:PORT                                                     STATUS     SERVER     CLIENT     AUTHN POLICY                                      DESTINATION RULE
mariadb.ns2.svc.cluster.local:3306     OK         mTLS       mTLS       mariadb-tls-policy/ns2     mariadb-mtls/ns2
 $ ./../istio/istio-1.0.5/bin/istioctl authn tls-check myservice.ns1.svc.cluster.local
Stderr when execute [/usr/local/bin/pilot-discovery request GET /debug/authenticationz ]: gc 1 @0.016s 11%: 0.008+0.96+1.9 ms clock, 0.034+0.14/0.61/0.61+7.7 ms cpu, 4->4->1 MB, 5 MB goal, 4 P
gc 2 @0.031s 12%: 0.023+1.4+1.9 ms clock, 0.093+0.10/1.1/1.2+7.8 ms cpu, 4->4->2 MB, 5 MB goal, 4 P

HOST:PORT                                                          STATUS     SERVER     CLIENT     AUTHN POLICY     DESTINATION RULE
myservice.ns1.svc.cluster.local:7200     OK         mTLS       mTLS       default/         myservice-destination/ns1
",,,"$ kubectl describe -n rook-ceph-system serviceroles.rbac.istio.io,servicerolebindings.rbac.istio.io 
Name:         rook-ceph-system-consumer-role
Namespace:    rook-ceph-system
Labels:       app=rook-ceph-system
Annotations:  kubectl.kubernetes.io/last-applied-configuration:
                {""apiVersion"":""rbac.istio.io/v1alpha1"",""kind"":""ServiceRole"",""metadata"":{""annotations"":{},""labels"":{""app"":""rook-ceph-system""},""name"":""rook-...
API Version:  rbac.istio.io/v1alpha1
Kind:         ServiceRole
Metadata:
  Creation Timestamp:  2019-02-01T22:56:02Z
  Generation:          1
  Resource Version:    816642
  Self Link:           /apis/rbac.istio.io/v1alpha1/namespaces/rook-ceph-system/serviceroles/rook-ceph-system-consumer-role
  UID:                 8ca7187d-2674-11e9-b4f3-020d67c15ea8
Spec:
  Rules:
    Methods:
      *
    Services:
      *.rook-ceph-system.svc.cluster.local
      *
Events:  <none>


Name:         rook-ceph-system-consumer-role-binding
Namespace:    rook-ceph-system
Labels:       app=rook-ceph-system
Annotations:  kubectl.kubernetes.io/last-applied-configuration:
                {""apiVersion"":""rbac.istio.io/v1alpha1"",""kind"":""ServiceRoleBinding"",""metadata"":{""annotations"":{},""labels"":{""app"":""rook-ceph-system""},""name""...
API Version:  rbac.istio.io/v1alpha1
Kind:         ServiceRoleBinding
Metadata:
  Creation Timestamp:  2019-02-01T22:56:02Z
  Generation:          1
  Resource Version:    816655
  Self Link:           /apis/rbac.istio.io/v1alpha1/namespaces/rook-ceph-system/servicerolebindings/rook-ceph-system-consumer-role-binding
  UID:                 8cad5419-2674-11e9-b4f3-020d67c15ea8
Spec:
  Role Ref:
    Kind:  ServiceRole
    Name:  rook-ceph-system-consumer-role
  Subjects:
    User:  *
Events:    <none>",,"$ kubectl get rbacs.config.istio.io,rbacconfigs.rbac.istio.io --all-namespaces 
NAMESPACE      NAME                               AGE
istio-system   rbacconfig.rbac.istio.io/default   12d

$ kubectl describe -n istio-system rbacconfigs.rbac.istio.io 
Name:         default
Namespace:    istio-system
Labels:       <none>
Annotations:  kubectl.kubernetes.io/last-applied-configuration:
                {""apiVersion"":""rbac.istio.io/v1alpha1"",""kind"":""RbacConfig"",""metadata"":{""annotations"":{},""name"":""default"",""namespace"":""istio-system""},""spec...
API Version:  rbac.istio.io/v1alpha1
Kind:         RbacConfig
Metadata:
  Creation Timestamp:  2019-01-23T13:34:29Z
  Generation:          1
  Resource Version:    95981
  Self Link:           /apis/rbac.istio.io/v1alpha1/namespaces/istio-system/rbacconfigs/default
  UID:                 9c271e5a-1f13-11e9-b86d-020d67c15ea8
Spec:
  Exclusion:
    Namespaces:
      default
  Mode:  ON_WITH_EXCLUSION
Events:  <none>

$ kubectl apply -f ../istio-clusterrbac.yaml 
error: unable to recognize ""../istio-clusterrbac.yaml"": no matches for kind ""ClusterRbacConfig"" in version ""rbac.istio.io/v1alpha1""",,,,"apiVersion: v1
kind: ServiceAccount
metadata:
  name: bookinfo-productpage
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: productpage-v1
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: productpage
        version: v1
    spec:
      serviceAccountName: bookinfo-productpage
      containers:
      - name: productpage
        image: istio/examples-bookinfo-productpage-v1:1.10.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9080
",,
Istio 1.0.6 - set mtls mode to strict from Helm - Security - Discuss Istio,"spec:
  peers:
  - mtls:
      mode: STRICT
 apiVersion: authentication.istio.io/v1alpha1
kind: MeshPolicy
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {""apiVersion"":""authentication.istio.io/v1alpha1"",""kind"":""MeshPolicy"",""metadata"":{""annotations"": 
 {},""labels"":{""app"":""istio-security"",""chart"":""security- 
 1.0.6"",""heritage"":""Tiller"",""release"":""istio""},""name"":""default"",""namespace"":""""},""spec"":{""peers"":[{""mtls"":{}}]}}
",
Istio RBAC - v1.1.5 - K8S - Security - Discuss Istio,"    apiVersion: ""rbac.istio.io/v1alpha1""
    kind: ClusterRbacConfig
    metadata:
      name: default
    spec:
      mode: 'ON'
",,,
DestinationRule with subsets for selecting TLS mode? - Security - Discuss Istio,"apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: default
  namespace: demo
spec:
  host: ""*.local""
#  trafficPolicy:
#    tls:
#      mode: ISTIO_MUTUAL
  subsets:
# This does not work: subset inherits top level TLS mode
# and if removing top level, they have no effect.
# see also command ""istioctl authn tls-check"" for current TLS status
  - name: inside-mesh
    labels:
      istio: enabled
    trafficPolicy:
      tls:
        mode: ISTIO_MUTUAL
  - name: outside-mesh
    labels:
      istio: disabled
    trafficPolicy:
      tls:
        mode: DISABLE
",,
Enabling mTLS results in SSL handshake error - Security - Discuss Istio,"[2019-05-30 12:48:35.477][20][debug][main] [external/envoy/source/server/connection_handler_impl.cc:257] [C91] new connection
[2019-05-30 12:48:35.477][20][debug][connection] [external/envoy/source/extensions/transport_sockets/tls/ssl_socket.cc:142] [C91] handshake error: 1
[2019-05-30 12:48:35.477][20][debug][connection] [external/envoy/source/extensions/transport_sockets/tls/ssl_socket.cc:175] [C91] TLS error: 268435612:SSL routines:OPENSSL_internal:HTTP_REQUEST
",,,,"apiVersion: v1
items:
- apiVersion: authentication.istio.io/v1alpha1
  kind: Policy
  metadata:
    creationTimestamp: ""2019-06-13T02:13:40Z""
    generation: 1
    name: default
    namespace: smaas-service
    resourceVersion: ""4367""
    selfLink: /apis/authentication.istio.io/v1alpha1/namespaces/smaas-service/policies/default
    uid: dc2c9469-8d80-11e9-9bb5-020b1c2fd1e6
  spec:
    peers:
    - mtls:
        mode: STRICT
kind: List
metadata:
  resourceVersion: """"
  selfLink: """"

apiVersion: v1
items:
- apiVersion: networking.istio.io/v1alpha3
  kind: DestinationRule
  metadata:
    creationTimestamp: ""2019-06-13T02:13:40Z""
    generation: 1
    name: default
    namespace: smaas-service
    resourceVersion: ""4362""
    selfLink: /apis/networking.istio.io/v1alpha3/namespaces/smaas-service/destinationrules/default
    uid: dc2a0395-8d80-11e9-9bb5-020b1c2fd1e6
  spec:
    host: '*.smaas-service.svc.cluster.local'
    trafficPolicy:
      tls:
        mode: ISTIO_MUTUAL
kind: List
metadata:
  resourceVersion: """"
  selfLink: """"
 apiVersion: v1
items:
- apiVersion: authentication.istio.io/v1alpha1
  kind: Policy
  metadata:
    creationTimestamp: ""2019-06-13T02:13:39Z""
    generation: 1
    name: default
    namespace: cse-service
    resourceVersion: ""4331""
    selfLink: /apis/authentication.istio.io/v1alpha1/namespaces/cse-service/policies/default
    uid: db8c90a7-8d80-11e9-9bb5-020b1c2fd1e6
  spec:
    peers:
    - mtls:
        mode: STRICT
kind: List
metadata:
  resourceVersion: """"
  selfLink: """"

apiVersion: v1
items:
- apiVersion: networking.istio.io/v1alpha3
  kind: DestinationRule
  metadata:
    creationTimestamp: ""2019-06-13T02:13:39Z""
    generation: 1
    name: default
    namespace: cse-service
    resourceVersion: ""4329""
    selfLink: /apis/networking.istio.io/v1alpha3/namespaces/cse-service/destinationrules/default
    uid: db8a6285-8d80-11e9-9bb5-020b1c2fd1e6
  spec:
    host: '*.cse-service.svc.cluster.local'
    trafficPolicy:
      tls:
        mode: ISTIO_MUTUAL
kind: List
metadata:
  resourceVersion: """"
  selfLink: """""
Authentication policy for JWT appears to be ignored (1.1.8) [solved] - Security - Discuss Istio,"
connecting to a0029d7d38dfa11e9906d061fe987042-2141910118.us-west-2.elb.amazonaws.com:80
Sending client initial metadata:
authorization : Bearer x
Received trailing metadata from server:
date : Fri, 14 Jun 2019 04:36:34 GMT
server : istio-envoy
x-envoy-upstream-service-time : 1
Rpc failed with status code 16, error message: square/go-jose: compact JWS format must have three parts token=""...arer x"" stack=""[auth.go:138 auth.go:191 experimentsrv.pb.go:416 server.go:900 server.go:1122 server.go:617]""
 
[2019-06-14 04:18:30.758][26][debug][rbac] [external/envoy/source/extensions/filters/http/rbac/rbac_filter.cc:64] checking request: remoteAddress: 100.96.1.9:57938, localAddress: 100.96.1.28:30001, ssl: uriSanPeerCertificate: spiffe://cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account, subjectPeerCertificate: , headers: ':scheme', 'https'
':method', 'POST'
':authority', 'a0029d7d38dfa11e9906d061fe987042-2141910118.us-west-2.elb.amazonaws.com:80'
':path', '/dev.cognizant_ai.experiment.Service/Get'
'authorization', 'Bearer x'
'te', 'trailers'
'content-type', 'application/grpc'
'user-agent', 'grpc-c++/1.21.2 grpc-c/7.0.0 (linux; chttp2; gandalf)'
'grpc-accept-encoding', 'identity,deflate,gzip'
'accept-encoding', 'identity,gzip'
'x-forwarded-for', '100.96.1.1'
'x-forwarded-proto', 'http'
'x-envoy-external-address', '100.96.1.1'
'x-request-id', '483e6da1-dfae-4113-9663-5faf626fccf6'
'x-istio-attributes', 'CkIKGGRlc3RpbmF0aW9uLnNlcnZpY2UuaG9zdBImEiRleHBlcmltZW50LmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwKQAoXZGVzdGluYXRpb24uc2VydmljZS51aWQSJRIjaXN0aW86Ly9kZWZhdWx0L3NlcnZpY2VzL2V4cGVyaW1lbnQKKAoYZGVzdGluYXRpb24uc2VydmljZS5uYW1lEgwSCmV4cGVyaW1lbnQKKgodZGVzdGluYXRpb24uc2VydmljZS5uYW1lc3BhY2USCRIHZGVmYXVsdApPCgpzb3VyY2UudWlkEkESP2t1YmVybmV0ZXM6Ly9pc3Rpby1pbmdyZXNzZ2F0ZXdheS01NDQ5N2I1ODQ5LWtqc3B2LmlzdGlvLXN5c3RlbQ=='
'x-b3-traceid', '93f63f1e4a3da7e6584795e02e5e4c0b'
'x-b3-spanid', '584795e02e5e4c0b'
'x-b3-sampled', '0'
'x-forwarded-client-cert', 'By=spiffe://cluster.local/ns/default/sa/default;Hash=951bd7368db7099fbcdd9bcaf6137d3fc6276c142c2efa991f8584e61a31af99;Subject="""";URI=spiffe://cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account'
, dynamicMetadata: filter_metadata {
  key: ""istio_authn""
  value {
    fields {
      key: ""request.auth.principal""
      value {
        string_value: ""cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account""
      }
    }
    fields {
      key: ""source.namespace""
      value {
        string_value: ""istio-system""
      }
    }
    fields {
      key: ""source.principal""
      value {
        string_value: ""cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account""
      }
    }
    fields {
      key: ""source.user""
      value {
        string_value: ""cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account""
      }
    }
  }
}

[2019-06-14 04:18:30.758][26][debug][rbac] [external/envoy/source/extensions/filters/http/rbac/rbac_filter.cc:104] enforced allowed
 apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: ingress-gateway
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP2
    hosts:
    - ""*""
---
apiVersion: authentication.istio.io/v1alpha1
kind: Policy
metadata:
  name: experiment-auth-policy
spec:
  targets:
  - name: experiment
  peers:
  - mtls:
  origins:
  - jwt:
      issuer: ""https://cognizant-ai.auth0.com/""
      jwksUri: ""https://cognizant-ai.auth0.com/.well-known/jwks.json""
      audiences:
        - ""http://api.cognizant-ai.dev/experimentsrv""
  originIsOptional: false
  principalBinding: USE_ORIGIN
---
apiVersion: rbac.istio.io/v1alpha1
kind: ClusterRbacConfig
metadata:
  name: default
spec:
  mode: 'ON_WITH_INCLUSION'
  inclusion:
    namespaces: [""default""]
---
apiVersion: rbac.istio.io/v1alpha1
kind: ServiceRole
metadata:
  name: service-user
spec:
  rules:
  - services: [""*""]
    paths: [""*""]
    methods: [""*""]
---
apiVersion: rbac.istio.io/v1alpha1
kind: ServiceRoleBinding
metadata:
  name: all-authenticated-users
spec:
  subjects:
  - properties:
      source.principal: ""*""
  roleRef:
    kind: ServiceRole
    name: service-user
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: grpc-experiment-service
spec:
  gateways:
  - ingress-gateway
  hosts:
  - ""*""
  http:
  - match:
    - uri:
        prefix: ""/dev.cognizant_ai.experiment.Service/""
    - uri:
       prefix: ""/grpc.reflection.v1alpha.ServerReflection/""
    route:
    - destination:
        host: experiment.default.svc.cluster.local
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: experiment
spec:
  host: experiment
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
---
apiVersion: v1
kind: Service
metadata:
  name: experiment
  labels:
    app: experiment
spec:
  ports:
  - port: 30001
    name: grpc-exp
    targetPort: 30001
  selector:
    app: experiment
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: experiment-v1
  labels:
    version: v1
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: experiment
        version: v1
    spec:
      containers:
      - name: experiment
        {{if .duat.awsecr}}
        image: {{.duat.awsecr}}/platform-services/{{.duat.module}}:{{.duat.version}}
        {{else}}
        image: localhost:32000/platform-services/{{.duat.module}}:{{.duat.version}}
        {{end}}
        imagePullPolicy: Always
        resources:
          requests:
            memory: ""2048Mi""
            cpu: ""100m""
          limits:
            memory: ""2048Mi""
            cpu: ""100m""
        ports:
        - containerPort: 30001
          name: grpc-exp
        env:
        - name: ""LOGXI_FORMAT""
          value: ""happy,maxcol=1024""
        - name: ""LOGXI""
          value: ""*=TRC""
        - name: ""IP_PORT""
          value: "":30001,0.0.0.0:30001""
        - name: ""PGHOST""
          valueFrom:
            secretKeyRef:
              name: postgres
              key: host
        - name: ""PGPORT""
          valueFrom:
            secretKeyRef:
              name: postgres
              key: port
        - name: ""PGDATABASE""
          valueFrom:
            secretKeyRef:
              name: postgres
              key: database
        - name: ""PGUSER""
          valueFrom:
            secretKeyRef:
              name: postgres
              key: username
        - name: ""PGPASSWORD""
          valueFrom:
            secretKeyRef:
              name: postgres
              key: password
---
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: auth0-egress
spec:
  hosts:
  - ""cognizant-ai.auth0.com""
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  - number: 80
    name: http
    protocol: HTTP
  resolution: DNS
  location: MESH_EXTERNAL
---
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: psql-egress
spec:
  hosts:
    - ""{{ expandenv ""$PGHOST"" }}""
  ports:
    - name: psql
      number: 5432
      protocol: tcp
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
 name: psql-egress
spec:
 host: ""{{ expandenv ""$PGHOST"" }}""
 trafficPolicy:
   tls:
     mode: DISABLE
",,,,
Nodeagent crashing - Security - Discuss Istio,"$ kubectl version
Client Version: version.Info{Major:""1"", Minor:""14"", GitVersion:""v1.14.0"", GitCommit:""641856db18352033a0d96dbc99153fa3b27298e5"", GitTreeState:""clean"", BuildDate:""2019-03-26T00:04:52Z"", GoVersion:""go1.12.1"", Compiler:""gc"", Platform:""darwin/amd64""}
Server Version: version.Info{Major:""1"", Minor:""11+"", GitVersion:""v1.11.8-gke.6"", GitCommit:""394ee507d00f15a63cef577a14026096c310698e"", GitTreeState:""clean"", BuildDate:""2019-03-30T19:31:43Z"", GoVersion:""go1.10.8b4"", Compiler:""gc"", Platform:""linux/amd64""}
 2019-06-24T17:11:19.156269Z     info    unalbe to fetch CA TLS root cert: failed to get CA TLS root cert: configmaps ""istio-security"" not found, retry in 2s
2019-06-24T17:11:19.156342Z     error   failed to create caClient: exhausted all the retries (100) to fetch the CA TLS root cert
2019-06-24T17:11:19.156360Z     error   failed to create secretFetcher for workload proxy: failed to create caClient

$ kubectl -n foo get cm istio-security -o yaml
apiVersion: v1
data:
  caTLSRootCert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMzakNDQWNhZ0F3SUJBZ0lSQUo0OXJsY1BjbEtWY1ErMm1IckVxWmN3RFFZSktvWklodmNOQVFFTEJRQXcKR0RFV01CUUdBMVVFQ2hNTlkyeDFjM1JsY2k1c2IyTmhiREFlRncweE9UQTJNalF4TnpBNE1EQmFGdzB5T1RBMgpNakV4TnpBNE1EQmFNQmd4RmpBVUJnTlZCQW9URFdOc2RYTjBaWEl1Ykc5allXd3dnZ0VpTUEwR0NTcUdTSWIzCkRRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzhLN0JiU0VtR3JMOTZxYUJhby9hWk42SUJ5WmcxUFFiaUIzenIKTWhhanJlSTRPQ0k0OWR6c25GNnc5bWFPRjBYb3N2T2VXMXloVTVVUUg4aUJueTJyckk3SE0yZlBRRUprcExMNQpjc0FhdjB4b1NZUEJIc2tNMk5CUWZ6ZmprSmgxbHc4ZzNyVXFCS3lvNHhlOVVtVU51MjRzQmxaQ3VxbGFLQzRpCnZUOVJzSThlS25iT2d3c0oydnFZeEFmUnBtdTVVOXJPemMrLzBGNzFWVTFWMk9zVDUwM3ZkVHhVYVM1c212cEsKWlJJT29CY2wwZ0gyZ3F6aTRHalViLy94cmlXQVpVUGc2ZTZPRWdNdk5YdmhubEdsSElacWdhSEsrVG96S2Z4TApUOGJRMitpWTdpcTBZY2JsZWhsZWFnclBCSFZrMUJhNExvY1NsSm84dmNpS25WaGRBZ01CQUFHakl6QWhNQTRHCkExVWREd0VCL3dRRUF3SUNCREFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUIKQVFCM1VRVmRqdndpUW5mbG0xdERwOFNwSVZaRjdNMkhGRFVtaFY3NkMwZXJBUGkyeWMvZS9XcVVCdm9JRnVZQQpiS2FiaCthbWtvYWFuM1hDRjVKeFFST3VSY09xMjQvbWlCWG5zTzFjUnFoM2FkUjhKRmVhYTJWKy9JR1VDZkNjCjZwTTRpQnRSUmtqa2ZTeWlFSkNhTWYxcTlpTWJoZGNFYjB4L2kxditSTmdRQW5YTkNudlU0MWdmYnFHaUNkT1IKU1dqVVgwK29XOW1ueURnYzJUemZaeXhwL0VJQ2Z0VkR3MWtmK0FiMTZxNjZBNFVmbjIvT0paN1hkMnRDR0lNbQoyM2hqaWtjcU15RW1rTy93UG11VGdRZUorUTlJbzV5dDNUSWEybTBERXFhU1A4YzYwb3R2dVpmbUxuWG9yUVU3CmxqU211OUdqcVZ6WEtZMVFUN09nMERIawotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
kind: ConfigMap
metadata:
  creationTimestamp: ""2019-06-24T17:08:00Z""
  name: istio-security
  namespace: foo
  resourceVersion: ""28623497""
  selfLink: /api/v1/namespaces/foo/configmaps/istio-security
  uid: 9eb31555-96a2-11e9-8301-42010a800fc1
 helm template install/kubernetes/helm/istio --name istio --namespace foo \
    --set gateways.istio-ingressgateway.sds.enabled=true \
   	--set security.enabled=true \
   	--set galley.enabled=true \
   	--set sidecarInjectorWebhook.enabled=false \
   	--set mixer.enabled=false \
   	--set mixer.policy.enabled=false \
   	--set mixer.telemetry.enabled=false \
   	--set prometheus.enabled=false \
   	--set pilot.sidecar=false \
   	--values install/kubernetes/helm/istio/values-istio-sds-auth.yaml | kubectl -f
 $ cat install/kubernetes/helm/istio/values-istio-sds-auth.yaml
global:
  controlPlaneSecurityEnabled: false

  mtls:
    # Default setting for service-to-service mtls. Can be set explicitly using
    # destination rules or service annotations.
    enabled: false

  sds:
    enabled: true
    udsPath: ""unix:/var/run/sds/uds_path""
    useNormalJwt: true

nodeagent:
  enabled: true
  image: node-agent-k8s
  env:
    CA_PROVIDER: ""Citadel""
    CA_ADDR: ""istio-citadel:8060""
    VALID_TOKEN: true
",,,,,,,
gRPC JWT Authentication silently failing in Istio [workaround] - Security - Discuss Istio,"ServerReflectionInfo rpc failed. Error code: 16, message: Origin authentication failed., debug info: {""created"":""@1561400758.691920836"",""description"":""Error received from peer ipv4:52.89.159.189:80"",""file"":""src/core/lib/surface/call.cc"",""file_line"":1046,""grpc_message"":""Origin authentication failed."",""grpc_status"":16}
 2019-06-24T18:18:48.690003Z     debug   rbac    building filter for HTTP listener protocol
2019-06-24T18:18:48.690027Z     debug   rbac    used RBAC v1 for HTTP filter
2019-06-24T18:18:48.690035Z     debug   rbac    checking role service-user
2019-06-24T18:18:48.690057Z     debug   rbac    generated policy for role: service-user
2019-06-24T18:18:48.690140Z     debug   rbac    generated http filter config: {policies:<key:""service-user"" value:<permissions:<and_rules:<rules:<or_rules:<rules:<header:<name:"":method"" present_match:true > > > > rules:<or_rules:<rules:<header:<name:"":path"" present_match:true > > > > > > principals:<and_ids:<ids:<any:true > > > > >  <nil> {} [] 0}
2019-06-24T18:18:48.690864Z     info    rbac    built RBAC http filter for &{downstream.default.svc.cluster.local map[pod-template-hash:846654d78d version:v1 app:downstream] map[destination.name:downstream destination.namespace:default destination.user:default]}
2019-06-24T18:26:28.484541Z     debug   rbac    building filter for HTTP listener protocol
2019-06-24T18:26:28.484561Z     debug   rbac    used RBAC v1 for HTTP filter
2019-06-24T18:26:28.484569Z     debug   rbac    checking role service-user
2019-06-24T18:26:28.484587Z     debug   rbac    generated policy for role: service-user
2019-06-24T18:26:28.484655Z     debug   rbac    generated http filter config: {policies:<key:""service-user"" value:<permissions:<and_rules:<rules:<or_rules:<rules:<header:<name:"":method"" present_match:true > > > > rules:<or_rules:<rules:<header:<name:"":path"" present_match:true > > > > > > principals:<and_ids:<ids:<any:true > > > > >  <nil> {} [] 0}
2019-06-24T18:26:28.485202Z     info    rbac    built RBAC http filter for &{experiment.default.svc.cluster.local map[pod-template-hash:59f8cc7b8 version:v1 app:experiment] map[destination.name:experiment destination.namespace:default destination.user:default]}
 ---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: ingress-gateway
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP2
    hosts:
    - ""*""
---
apiVersion: authentication.istio.io/v1alpha1
kind: Policy
metadata:
  name: experiment-auth-policy
  namespace: istio-system
spec:
  targets:
  - name: istio-ingressgateway
  peers:
  - mtls: {}
  origins:
  - jwt:
      issuer: ""https://cognizant-ai.auth0.com/""
      jwksUri: ""https://cognizant-ai.auth0.com/.well-known/jwks.json""
      audiences:
        - ""http://api.cognizant-ai.dev/experimentsrv""
  principalBinding: USE_ORIGIN
---
",,"kubectl port-forward -n istio-system istio-ingressgateway-7467c65c6d-7l226 9876:9876
",,"[2019-06-25 01:18:17.843][66][info][filter] [src/istio/utils/logger.cc:82] Logger active
[2019-06-25 01:20:17.263][97][debug][filter] [src/envoy/http/mixer/filter.cc:47] Called Mixer::Filter : Filter
[2019-06-25 01:20:17.263][97][debug][filter] [src/envoy/http/mixer/filter.cc:154] Called Mixer::Filter : setDecoderFilterCallbacks
[2019-06-25 01:20:17.263][97][debug][filter] [src/envoy/http/jwt_auth/jwt_authenticator.cc:82] Jwt authentication starts
[2019-06-25 01:20:17.263][97][debug][filter] [src/envoy/http/jwt_auth/jwt_authenticator.cc:243] Jwt authentication completed with: OK
[2019-06-25 01:20:17.263][97][debug][filter] [src/envoy/http/jwt_auth/jwt_authenticator.cc:246] The value of allow_missing_or_failed in AuthFilterConfig is: true
[2019-06-25 01:20:17.263][97][debug][filter] [src/envoy/http/jwt_auth/http_filter.cc:61] JwtVerificationFilter::onDone with status OK
[2019-06-25 01:20:17.263][97][debug][filter] [src/envoy/http/authn/http_filter.cc:54] AuthenticationFilter::decodeHeaders with config
policy {
  origins {
    jwt {
      issuer: ""https://cognizant-ai.auth0.com/""
      audiences: ""http://api.cognizant-ai.dev/experimentsrv""
      jwks_uri: ""https://cognizant-ai.auth0.com/.well-known/jwks.json""
    }
  }
  principal_binding: USE_ORIGIN
}
jwt_output_payload_locations {
  key: ""https://cognizant-ai.auth0.com/""
  value: ""istio-sec-9d5f190b268dc1b70527ed9a4f5167e1e41f5ed3""
}

[2019-06-25 01:20:17.263][97][debug][filter] [src/envoy/http/authn/peer_authenticator.cc:36] No method defined. Skip source authentication.
[2019-06-25 01:20:17.263][97][debug][filter] [src/envoy/http/authn/origin_authenticator.cc:52] Got request path /grpc.reflection.v1alpha.ServerReflection/ServerReflectionInfo
[2019-06-25 01:20:17.263][97][debug][filter] [src/envoy/http/authn/origin_authenticator.cc:66] Validating request path /grpc.reflection.v1alpha.ServerReflection/ServerReflectionInfo for
jwt issuer: ""https://cognizant-ai.auth0.com/""
audiences: ""http://api.cognizant-ai.dev/experimentsrv""
jwks_uri: ""https://cognizant-ai.auth0.com/.well-known/jwks.json""

[2019-06-25 01:20:17.263][97][debug][filter] [src/envoy/http/authn/filter_context.cc:81] No dynamic_metadata found for filter jwt-auth
[2019-06-25 01:20:17.263][97][debug][filter] [src/envoy/http/authn/origin_authenticator.cc:85] Origin authenticator failed
[2019-06-25 01:20:17.263][97][debug][filter] [src/envoy/http/mixer/filter.cc:141] Called Mixer::Filter : encodeHeaders 0
[2019-06-25 01:20:17.263][97][debug][filter] [src/envoy/http/authn/http_filter.cc:48] Called AuthenticationFilter : onDestroy
[2019-06-25 01:20:17.263][97][debug][filter] [src/envoy/http/mixer/filter.cc:214] Called Mixer::Filter : onDestroy state: 0
[2019-06-25 01:20:17.263][97][debug][filter] [src/envoy/http/mixer/filter.cc:228] Called Mixer::Filter : log
[2019-06-25 01:20:17.263][97][debug][filter] [./src/envoy/http/mixer/report_data.h:144] No dynamic_metadata found for filter envoy.filters.http.rbac
[2019-06-25 01:20:17.264][97][debug][filter] [src/istio/control/client_context_base.cc:140] Report attributes: attributes {
  key: ""connection.mtls""
  value {
    bool_value: false
  }

",,"[2019-06-25 21:04:59.629][97][debug][filter] [src/envoy/http/jwt_auth/jwt_authenticator.cc:243] Jwt authentication completed with: OK
 [2019-06-25 21:04:59.629][97][debug][filter] [src/envoy/http/mixer/filter.cc:47] Called Mixer::Filter : Filter
[2019-06-25 21:04:59.629][97][debug][filter] [src/envoy/http/mixer/filter.cc:154] Called Mixer::Filter : setDecoderFilterCallbacks
[2019-06-25 21:04:59.629][97][debug][filter] [src/envoy/http/jwt_auth/jwt_authenticator.cc:82] Jwt authentication starts
[2019-06-25 21:04:59.629][97][debug][filter] [src/envoy/http/jwt_auth/jwt_authenticator.cc:243] Jwt authentication completed with: OK
[2019-06-25 21:04:59.629][97][debug][filter] [src/envoy/http/jwt_auth/jwt_authenticator.cc:246] The value of allow_missing_or_failed in AuthFilterConfig is: true
[2019-06-25 21:04:59.629][97][debug][filter] [src/envoy/http/jwt_auth/http_filter.cc:61] JwtVerificationFilter::onDone with status OK
[2019-06-25 21:04:59.629][97][debug][filter] [src/envoy/http/authn/http_filter.cc:54] AuthenticationFilter::decodeHeaders with config
policy {
  origins {
    jwt {
      issuer: ""https://cognizant-ai.auth0.com/""
      audiences: ""http://api.cognizant-ai.dev/experimentsrv""
      jwks_uri: ""https://cognizant-ai.auth0.com/.well-known/jwks.json""
    }
  }
  principal_binding: USE_ORIGIN
}
jwt_output_payload_locations {
  key: ""https://cognizant-ai.auth0.com/""
  value: ""istio-sec-9d5f190b268dc1b70527ed9a4f5167e1e41f5ed3""
}

[2019-06-25 21:04:59.629][97][debug][filter] [src/envoy/http/authn/peer_authenticator.cc:36] No method defined. Skip source authentication.
[2019-06-25 21:04:59.629][97][debug][filter] [src/envoy/http/authn/origin_authenticator.cc:52] Got request path /grpc.reflection.v1alpha.ServerReflection/ServerReflectionInfo
[2019-06-25 21:04:59.629][97][debug][filter] [src/envoy/http/authn/origin_authenticator.cc:66] Validating request path /grpc.reflection.v1alpha.ServerReflection/ServerReflectionInfo for
jwt issuer: ""https://cognizant-ai.auth0.com/""
audiences: ""http://api.cognizant-ai.dev/experimentsrv""
jwks_uri: ""https://cognizant-ai.auth0.com/.well-known/jwks.json""

[2019-06-25 21:04:59.629][97][debug][filter] [src/envoy/http/authn/filter_context.cc:81] No dynamic_metadata found for filter jwt-auth
[2019-06-25 21:04:59.629][97][debug][filter] [src/envoy/http/authn/origin_authenticator.cc:85] Origin authenticator failed
[2019-06-25 21:04:59.629][97][debug][http] [external/envoy/source/common/http/conn_manager_impl.cc:1137] [C454][S4130852991934636687] Sending local reply with details istio_authn_access_
denied

",,,,"/usr/local/google/home/ymzhu/Dev/grpc/bins/opt/grpc_cli call 35.188.157.61:80 helloworld.Greeter.SayHello ""name: 'world'"" --protofiles=helloworld/helloworld.proto --metadata authorization:""Bearer $TOKEN""
D0626 20:10:22.477413380  199663 ev_posix.cc:142]            Using polling engine: epollex
D0626 20:10:22.477536268  199663 dns_resolver.cc:339]        Using native dns resolver
D0626 20:10:22.477712486  199663 dns_resolver.cc:280]        Start resolving.
I0626 20:10:22.517947379  199663 subchannel.cc:608]          New connected subchannel at 0x5577f44fb800 for subchannel 0x7fc33c001cc0
connecting to 35.188.157.61:80
Sending client initial metadata:
authorization : Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IkRIRmJwb0lVcXJZOHQyenBBMnFYZkNtcjVWTzVaRXI0UnpIVV8tZW52dlEiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjQ2ODU5ODk3MDAsImZvbyI6ImJhciIsImlhdCI6MTUzMjM4OTcwMCwiaXNzIjoidGVzdGluZ0BzZWN1cmUuaXN0aW8uaW8iLCJzdWIiOiJ0ZXN0aW5nQHNlY3VyZS5pc3Rpby5pbyJ9.CfNnxWP2tcnR9q0vxyxweaF3ovQYHYZl82hAUsn21bwQd9zP7c-LS9qd_vpdLG4Tn1A15NxfCjp5f7QNBUo-KC9PJqYpgGbaXhaGx7bEdFWjcwv3nZzvc7M__ZpaCERdwU7igUmJqYGBYQ51vr2njU9ZimyKkfDe3axcyiBZde7G6dabliUosJvvKOPcKIWPccCgefSj_GNfwIip3-SsFdlR7BtbVUcqR-yv-XOxJ3Uc1MI0tz3uMiiZcyPV7sNCU4KRnemRIMHVOfuvHsU60_GhGbiSFzgPTAa9WTltbnarTbxudb_YEOx12JiwYToeX0DCPb43W1tzIBxgm8NxUg
Received initial metadata from server:
date : Thu, 27 Jun 2019 03:10:22 GMT
server : istio-envoy
x-envoy-upstream-service-time : 4
message: ""Hello world""

Rpc succeeded with OK status
I0626 20:10:22.605281607  199663 proto_reflection_descriptor_database.cc:51] ServerReflectionInfo rpc failed. Error code: 16, details: Origin authentication failed.
 /usr/local/google/home/ymzhu/Dev/grpc/bins/opt/grpc_cli call 35.188.157.61:80 helloworld.Greeter.SayHello ""name: 'world'"" --protofiles=helloworld/helloworld.proto                                        
D0626 20:09:50.069473672  199289 ev_posix.cc:142]            Using polling engine: epollex
D0626 20:09:50.069662490  199289 dns_resolver.cc:339]        Using native dns resolver
D0626 20:09:50.069829685  199289 dns_resolver.cc:280]        Start resolving.
I0626 20:09:50.110369510  199289 subchannel.cc:608]          New connected subchannel at 0x55f9e749d3b0 for subchannel 0x7fe180001cc0
connecting to 35.188.157.61:80
Received trailing metadata from server:
date : Thu, 27 Jun 2019 03:09:50 GMT
server : istio-envoy
Rpc failed with status code 16, error message: Origin authentication failed.
I0626 20:09:50.189037445  199289 proto_reflection_descriptor_database.cc:51] ServerReflectionInfo rpc failed. Error code: 16, details: Origin authentication failed.
",,,,"      triggerRules:
      - excluded_paths:
          - prefix: ""/grpc.reflection.v1alpha.ServerReflection/""
",
gRPC JWT Authentication not enforced - Security - Discuss Istio,"apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: echo-server
  name: echo-server
spec:
  replicas: 1
  selector:
    matchLabels:
      run: echo-server
  template:
    metadata:
      labels:
        run: echo-server
    spec:
      containers:
      - name: echo-server
        image: saturnism/echo-server
---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: echo-server
  name: echo-server
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
    service.beta.kubernetes.io/aws-load-balancer-type: ""elb""
spec:
  type: LoadBalancer
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
  selector:
    run: echo-server
  sessionAffinity: None
---
apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: ""jwt-example""
spec:
  targets:
  - name: echo-server
  origins:
  - jwt:
      issuer: ""testing@secure.istio.io""
      jwksUri: ""https://raw.githubusercontent.com/istio/istio/release-1.2/security/tools/jwt/samples/jwks.json""
  principalBinding: USE_ORIGIN
",,,,,,"1	[2019-07-02 17:23:21.670][28][debug][http2] [external/envoy/source/common/http/http2/codec_impl.cc:747] [C1019] updating connection-level initial window size to 268435456
2	[2019-07-02 17:23:21.720][28][debug][filter] [src/envoy/http/mixer/filter.cc:47] Called Mixer::Filter : Filter
3	[2019-07-02 17:23:21.720][28][debug][filter] [src/envoy/http/mixer/filter.cc:154] Called Mixer::Filter : setDecoderFilterCallbacks
4	[2019-07-02 17:23:21.720][28][debug][filter] [src/envoy/http/jwt_auth/jwt_authenticator.cc:82] Jwt authentication starts
5	[2019-07-02 17:23:21.720][28][debug][filter] [src/envoy/http/jwt_auth/jwt_authenticator.cc:243] Jwt authentication completed with: OK
6	[2019-07-02 17:23:21.720][28][debug][filter] [src/envoy/http/jwt_auth/jwt_authenticator.cc:246] The value of allow_missing_or_failed in AuthFilterConfig is: true
7	[2019-07-02 17:23:21.720][28][debug][filter] [src/envoy/http/jwt_auth/http_filter.cc:61] JwtVerificationFilter::onDone with status OK
8	[2019-07-02 17:23:21.720][28][debug][filter] [src/envoy/http/authn/http_filter.cc:54] AuthenticationFilter::decodeHeaders with config
9	policy {
10	  origins {
11	    jwt {
12	      issuer: ""testing@secure.istio.io""
13	      jwks_uri: ""https://raw.githubusercontent.com/istio/istio/release-1.2/security/tools/jwt/samples/jwks.json""
14	    }
15	  }
16	  principal_binding: USE_ORIGIN
17	}
18	jwt_output_payload_locations {
19	  key: ""testing@secure.istio.io""
20	  value: ""istio-sec-5406b7840708063f65cbdf52153ca364a476d68b""
21	}
22	
23	[2019-07-02 17:23:21.720][28][debug][filter] [src/envoy/http/authn/peer_authenticator.cc:36] No method defined. Skip source authentication.
24	[2019-07-02 17:23:21.720][28][debug][filter] [src/envoy/http/authn/origin_authenticator.cc:52] Got request path /com.example.grpc.EchoService/echo
25	[2019-07-02 17:23:21.720][28][debug][filter] [src/envoy/http/authn/origin_authenticator.cc:66] Validating request path /com.example.grpc.EchoService/echo for jwt issuer: ""testing@secure.istio.io""
26	jwks_uri: ""https://raw.githubusercontent.com/istio/istio/release-1.2/security/tools/jwt/samples/jwks.json""
27	
28	[2019-07-02 17:23:21.720][28][debug][filter] [src/envoy/http/authn/filter_context.cc:81] No dynamic_metadata found for filter jwt-auth
29	[2019-07-02 17:23:21.720][28][debug][filter] [src/envoy/http/authn/origin_authenticator.cc:85] Origin authenticator failed
30	[2019-07-02 17:23:21.720][28][debug][filter] [src/envoy/http/mixer/filter.cc:141] Called Mixer::Filter : encodeHeaders 0
31	[2019-07-02 17:23:21.720][28][debug][filter] [src/envoy/http/authn/http_filter.cc:48] Called AuthenticationFilter : onDestroy
32	[2019-07-02 17:23:21.720][28][debug][filter] [src/envoy/http/mixer/filter.cc:214] Called Mixer::Filter : onDestroy state: 0
33	[2019-07-02 17:23:21.720][28][debug][http2] [external/envoy/source/common/http/http2/codec_impl.cc:567] [C1019] stream closed: 0
34	[2019-07-02 17:23:21.720][28][debug][filter] [src/envoy/http/mixer/filter.cc:228] Called Mixer::Filter : log
35	[2019-07-02 17:23:21.721][28][debug][filter] [./src/envoy/http/mixer/report_data.h:144] No dynamic_metadata found for filter envoy.filters.http.rbac
36	[2019-07-02 17:23:21.721][28][debug][filter] [src/istio/control/client_context_base.cc:140] Report attributes: attributes {
37	  key: ""connection.mtls""
38	  value {
39	    bool_value: false
40	  }
41	}
42	attributes {
43	  key: ""context.protocol""
44	  value {
45	    string_value: ""grpc""
46	  }
47	}
48	attributes {
49	  key: ""context.prox
50	[2019-07-02 17:23:22.717][28][debug][filter] [./src/envoy/utils/header_update.h:46] Mixer forward attributes set: Cj0KCnNvdXJjZS51aWQSLxIta3ViZXJuZXRlczovL2VjaG8tc2VydmVyLTg0ODU1YmNkYzYta2o2aGIuZm9v
51	[2019-07-02 17:23:22.717][28][debug][grpc] [src/envoy/utils/grpc_transport.cc:46] Sending Report request: attributes {
52	  strings {
53	    key: 17
54	    value: -3
55	  }
56	  strings {
57	    key: 18
58	    value: -7
59	  }
60	  strings {
61	    key: 19
62	    value: 91
63	  }
64	  strings {
65	    key: 22
66	    value: -8
67	  }
68	  strings {
69	    key: 25
70	    value: -5
71	  }
72	  strings {
73	    key: 131
74	    value: -12
75	  }
76	  strings {
77	    key: 154
78	    value: -15
79	  }
80	  strings {
81	    key: 155
82	    value: -14
83	  }
84	  strings {
85	    key: 190
86	    value: -1
87	  }
88	  strings {
89	    key: 191
90	    value: -13
91	  }
92	  strings {
93	    key: 192
94	    value: -14
95	  }
96	  strings {
97	    key: 193
98	    value: -18
99	  }
100	  strings {
101	    key: 197
102	    value: -15
103	  }
104	  strings {
105	    key: 198
106	    value: -17
107	  }
108	  strings {
109	    key: 199
110	    value: -16
111	  }
112	  strings {
113	    key: 201
114	    value: 219
115	  }
116	  strings {
117	    key: 203
118	    value: -3
119	  }
120	  strings {
121	    key: 205
122	    value: -2
123	  }
124	  int64s {
125	    key: 23
126	    value: 0
127	  }
128	  int64s {
129	    key: 27
130	    value: 0
131	  }
132	  int64s {
133	    key: 30
134	    value: 200
135	  }
136	  int64s {
137	    key: 151
138	    value: 8080
139	  }
140	  int64s {
141	    key: 169
142	    value: 0
143	  }
144	  int64s {
145	    key: 170
146	    value: 209
147	  }
148	  bools {
149	    key: 177
150	    value: false
151	  }
152	  timestamps {
153	    key: 24
154	    value {
155	      seconds: 1562088201
156	      nanos: 721000163
157	    }
158	  }
159	  timestamps {
160	    key: 28
161	    value {
162	      seconds: 1562088201
163	      nanos: 721020328
164	    }
165	  }
166	  durations {
167	    key: 29
168	    value {
169	      nanos: 292429
170	    }
171	  }
172	  bytes {
173	    key: -25
174	    value: ""\nnuD""
175	  }
176	  bytes {
177	    key: 150
178	    value: ""\000\000\000\000\000\000\000\000\000\000\377\377\nnv\242""
179	  }
180	  string_maps {
181	    key: 15
182	    value {
183	      entries {
184	        key: -10
185	        value: -9
186	      }
187	      entries {
188	        key: -6
189	        value: 106
190	      }
191	      entries {
192	        key: 31
193	        value: -7
194	      }
195	      entries {
196	        key: 32
197	        value: 91
198	      }
199	      entries {
200	        key: 33
201	        value: -3
202	      }
203	      entries {
204	        key: 34
205	        value: -8
206	      }
207	      entries {
208	        key: 58
209	        value: -4
210	      }
211	      entries {
212	        key: 86
213	        value: -5
214	      }
215	      entries {
216	        key: 100
217	        value: 92
218	      }
219	      entries {
220	        key: 102
221	        value: -11
222	      }
223	    }
224	  }
225	  string_maps {
226	    key: 26
227	    value {
228	      entries {
229	        key: -24
230	        value: -16
231	      }
232	      entries {
233	        key: -23
234	        value: -22
235	      }
236	      entries {
237	        key: -19
238	        value: -17
239	      }
240	      entries {
241	        key: 35
242	        value: 136
243	      }
244	      entries {
245	        key: 58
246	        value: -4
247	      }
248	      entries {
249	        key: 60
250	        value: -20
251	      }
252	      entries {
253	        key: 82
254	        value: -21
255	      }
256	    }
257	  }
258	}
259	default_words: ""istio://foo/services/echo-server""
260	default_words: ""-""
261	default_words: ""/com.example.grpc.EchoService/echo""
262	default_words: ""application/grpc""
263	default_words: ""grpc-java-netty/1.20.0""
264	default_words: ""grpc-accept-encoding""
265	default_words: ""echo-server.myorg.com:8081""
266	default_words: ""https""
267	default_words: ""trailers""
268	default_words: ""te""
269	default_words: ""be4404b1-c1c8-9a2d-8dee-b89879be85df""
270	default_words: ""grpc""
271	default_words: ""echo-server""
272	default_words: ""foo""
273	default_words: ""kubernetes://echo-server-84855bcdc6-kj6hb.foo""
274	default_words: ""Origin authentication failed.""
275	default_words: ""16""
276	default_words: ""echo-server.foo.svc.cluster.local""
277	default_words: ""grpc-status""
278	default_words: ""Tue, 02 Jul 2019 17:23:21 GMT""
279	default_words: ""istio-envoy""
280	default_words: ""echo-server.foo.svc.cluster.local:8081/*""
281	default_words: ""x-envoy-decorator-operation""
282	default_words: ""grpc-message""
283	default_words: ""origin.ip""
284	global_word_count: 221
285	repeated_attributes_semantics: INDEPENDENT_ENCODING
286	
287	[2019-07-02 17:23:22.719][28][debug][grpc] [src/envoy/utils/grpc_transport.cc:67] Report response:
288	[2019-07-02 17:23:22.719][28][debug][http2] [external/envoy/source/common/http/http2/codec_impl.cc:567] [C28] stream closed: 0
289	[2019-07-02 17:23:25.686][26][debug][filter] [external/envoy/source/extensions/filters/listener/original_dst/original_dst.cc:18] original_dst: New connection accepted
290	[2019-07-02 17:23:26.113][28][debug][filter] [external/envoy/source/extensions/filters/listener/original_dst/original_dst.cc:18] original_dst: New connection accepted
291	[2019-07-02T17:23:21.720Z] ""POST /com.example.grpc.EchoService/echo HTTP/2"" 200 - ""-"" ""-"" 0 0 0 - ""-"" ""grpc-java-netty/1.20.0"" ""be4404b1-c1c8-9a2d-8dee-b89879be85df"" ""echo-server.myorg.com:8081"" ""-"" - - 10.110.118.162:8080 10.110.117.68:39744 -
292	[2019-07-02 17:23:35.687][28][debug][filter] [external/envoy/source/extensions/filters/listener/original_dst/original_dst.cc:18] original_dst: New connection accepted
293	[2019-07-02 17:23:36.113][26][debug][filter] [external/envoy/source/extensions/filters/listener/original_dst/original_dst.cc:18] original_dst: New connection accepted
294	[2019-07-02 17:23:45.687][28][debug][filter] [external/envoy/source/extensions/filters/listener/original_dst/original_dst.cc:18] original_dst: New connection accepted
295	[2019-07-02 17:23:46.113][26][debug][filter] [external/envoy/source/extensions/filters/listener/original_dst/original_dst.cc:18] original_dst: New connection accepted
296	[2019-07-02 17:23:55.686][28][debug][filter] [external/envoy/source/extensions/filters/listener/original_dst/original_dst.cc:18] original_dst: New connection accepted
297	[2019-07-02 17:23:56.114][26][debug][filter] [external/envoy/source/extensions/filters/listener/original_dst/original_dst.cc:18] original_dst: New connection accepted
298	[2019-07-02 17:24:05.687][28][debug][filter] [external/envoy/source/extensions/filters/listener/original_dst/original_dst.cc:18] original_dst: New connection accepted",,
Authorization not working - Security - Discuss Istio,,,"apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: a
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: a
    spec:
      serviceAccountName: a-sa
      containers:
      - name: a
        image: fnature/ngnix-curl:1
        volumeMounts:
          - name: html
            mountPath: /usr/share/nginx/html/
        livenessProbe:
          httpGet:
            path: /
            port: 80
          periodSeconds: 1
        readinessProbe:
          httpGet:
            path: /
            port: 80
      volumes:
        - name: html
          configMap:
            name: res-clust1
            items:
              - key: message
path: index.html
 apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: a
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: a
    spec:
      serviceAccountName: a-sa
      containers:
      - name: a
        image: fnature/ngnix-curl:1
        ports:
           - containerPort: 80
             name: http
        volumeMounts:
          - name: html
            mountPath: /usr/share/nginx/html/
        livenessProbe:
          httpGet:
            path: /
            port: 80
          periodSeconds: 1
        readinessProbe:
          httpGet:
            path: /
            port: 80
      volumes:
        - name: html
          configMap:
            name: res-clust1
            items:
              - key: message
                path: index.html
 apiVersion: apps/v1beta1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: catalogue-deployment
spec:
  selector:
    matchLabels:
      app: catalogue
  replicas: 1 # tells deployment to run 1 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      # unlike pod-nginx.yaml, the name is not included in the meta data as a unique name is
      # generated from the deployment name
      labels:
        app: catalogue
    spec:
      containers:
      - name: fnature-catalogue
        image: fnature/fnature-catalogue:beta0
        ports:
         - containerPort: 3002
           name: http",,,,,,,,,,"apiVersion: v1
kind: Service
metadata:
  name: httpbin
  namespace: foo
  labels:
    app: httpbin
spec:
  ports:
  - name: http
    port: 8000
    targetPort: 80
  selector:
    app: httpbin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
  namespace: foo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpbin
      version: v1
  template:
    metadata:
      labels:
        app: httpbin
        version: v1
    spec:
      containers:
      - image: docker.io/kennethreitz/httpbin
        imagePullPolicy: IfNotPresent
        name: httpbin
        ports:
        - containerPort: 80
        livenessProbe:
          httpGet:
            path: /headers
            port: 80
          periodSeconds: 1
          initialDelaySeconds: 3
 apiVersion: ""rbac.istio.io/v1alpha1""
kind: ServiceRole
metadata:
  name: probe
  namespace: foo
spec:
  rules:
  - services: [""httpbin.foo.svc.cluster.local""]
    methods: [""GET""]
    paths: [""/headers""]
    constraints:
    - key: destination.port
      values: [""80""]
---
apiVersion: ""rbac.istio.io/v1alpha1""
kind: ServiceRoleBinding
metadata:
  name: probe
  namespace: foo
spec:
  subjects:
  - user: ""*""
  roleRef:
    kind: ServiceRole
    name: ""probe""
"
Trust custom Root CA on Egress Gateway - Security - Discuss Istio,,"caCertificates	string	

OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate. If omitted, the proxy will not verify the server’s certificate. Should be empty if mode is ISTIO_MUTUAL.
",,,"apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: myservice-ext
  namespace: mynamespace
spec:
  hosts:
  - myservice.domain.local
  ports:
  - number: 80
    name: http
    protocol: HTTP
  - number: 443
    name: https
    protocol: HTTPS
  resolution: DNS
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: istio-egressgateway-myservice
  namespace: mynamespace
spec:
  selector:
    istio: egressgateway
  servers:
  - port:
      number: 80
      name: https
      protocol: HTTPS
    hosts:
    - myservice.domain.local
    tls:
      mode: MUTUAL
      serverCertificate: /etc/certs/cert-chain.pem
      privateKey: /etc/certs/key.pem
      caCertificates: /etc/certs/root-cert.pem
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: egressgateway-for-myservice
  namespace: mynamespace
spec:
  host: istio-egressgateway.istio-system.svc.cluster.local
  subsets:
  - name: myservice
    trafficPolicy:
      loadBalancer:
        simple: ROUND_ROBIN
      portLevelSettings:
      - port:
          number: 80
        tls:
          mode: ISTIO_MUTUAL
          sni: myservice.domain.local
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: direct-myservice-through-egress-gateway
  namespace: mynamespace
spec:
  hosts:
  - myservice.domain.local
  gateways:
  - istio-egressgateway-myservice
  - mesh
  http:
  - match:
    - gateways:
      - mesh
      port: 80
    route:
    - destination:
        host: istio-egressgateway.istio-system.svc.cluster.local
        subset: myservice
        port:
          number: 80
      weight: 100
  - match:
    - gateways:
      - istio-egressgateway-myservice
      port: 80
    route:
    - destination:
        host: myservice.domain.local
        port:
          number: 443
      weight: 100
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: originate-tls-for-myservice
  namespace: mynamespace
spec:
  host: myservice.domain.local
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    portLevelSettings:
    - port:
        number: 443
      tls:
        mode: SIMPLE 
        caCertificates: /etc/certs/myrootcert.pem
",,,,,,,,,,,,,,
Cors preflight does not work when Jwt Policy targets the Istio Ingress Gateway - Security - Discuss Istio,">TOKEN=$(curl https://raw.githubusercontent.com/istio/istio/release-1.2/security/tools/jwt/samples/demo.jwt -s)
>curl --head -X OPTIONS -s $INGRESS_URL -H 'Host: httpbinext.foo.svc.cluster.local' -H 'Access-Control-Request-Method: GET' -H 'Access-Control-Request-Headers: Content-Type, Accept' -H 'Origin: example.com' -H ""Authorization: Bearer $TOKEN""
HTTP/1.1 401 Unauthorized
content-length: 29
content-type: text/plain
date: Thu, 08 Aug 2019 12:00:28 GMT
server: istio-envoy
 >cat <<EOF | kubectl apply -n istio-system -f -
apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: ""jwt-ingress""
spec:
  targets:
  - name: istio-ingressgateway    
  origins:
  - jwt:
      issuer: ""testing@secure.istio.io""
      jwksUri: ""https://raw.githubusercontent.com/istio/istio/release-1.2/security/tools/jwt/samples/jwks.json""
  principalBinding: USE_ORIGIN
EOF
 >kubectl apply -f - <<EOF
apiVersion: v1                                
kind: Service
metadata:
  name: httpbinext
  namespace: foo
spec:
  externalName: httpbin.org
  ports:
  - name: http-httpbinext
    port: 80                           
    protocol: TCP                                                                                              
    targetPort: 80
  sessionAffinity: None
  type: ExternalName
EOF
 >kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: httpbinext-gateway
  namespace: foo        
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:                        
      number: 80                                                                                               
      name: http
      protocol: HTTP
    hosts:
    - ""httpbinext.foo.svc.cluster.local""
EOF
 >kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: httpbinext
  namespace: foo
spec:
  hosts:
  - httpbinext.foo.svc.cluster.local
  gateways:
  - mesh                               
  - httpbinext-gateway                                                                                         
  http:                       
  - route:
    - destination:
        host: httpbinext
    corsPolicy:
      allowOrigin:
      - 'example.com'
      allowMethods:
      - POST
      - GET
      - OPTIONS
      allowCredentials: false
      allowHeaders:
      - X-Foo-Bar
      - X-Bar-Foo
      maxAge: ""24h""
EOF
",,,,,
Default SSL on Ingress Gateway - Security - Discuss Istio,,,"tls:
  mode: SIMPLE
  privateKey: /etc/istio/ingressgateway-certs/tls.key
  serverCertificate: /etc/istio/ingressgateway-certs/tls.crt
 tls:
  mode: SIMPLE
  credentialName: bookinfo-secret # fetches certs from Kubernetes secret
",,,,,,,,"  volumes:
  - name: ingressgatewaysdsudspath
    emptyDir: {}
     - name: ingress-sds
      image: ""gcr.io/istio-release/node-agent-k8s:master-latest-daily""
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          cpu: 2000m
          memory: 1024Mi
        requests:
          cpu: 100m
          memory: 128Mi

      env:
      - name: ""ENABLE_WORKLOAD_SDS""
        value: ""false""
      - name: ""ENABLE_INGRESS_GATEWAY_SDS""
        value: ""true""
      - name: ""INGRESS_GATEWAY_NAMESPACE""
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      volumeMounts:
      - name: ingressgatewaysdsudspath
        mountPath: /var/run/ingress_gateway
     env:
    - name: ISTIO_META_USER_SDS
      value: ""true""","2019-08-20T11:16:49.911937Z	info	ControlZ available at 127.0.0.1:9876
2019-08-20T11:16:49.967279Z	warn	secretFetcherLog	failed load server cert/key pair from secret kiali: server cert or private key is empty
2019-08-20T11:16:50.017989Z	info	sdsServiceLog	SDS gRPC server for ingress gateway controller starts, listening on ""/var/run/ingress_gateway/sds""

2019-08-20T11:16:50.018296Z	info	sdsServiceLog	Start SDS grpc server for ingress gateway proxy
2019-08-20T11:16:50.018378Z	info	citadel agent monitor has started.
2019-08-20T11:16:50.019235Z	info	monitor	Monitor server started.
",
EnvoyFilter for ext-authz - Security - Discuss Istio,"apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: ext-authz
spec:
  filters:
  - insertPosition:
      index: FIRST
    listenerMatch:
      listenerType: SIDECAR_INBOUND
      listenerProtocol: HTTP
    filterType: HTTP
    filterName: ""envoy.ext_authz""
    filterConfig:
      grpc_service:
        envoy_grpc:
          cluster_name: auth
      failure_mode_allow: false
  - insertPosition:
      index: FIRST
    listenerMatch:
      listenerType: SIDECAR_INBOUND
      listenerProtocol: TCP
    filterType: NETWORK
    filterName: ""envoy.ext_authz""
    filterConfig:
      grpc_service:
        envoy_grpc:
          cluster_name: auth
      failure_mode_allow: false
 cluster_name: ""outbound|8448||auth.default.svc.cluster.local""
","[external/envoy/source/common/config/grpc_mux_subscription_impl.cc:73] gRPC config for type.googleapis.com/envoy.api.v2.Listener rejected:
Error adding/updating listener(s) 0.0.0.0_31400: Unable to parse JSON as proto (INVALID_ARGUMENT:grpc_service:
Proto field is not repeating, cannot start list.):
{""failure_mode_allow"":false,""grpc_service"":[{""envoy_grpc"":{""cluster_name"":""outbound|8448||auth.default.svc.cluster.local""}}]}
",,,,
VirtualService always returns 403 - Security - Discuss Istio,"# Sets up de deployment definition
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: postauth
  name: postauth
  # for now we use a specific dev namespace
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postauth
  template:
    metadata:
      labels:
        app: postauth
    spec:
      containers:
        - name: postauth
          image: local/postauth:v1
          ports:
            - containerPort: 8080
          env:
            # env variables, these we get from a configmap
            - name: DEV_DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: url
            - name: DEV_POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: user
            # and this from a secret
            - name: DEV_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-password
                  key: password
          # this checks if the service is STILL running
          livenessProbe:
            httpGet:
              port: 8080
              path: /actuator/health
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 2
          # this checks if the service can be exposed
          readinessProbe:
            httpGet:
              port: 8080
              path: /actuator/health
            initialDelaySeconds: 10
            periodSeconds: 3
---
# Sets up the service
apiVersion: v1
kind: Service
metadata:
  name: postauth
  namespace: dev
  labels:
    app: postauth
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
  selector:
    app: postauth
   ---
   apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: dev-virtual-service
  namespace: dev
spec:
  hosts:
    - ""*""
  gateways:
    - http-gateway
  http:
    - route:
        - destination:
            port:
              number: 8080
            host: postauth.dev.svc.cluster.local
 Whitelabel Error Page

This application has no explicit mapping for /error, so you are seeing this as a fallback.
Wed Sep 25 10:14:46 GMT 2019
There was an unexpected error (type=Forbidden, status=403).
Access Denied
"
Ingress Gateway SDS not working with local build of 1.2.5 - Security - Discuss Istio,"apiVersion: apps/v1
kind: Deployment
metadata:
  name: istio-ingressgateway
  namespace: istio-system
  labels:
    chart: gateways
    heritage: Tiller
    release: istio
    app: istio-ingressgateway
    istio: ingressgateway
spec:
  progressDeadlineSeconds: 900
  replicas: 3
  selector:
    matchLabels:
      app: istio-ingressgateway
      istio: ingressgateway
  template:
    metadata:
      labels:
        chart: gateways
        heritage: Tiller
        release: istio
        app: istio-ingressgateway
        istio: ingressgateway
      annotations:
        sidecar.istio.io/inject: ""false""
        scheduler.alpha.kubernetes.io/critical-pod: """"
    spec:
      serviceAccountName: istio-ingressgateway-service-account
      containers:
        - name: ingress-sds
          image: ""myregistry/istio/node-agent-k8s:1.2.5-253""
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 2000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 128Mi
            
          env:
          - name: ""ENABLE_WORKLOAD_SDS""
            value: ""false""
          - name: ""ENABLE_INGRESS_GATEWAY_SDS""
            value: ""true""
          - name: ""INGRESS_GATEWAY_NAMESPACE""
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          volumeMounts:
          - name: ingressgatewaysdsudspath
            mountPath: /var/run/ingress_gateway
        - name: istio-proxy
          image: ""myregistry/istio/proxyv2:1.2.5-253""
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
            - containerPort: 443
            - containerPort: 15020
            - containerPort: 15090
              protocol: TCP
              name: http-envoy-prom
          args:
          - proxy
          - router
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --log_output_level=default:info
          - --drainDuration
          - '45s' #drainDuration
          - --parentShutdownDuration
          - '1m0s' #parentShutdownDuration
          - --connectTimeout
          - '10s' #connectTimeout
          - --serviceCluster
          - istio-ingressgateway
          - --zipkinAddress
          - zipkin:9411
          - --proxyAdminPort
          - ""15000""
          - --statusPort
          - ""15020""
          - --controlPlaneAuthPolicy
          - NONE
          - --discoveryAddress
          - istio-pilot:15010
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15020
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 2000m
              memory: 2Gi
            requests:
              cpu: 2000m
              memory: 2Gi
            
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: ISTIO_META_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: ISTIO_META_CONFIG_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: ISTIO_META_USER_SDS
            value: ""true""
          - name: ISTIO_META_ROUTER_MODE
            value: sni-dnat
          volumeMounts:
          - name: sdsudspath
            mountPath: /var/run/sds
            readOnly: true
          - name: ingressgatewaysdsudspath
            mountPath: /var/run/ingress_gateway
          - name: istio-certs
            mountPath: /etc/certs
            readOnly: true
          - name: ingressgateway-certs
            mountPath: ""/etc/istio/ingressgateway-certs""
            readOnly: true
          - name: ingressgateway-ca-certs
            mountPath: ""/etc/istio/ingressgateway-ca-certs""
            readOnly: true
      volumes:
      - name: ingressgatewaysdsudspath
        emptyDir: {}
      - name: sdsudspath
        hostPath:
          path: /var/run/sds
      - name: istio-certs
        secret:
          secretName: istio.istio-ingressgateway-service-account
          optional: true
      - name: ingressgateway-certs
        secret:
          secretName: ""istio-ingressgateway-certs""
          optional: true
      - name: ingressgateway-ca-certs
        secret:
          secretName: ""istio-ingressgateway-ca-certs""
          optional: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: istio
                  operator: In
                  values:
                  - ingressgateway
              topologyKey: kubernetes.io/hostname
            weight: 100
           
      nodeSelector:
        affinity: ingress
        
      securityContext:
        sysctls:
        - name: net.ipv4.ip_unprivileged_port_start
          value: ""80""
 ARG ISTIO_VERSION
FROM myregistryistio-package/istiobuilder:${ISTIO_VERSION} as builder

ARG ARTIFACTORY_USER
ARG ARTIFACTORY_PW
USER root

ENV REQUIRED='git build-essential g++-7 gcc-7 cmake jq \
    pkg-config zip zlib1g-dev unzip python \
    openjdk-8-jdk ninja-build curl vim libgomp1\
    autoconf autogen libtool ca-certificates'

RUN apt-get update --fix-missing && \
    apt-get install -y ${REQUIRED} && \
    rm -rf /var/lib/apt/lists/*
RUN cd /usr/local/ && curl -f -s -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PW} ""https://artifactory.my.com/artifactory/developer-tools/go/1.12.5/go1.12.5.linux-amd64.tar.gz"" | tar -xz
ENV PATH=/usr/local/go/bin:$PATH
ENV BAZEL_VERSION=0.26.1
ENV BAZEL_BIN=bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh


RUN curl -Lfs https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/${BAZEL_BIN} -o /tmp/${BAZEL_BIN} && \
    chmod +x /tmp/${BAZEL_BIN} && \
    /tmp/${BAZEL_BIN} && \
    rm -f /tmp/${BAZEL_BIN}

USER myuser

ENV GOPATH=/home/myuser/go
ENV PROXY_BUILD=/home/myuser/proxybuild
ENV ARTIFACTS_LOG=/home/myuser/artifacts.txt
ENV PROXY_FOLDER=istio-proxy

RUN export CC=/usr/bin/gcc && \
    export CXX=/usr/bin/g++ && \ 
    mkdir -p ${GOPATH}/src/github.com/istio && \
    cd ${GOPATH}/src/github.com/istio && \
    git clone https://github.com/istio/proxy.git ${PROXY_FOLDER} && \
    cd ${PROXY_FOLDER} && \
    export PROXY_VERSION=`cat /home/myuser/go/src/istio.io/istio/istio.deps | jq -r '.[]|select(.name==""PROXY_REPO_SHA"")|.lastStableSHA'` && \
    git checkout ${PROXY_VERSION} && \
    ln -s $(pwd) ${PROXY_BUILD} && \
    echo ""ISTIO-VERSION: ${ISTIO_VERSION}"" > ${ARTIFACTS_LOG} && \
    echo ""ISTIO-PROXY-SHA: ${PROXY_VERSION}"" >> ${ARTIFACTS_LOG} && \
    export ENVOY_SHA=`cat /home/myuser/go/src/github.com/istio/${PROXY_FOLDER}/istio.deps|jq -r '.[]|select(.name==""ENVOY_SHA"")|.lastStableSHA'` && \
    echo ""ENVOY-SHA: ${ENVOY_SHA}"" >> ${ARTIFACTS_LOG} && \
    cd ${GOPATH}/src/github.com/istio/istio-proxy && make BAZEL_BUILD_ARGS=""""  build && \
    cp ${GOPATH}/src/github.com/istio/istio-proxy/tools/deb/envoy.json ${PROXY_BUILD}

USER root

RUN groupadd --gid 10001 istio-user && useradd --gid 10001 --uid 10001 istio-user && \
    mkdir -p ${PROXY_BUILD}/var/lib/istio/envoy && \
    mkdir -p ${PROXY_BUILD}/var/lib/istio/proxy && \
    mkdir -p ${PROXY_BUILD}/var/lib/istio/config && \
    mkdir -p ${PROXY_BUILD}/var/log/istio && \
    chown -R 10001.10001 ${PROXY_BUILD}/var/lib/istio && \
    chown -R 10001.10001 ${PROXY_BUILD}/var/log/istio && \
    mkdir -p ${PROXY_BUILD}/etc/istio/proxy && \
    mkdir -p ${PROXY_BUILD}/usr/local/bin && \
    mkdir -p ${PROXY_BUILD}/lib/x86_64-linux-gnu/ && \
    mkdir -p ${PROXY_BUILD}/usr/lib/x86_64-linux-gnu/ && \
    mkdir -p ${PROXY_BUILD}/var/log/istio && \
    mkdir -p ${PROXY_BUILD}/var/run/sds && mkdir -p /var/run/ingress_gateway && \
    bash -c 'cp /lib/x86_64-linux-gnu/{libc.so.6,libm.so.6,libpthread.so.0,libdl.so.2,librt.so.1} ${PROXY_BUILD}/lib/x86_64-linux-gnu/' && \
    bash -c 'cp -r /usr/lib/x86_64-linux-gnu/{libstdc++.so*,libssl.so.1.1,libcrypto.so.1.1,gconv,libgomp.so.1*} ${PROXY_BUILD}/usr/lib/x86_64-linux-gnu/' && \
    cp /home/myuser/go/out/linux_amd64/release/pilot-agent ${PROXY_BUILD}/usr/local/bin && \
    cp ${PROXY_BUILD}/bazel-out/k8-fastbuild/bin/src/envoy/envoy ${PROXY_BUILD}/usr/local/bin && \
    cp /home/myuser/go/src/istio.io/istio/tools/packaging/common/istio-iptables.sh ${PROXY_BUILD}/usr/local/bin && \
    cp /home/myuser/go/src/istio.io/istio/tools/packaging/common/envoy_bootstrap_v2.json ${PROXY_BUILD}/var/lib/istio/envoy/envoy_bootstrap_tmpl.json && \
    cp /home/myuser/go/src/istio.io/istio/tools/packaging/common/sidecar.env ${PROXY_BUILD}/var/lib/istio/envoy/ && \
    cp /home/myuser/go/src/istio.io/istio/tools/packaging/common/envoy_bootstrap_drain.json ${PROXY_BUILD}/var/lib/istio/envoy/envoy_bootstrap_drain.json && \
    echo ""istio-user:10001:10001:istio-user:/var/lib/istio"" > ${PROXY_BUILD}/etc/passwd && \
    cp ${GOPATH}/src/istio.io/istio/pilot/docker/*.yaml.tmpl  ${PROXY_BUILD}/etc/istio/proxy  && \
    mkdir -p /home/myuser/etc/ssl/certs/ && \
    for cert in $(find /usr/share/ca-certificates -type f | sort); do cat ""$cert"" >> /home/myuser/etc/ssl/certs/ca-certificates.crt;done && \
    tar -czf ${PROXY_BUILD}/ca-certificates.tgz --owner=0 --group=0 /home/myuser/etc/ssl/certs/ca-certificates.crt

FROM docker.io/istio/proxyv2:1.2.5 as upstream

FROM scratch
LABEL Maintainer=""me<my@my.com>""

ENV PROXY_BUILD=/home/myuser/proxybuild


COPY --from=builder /home/myuser/artifacts.txt /artifacts.txt
COPY --from=builder --chown=10001:10001 ${PROXY_BUILD} /
COPY --from=builder /lib64/ld-linux-x86-64.so.2 /lib64/ld-linux-x86-64.so.2
COPY --from=upstream /usr/local/bin/pilot-agent  /usr/local/bin/pilot-agent
USER istio-user

ENTRYPOINT [""/usr/local/bin/pilot-agent""]
",,
End-user JWT authentication bypassing authentication - Security - Discuss Istio,"kind: Policy
apiVersion: authentication.istio.io/v1alpha1
metadata:
  name: ""auth-policy""
spec:
  targets:
    - name: coreservice
  origins:
    - jwt:
        issuer: $ISSUER_ACCOUNT
        jwksUri: $JWKSURI
  principalBinding: USE_ORIGIN
",
Upstream connect error when mtls is enabled at namespace level - Security - Discuss Istio,"~ $kubectl get namespace -L istio-injection
NAME              STATUS        AGE     ISTIO-INJECTION
cert-manager      Active        23h     
default           Active        30d     
istio-system      Active        7d16h   
kube-public       Active        30d     
kube-system       Active        30d     
microservices     Active        4d22h   enabled
 
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: giftshopapi-v2
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: giftshopapi
        tier: backend
        version: v2
    spec:
      containers:
      - name: giftshopapi
        image: myacr.azurecr.io/giftshop/sreeni-giftshopapi:1.0
        imagePullPolicy: Always
        resources:
          limits:
            memory: ""128Mi""
            cpu: ""500m""
        ports:
        - containerPort: 80
      imagePullSecrets:
        - name:  myacrsecret
---
apiVersion: v1
kind: Service
metadata:
  name: giftshopapi
spec:
  selector:
    app: giftshopapi
  ports:
  - port: 80
    name: http-giftshopapi  

 
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: giftshopui-v6
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: giftshopui
        tier: frontend
        version: v6
    spec:
      containers:
      - name: giftshopui
        image: myacr.azurecr.io/giftshop/sreeni-giftshopui:1.0
        imagePullPolicy: Always
        resources:
          limits:
            memory: ""128Mi""
            cpu: ""500m""
        ports:
        - containerPort: 80
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: ""Development""
        - name: ExternalDependencies_GiftShopAPI_BaseUrl
          valueFrom:
            configMapKeyRef:
              name: giftshopui-config
              key: GiftShopAPIBaseUrl
      imagePullSecrets:
        - name:  myacrsecret
---
apiVersion: v1
kind: Service
metadata:
  name: giftshopui
spec:
  selector:
    app: giftshopui
  ports:
  - port: 80
    name: http-giftshopui 

 
apiVersion: v1
kind: ConfigMap
metadata:
  name: giftshopui-config
data:
  GiftShopAPIBaseUrl: http://giftshopapi.microservices.svc.cluster.local/ 

 
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: demo-ingress-gateway
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - giftshopapi.<my-godaddy-domain-name>.com
    - giftshopui.<my-godaddy-domain-name>.com
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: giftshopapi
spec:
  hosts:
  - giftshopapi.<my-godaddy-domain-name>.com
  gateways:
  - demo-ingress-gateway
  http:
  - match:
    - uri:
        prefix: /swagger
    - uri:
        prefix: /api
    route:
    - destination:
        host: giftshopapi.microservices.svc.cluster.local
        port:
          number: 80
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: giftshopui
spec:
  hosts:
  - giftshopui.<my-godaddy-domain-name>.com
  gateways:
  - demo-ingress-gateway
  http:
  - route:
    - destination:
        host: giftshopui.microservices.svc.cluster.local
        port:
          number: 80

 
~ $istioctl authn tls-check giftshopui-v6-66fbd6b784-qcb6s.microservices giftshopapi.microservices.svc.cluster.local
HOST:PORT                                          STATUS     SERVER         CLIENT     AUTHN POLICY     DESTINATION RULE
giftshopapi.microservices.svc.cluster.local:80     OK         PERMISSIVE     -          /default         -
~ $istioctl authn tls-check giftshopapi-v2-6ddd8b6668-gst48.microservices giftshopui.microservices.svc.cluster.local
HOST:PORT                                         STATUS     SERVER         CLIENT     AUTHN POLICY     DESTINATION RULE
giftshopui.microservices.svc.cluster.local:80     OK         PERMISSIVE     -          /default         -

 
apiVersion: ""networking.istio.io/v1alpha3""
kind: ""DestinationRule""
metadata:
  name: ""enable-mtls""
  namespace: ""microservices""
spec:
  host: ""*.microservices.svc.cluster.local""
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL

 
apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: ""default""
  namespace: ""microservices""
spec:
  peers:
  - mtls: {}

 
~ $istioctl authn tls-check giftshopui-v6-66fbd6b784-qcb6s.microservices giftshopapi.microservices.svc.cluster.local
HOST:PORT                                          STATUS     SERVER     CLIENT           AUTHN POLICY              DESTINATION RULE
giftshopapi.microservices.svc.cluster.local:80     OK         STRICT     ISTIO_MUTUAL     microservices/default     microservices/enable-mtls
~ $istioctl authn tls-check giftshopapi-v2-6ddd8b6668-gst48.microservices giftshopui.microservices.svc.cluster.local
HOST:PORT                                         STATUS     SERVER     CLIENT           AUTHN POLICY              DESTINATION RULE
giftshopui.microservices.svc.cluster.local:80     OK         STRICT     ISTIO_MUTUAL     microservices/default     microservices/enable-mtls

 
istio-1.3.3 $kubectl exec giftshopui-v6-66fbd6b784-qcb6s -c istio-proxy -- ls /etc/certs

cert-chain.pem
key.pem
root-cert.pem

istio-1.3.3 $kubectl get pods

NAME                              READY   STATUS    RESTARTS   AGE
giftshopapi-v2-6ddd8b6668-gst48   2/2     Running   0          3h
giftshopui-v6-66fbd6b784-qcb6s    2/2     Running   0          3h

istio-1.3.3 $kubectl exec giftshopapi-v2-6ddd8b6668-gst48 -c istio-proxy -- ls /etc/certs

cert-chain.pem
key.pem
root-cert.pem

 
istio-1.3.3 $kubectl exec giftshopui-v6-66fbd6b784-qcb6s -c istio-proxy -- cat /etc/certs/cert-chain.pem | openssl x509 -text -noout  | grep Validity -A 2
        Validity
            Not Before: Oct 13 15:29:15 2019 GMT
            Not After : Jan 11 15:29:15 2020 GMT
istio-1.3.3 $kubectl exec giftshopapi-v2-6ddd8b6668-gst48 -c istio-proxy -- cat /etc/certs/cert-chain.pem | openssl x509 -text -noout  | grep Validity -A 2
        Validity
            Not Before: Oct 13 15:29:15 2019 GMT
            Not After : Jan 11 15:29:15 2020 GMT

",,"
~ $kubectl get gateways --all-namespaces
NAMESPACE       NAME                   AGE
microservices   demo-ingress-gateway   1d

",,"
$ istioctl authn tls-check $CLIENT_POD httpbin.default.svc.cluster.local
HOST:PORT                                  STATUS     SERVER     CLIENT     AUTHN POLICY        DESTINATION RULE
httpbin.default.svc.cluster.local:8000     OK         mTLS       mTLS       default/            default/istio-system

 
~ $istioctl authn tls-check giftshopui-v6-66fbd6b784-qcb6s.microservices giftshopapi.microservices.svc.cluster.local
HOST:PORT                                          STATUS     SERVER     CLIENT           AUTHN POLICY              DESTINATION RULE
giftshopapi.microservices.svc.cluster.local:80     OK         STRICT     ISTIO_MUTUAL     microservices/default     microservices/enable-mtls
~ $istioctl authn tls-check giftshopapi-v2-6ddd8b6668-gst48.microservices giftshopui.microservices.svc.cluster.local
HOST:PORT                                         STATUS     SERVER     CLIENT           AUTHN POLICY              DESTINATION RULE
giftshopui.microservices.svc.cluster.local:80     OK         STRICT     ISTIO_MUTUAL     microservices/default     microservices/enable-mtls


"
EnvoyFilter - ext_authz for istio 1.3 - Security - Discuss Istio,"kind: EnvoyFilter
metadata:
  name: edge-lua-filter
spec:
  workloadLabels:
    app: istio-ingressgateway
  filters:
- listenerMatch:
      listenerType: ANY
    filterName: envoy.ext_authz
    filterType: HTTP
    filterConfig:
      http_service:
        server_uri:
          uri: http://authorization-svc.default.svc.cluster.local:8080
          cluster: outbound|8080||authorization-svc.default.svc.cluster.local
          timeout: 5s
        path_prefix: /authorization/validate
        authorizationRequest:
          allowedHeaders:
            patterns:
            - exact: ""cookie""
        authorizationResponse:
          allowed_upstream_headers:
            patterns:
            - exact: ""User-Id""
 kind: EnvoyFilter
metadata:
  name: ext-auth
  namespace: default
spec:
  workloadSelector:
    labels:
      app: istio-ingressgateway
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: ""envoy.http_connection_manager""
            subFilter:
              name: ""envoy.ext_authz""
    patch:
      operation: INSERT_BEFORE
      value:
        config:
          http_service:
            server_uri:
              uri: http://authorization-svc.default.svc.cluster.local:8080
              cluster: outbound|8080||authorization-svc.default.svc.cluster.local
              timeout: 5s
            path_prefix: /authorization/validate
            authorizationRequest:
            allowedHeaders:
              patterns:
              - exact: ""cookie""
            authorizationResponse:
              allowed_upstream_headers:
              patterns:
              - exact: ""User-Id""
","apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: ext-authz
spec:
  workloadSelector:
    labels:
      app: authdebug-server
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
#          portNumber: 15090
          filterChain:
            filter:
              name: ""envoy.http_connection_manager""
              subFilter:
                name: ""envoy.router""
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.ext_authz #FILTER NAME
          config:
             http_service:
               failure_mode_allow: false
               path_prefix: /decisions
               server_uri:
                 uri: http://oathkeeper-api.default.svc.cluster.local:4456
                 cluster: outbound|4456||oathkeeper-api.default.svc.cluster.local
                 timeout: 5s
"
Access istio/k8s service via HTTPS - Security - Discuss Istio,"kubectl create secret generic clouddns --namespace=cert-manager --from-literal=GCP_PROJECT=<PROJECT> --from-file=/etc/keys/<KEY>.json
 apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: messaging-gateway
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - ""<HOST>""
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - ""<HOST>""
    tls:
      credentialName: messaging-certificate
      mode: SIMPLE
      privateKey: sds
      serverCertificate: sds
 apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: messaging
spec:
  hosts:
  - ""<HOST>""
  gateways:
  - messaging-gateway
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: messaging
        port:
          number: 8082
 apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: messaging-cluster-issuer
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: <EMAIL>
    privateKeySecretRef:
      name: messaging-letsencrypt
    solvers:
    - dns01:
        clouddns:
          serviceAccountSecretRef:
            name: clouddns
            key: <KEY>.json
          project: <PROJECT>
 apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: messaging-certificate
spec:
  secretName: messaging-certificate
  duration: 2160h # 90d
  renewBefore: 360h # 15d
  organization:
  - RELE.AI
  commonName: <HOST>
  isCA: false
  keySize: 2048
  keyAlgorithm: rsa
  keyEncoding: pkcs1
  usages:
    - server auth
    - client auth
  dnsNames:
  - <HOST>
  issuerRef:
    name: messaging-cluster-issuer
    kind: ClusterIssuer
"
JWT authentication on specific method - Security - Discuss Istio,,"apiVersion: authentication.istio.io/v1alpha1                                  
kind: Policy                                                                  
metadata:                                                                       
  name: jwt
  namespace: <your-service-namespace>
spec:
  targets:
    - name: <your-service-name>
  originIsOptional: true
  origins:
    - jwt:
        <omitted>                                     
  principalBinding: USE_ORIGIN
 apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: authz
 namespace: your-service-namespace
spec:
 selector:
   matchLabels:
     <your-service-workload-labels>
 rules:
 - to:
   - operation:
       methods: [""GET""]
       paths: [""/v1beta1/stores""]
   when:
   - key: request.auth.principal
     values: [""*""] // requires any valid JWT token
 - to:
   - operation:
       methods: [""POST""] // For POST, do not require JWT token
       paths: [""/v1beta1/stores""] 
"
How to tell pilot to fetch JWKS certs using mTLS? - Security - Discuss Istio,"apiVersion: authentication.istio.io/v1alpha1
kind: Policy
metadata:
  name: keycloak-jwt-policy
  namespace: public
spec:
  peers:
  - mtls:
      mode: STRICT
  targets:
  - name: keycloak
    ports:
    - containerPort: 8080
      name: http
 apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: default
  namespace: istio-system
spec:
  host: '*.local'
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
",,,
Istio Authorization with Internal Service - Security - Discuss Istio,,,,,,,,,"---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: service
spec:
  workloadSelector:
    labels:
      app: service
  configPatches: 
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: ""envoy.http_connection_manager""
              subFilter:
                name: ""envoy.router""
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.ext_authz
          config:
             http_service:
              authorizationRequest:
                allowedHeaders:
                  patterns:
                  - exact: authorization
                  - exact: cookie
                  - exact: x-envoy-external-address
                  - exact: x-forwarded-for
              authorizationResponse:
                allowedClientHeaders:
                  patterns:
                  - exact: authorization
                  - exact: location
                  - exact: proxy-authenticate
                  - exact: set-cookie
                  - exact: www-authenticate
                allowedUpstreamHeaders:
                  patterns:
                  - exact: authorization
                  - exact: location
                  - exact: proxy-authenticate
                  - exact: set-cookie
                  - exact: www-authenticate          
              path_prefix: /authroute
              server_uri:
                uri: http://auth.ns.svc.cluster.local:1234
                cluster: outbound|1234||auth.ns.svc.cluster.local
                timeout: 1s",,,"apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: service
spec:
  workloadSelector:
    labels:
      app: service
  configPatches: 
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: ""envoy.http_connection_manager""
              subFilter:
                name: ""envoy.router""
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.ext_authz
          config:
             http_service:
              authorizationRequest:
                allowedHeaders:
                  patterns:
                  - exact: authorization
                  - exact: cookie
                  - exact: x-envoy-external-address
                  - exact: x-forwarded-for
              authorizationResponse:
                allowedClientHeaders:
                  patterns:
                  - exact: authorization
                  - exact: location
                  - exact: proxy-authenticate
                  - exact: set-cookie
                  - exact: www-authenticate
                allowedUpstreamHeaders:
                  patterns:
                  - exact: authorization
                  - exact: location
                  - exact: proxy-authenticate
                  - exact: set-cookie
                  - exact: www-authenticate          
              path_prefix: /authroute
              server_uri:
                uri: http://autenticacion-back-authservices.testing.svc.cluster.local:80
                cluster: outbound|80||autenticacion-back-authservices.testing.svc.cluster.local
                timeout: 1s",,,"apiVersion: networking.istio.io/v1alpha3
    kind: EnvoyFilter
    metadata:
      name: service
      namespace: testing
    spec:
      workloadSelector:
        labels:
          app: back-test #this is other service
      configPatches: 
        - applyTo: HTTP_FILTER
          match:
            context: SIDECAR_INBOUND
            listener:
              filterChain:
                filter:
                  name: ""envoy.http_connection_manager""
                  subFilter:
                    name: ""envoy.router""
          patch:
            operation: INSERT_BEFORE
            value:
              name: envoy.ext_authz
              config:
                 http_service:
                  authorizationRequest:
                    allowedHeaders:
                      patterns:
                      - exact: authorization
                      - exact: cookie
                      - exact: x-envoy-external-address
                      - exact: x-forwarded-for
                  authorizationResponse:
                    allowedClientHeaders:
                      patterns:
                      - exact: authorization
                      - exact: location
                      - exact: proxy-authenticate
                      - exact: set-cookie
                      - exact: www-authenticate
                    allowedUpstreamHeaders:
                      patterns:
                      - exact: authorization
                      - exact: location
                      - exact: proxy-authenticate
                      - exact: set-cookie
                      - exact: www-authenticate          
                  path_prefix: /validate
                  server_uri:
                    uri: http://autenticacion-back-authservices.testing.svc.cluster.local:80
                    cluster: outbound|80||autenticacion-back-authservices.testing.svc.cluster.local
                    timeout: 1s",,,,,
End user authentication using JWT throws 401 unauthorized for few attempts before being successful - Security - Discuss Istio,"kind: Policy
apiVersion: authentication.istio.io/v1alpha1
metadata:
  name: k8s-auth-policy
  namespace: products
spec:
  targets:
    - name: products-svc
  origins:
    - jwt:
        issuer: 'https://sts.windows.net/<tenentid>/'
        jwksUri: >-
          https://login.microsoftonline.com/<tenentid>/discovery/v2.0/keys
        triggerRules:
          - excludedPaths:
              - prefix: /swagger/
",
Multiple Authenttication policies - Security - Discuss Istio,"apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: auth-policy1
  namespace: foo
spec:
  targets:
  - name: httpbin
  origins:
  - jwt:
      issuer: https://my.url.com
      jwksUri: https://my.url.com/.well-known/openid-configuration/jwks
      trigger_rules:
      - included_paths:
        - prefix: /v1/endpoint1
  peers:
  - mtls: {}
  principalBinding: USE_ORIGIN
 apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: auth-policy2
  namespace: foo
spec:
  targets:
  - name: httpbin
  origins:
  - jwt:
      issuer: https://my.url.com
      jwksUri: https://my.url.com/.well-known/openid-configuration/jwks
      trigger_rules:
      - included_paths:
        - prefix: /v1/endpoint2
  peers:
  - mtls: {}
  principalBinding: USE_ORIGIN
",,
Istio 1.5 JWT claim in AuthorizationPolicy - Security - Discuss Istio,"apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
 name: backend
 namespace: default
spec:
  selector:
    matchLabels:
      app: backend
  jwtRules:
  - issuer: ""${KEYCLOAK_URL}/auth/realms/istio""
    jwksUri: ""${KEYCLOAK_URL}/auth/realms/istio/protocol/openid-connect/certs""
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: backend
 namespace: default
spec:
 selector:
   matchLabels:
     app: backend
 action: ALLOW
 rules:
 - from:
   - source:
       requestPrincipals: [""*""]
   when:
    - key: request.auth.claims[preferred_username]
      values: [""testuser2""]
",,,"  selector:
      matchLabels:
         app: backend
  action: DENY
  rules:
    - when:
         key: request.auth.claims[preferred_username]
         notvalues: [“testuser2”]
","action: ALLOW
 rules:
 - from:
   - when:
      - key: request.auth.claims[preferred_username]
        values: [""testuser2""]
"," # Add a request authentication policy that requires end-user JWT
# if JWT not valid or expired = 401
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
 name: backend
 namespace: default
spec:
  selector:
    matchLabels:
      app: backend
  jwtRules:
  - issuer: ""${KEYCLOAK_URL}/auth/realms/istio""
    jwksUri: ""${KEYCLOAK_URL}/auth/realms/istio/protocol/openid-connect/certs""
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: backend
 namespace: default
spec:
 selector:
   matchLabels:
     app: backend
 action: DENY
 rules:
   - when:
     key: request.auth.claims[preferred_username]
     notvalues: [""testuser2""]
","apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: backend
 namespace: default
spec:
 selector:
   matchLabels:
     app: backend
 action: ALLOW
 rules:
 - from:
   when:
    - key: request.auth.claims[realm_access][roles]
      values: [""backendaccess""]
",,
Istio Multicluster Custom CA Issues - Security - Discuss Istio,"kubectl create secret generic cacerts -n istio-system --from-file=./ca-cert.pem \
--from-file=./ca-key.pem --from-file=./root-cert.pem \
--from-file=./cert-chain.pem
",,"[Envoy (Epoch 0)] [2020-04-07 14:22:26.538][30][critical][main] [external/envoy/source/exe/terminate_handler.cc:13] std::terminate called! (possible uncaught exception, see trace)
[Envoy (Epoch 0)] [2020-04-07 14:22:26.538][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:70] Backtrace (use tools/stack_decode.py to get line numbers):
[Envoy (Epoch 0)] [2020-04-07 14:22:26.538][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:71] Envoy version: 73f240a29bece92a8882a36893ccce07b4a54664/1.13.1-
dev/Clean/RELEASE/BoringSSL
[Envoy (Epoch 0)] [2020-04-07 14:22:26.550][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #0: Envoy::TerminateHandler::logOnTerminate()::$_0::operator()(
) [0x55b768630dae]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.564][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:77] #1: [0x55b768630cb9]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.576][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #2: std::__terminate() [0x55b768b93a73]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.586][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #3: Envoy::Tcp::TcpClusterRewrite::TcpClusterRewriteFilter::onNewConnection() [0x55b766d52c4d]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.596][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #4: Envoy::Network::FilterManagerImpl::onContinueReading() [0x55b768173582]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.608][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #5: Envoy::Network::FilterManagerImpl::initializeReadFilters() [0x55b7681734e5]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.619][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #6: Envoy::Server::ConnectionHandlerImpl::ActiveTcpListener::newConnection() [0x55b768163547]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.629][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #7: Envoy::Server::ConnectionHandlerImpl::ActiveTcpSocket::continueFilterChain() [0x55b7681631fb]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.641][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #8: Envoy::Server::ConnectionHandlerImpl::ActiveTcpListener::onAcceptWorker() [0x55b7681632f1]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.653][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #9: Envoy::Network::ListenerImpl::listenCallback() [0x55b768176d4c]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.665][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #10: listener_read_cb [0x55b76849d7c3]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.675][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #11: event_process_active_single_queue [0x55b76849b9ab]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.685][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #12: event_base_loop [0x55b76849a23e]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.695][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #13: Envoy::Server::WorkerImpl::threadRoutine() [0x55b768160278]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.705][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #14: Envoy::Thread::ThreadImplPosix::ThreadImplPosix()::$_0::__invoke() [0x55b768666953]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.705][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #15: start_thread [0x7f8415e306db]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.705][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:83] Caught Aborted, suspect faulting address 0x14
[Envoy (Epoch 0)] [2020-04-07 14:22:26.705][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:70] Backtrace (use tools/stack_decode.py to get line numbers):
[Envoy (Epoch 0)] [2020-04-07 14:22:26.705][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:71] Envoy version: 73f240a29bece92a8882a36893ccce07b4a54664/1.13.1-dev/Clean/RELEASE/BoringSSL
[Envoy (Epoch 0)] [2020-04-07 14:22:26.705][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #0: __restore_rt [0x7f8415e3b890]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.715][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:77] #1: [0x55b768630cb9]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.715][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #2: std::__terminate() [0x55b768b93a73]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.715][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #3: Envoy::Tcp::TcpClusterRewrite::TcpClusterRewriteFilter::onNewConnection() [0x55b766d52c4d]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.715][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #4: Envoy::Network::FilterManagerImpl::onContinueReading() [0x55b768173582]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.715][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #5: Envoy::Network::FilterManagerImpl::initializeReadFilters() [0x55b7681734e5]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.715][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #6: Envoy::Server::ConnectionHandlerImpl::ActiveTcpListener::newConnection() [0x55b768163547]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.715][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #7: Envoy::Server::ConnectionHandlerImpl::ActiveTcpSocket::continueFilterChain() [0x55b7681631fb]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.715][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #8: Envoy::Server::ConnectionHandlerImpl::ActiveTcpListener::onAcceptWorker() [0x55b7681632f1]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.715][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #9: Envoy::Network::ListenerImpl::listenCallback() [0x55b768176d4c]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.715][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #10: listener_read_cb [0x55b76849d7c3]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.715][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #11: event_process_active_single_queue [0x55b76849b9ab]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.715][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #12: event_base_loop [0x55b76849a23e]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.715][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #13: Envoy::Server::WorkerImpl::threadRoutine() [0x55b768160278]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.715][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #14: Envoy::Thread::ThreadImplPosix::ThreadImplPosix()::$_0::__invoke() [0x55b768666953]
[Envoy (Epoch 0)] [2020-04-07 14:22:26.715][30][critical][backtrace] [bazel-out/k8-opt/bin/external/envoy/source/server/_virtual_includes/backtrace_lib/server/backtrace.h:75] #15: start_thread [0x7f8415e306db]
2020-04-07T14:22:26.744655Z     error   Epoch 0 exited with error: signal: aborted (core dumped)
2020-04-07T14:22:26.744680Z     info    No more active epochs, terminating",,"gateways:
  enabled: true
  istio-ingressgateway:
    serviceAnnotations:
      service.beta.kubernetes.io/aws-load-balancer-type: ""nlb""
  istio-egressgateway:
    enabled: true
    env:
      # Needed to route traffic via egress gateway if desired.
      ISTIO_META_REQUESTED_NETWORK_VIEW: ""external""
security:
  enabled: true
  selfSigned: false
global:
  mtls:
    # Default setting for service-to-service mtls. Can be set explicitly using
    # destination rules or service annotations.
    enabled: true
    # If set to true, and a given service does not have a corresponding DestinationRule configured,
    # or its DestinationRule does not have TLSSettings specified, Istio configures client side
    # TLS configuration automatically, based on the server side mTLS authentication policy and the
    # availibity of sidecars.
    auto: true
  podDNSSearchNamespaces:
  - global
  - ""{{ valueOrDefault .DeploymentMeta.Namespace \""default\"" }}.global""
  meshExpansion:
    enabled: false
    # If set to true, the pilot and citadel mtls and the plaintext pilot ports
    # will be exposed on an internal gateway
    useILB: false
  multiCluster:
    # Set to true to connect two kubernetes clusters via their respective
    # ingressgateway services when pods in each cluster cannot directly
    # talk to one another. All clusters should be using Istio mTLS and must
    # have a shared root CA for this model to work.
    enabled: true

    # Should be set to the name of the cluster this installation will run in. This is required for sidecar injection
    # to properly label proxies
    clusterName: ${myCluster}
 .SUFFIXES: .csr .pem .conf
.PRECIOUS: %/ca-key.pem %/ca-cert.pem %/cert-chain.pem
.PRECIOUS: root-cert.csr root-ca.conf %/cluster-ca.csr %/intermediate.conf
.SECONDARY: root-cert.csr root-ca.conf %/cluster-ca.csr %/intermediate.conf

.DEFAULT_GOAL := help

#------------------------------------------------------------------------
# variables: root CA
ROOTCA_DAYS ?= 3650
ROOTCA_KEYSZ ?= 4096
ROOTCA_ORG ?= MyCompany
ROOTCA_CN ?= Root CA
# Additional variables are defined in root-ca.conf target below.

#------------------------------------------------------------------------
# variables: Intermediate CA
INT_SERIAL ?= $(shell echo $$RANDOM) 	# certificate serial number (uses current PID)
INT_DAYS ?= 3650
INT_KEYSZ ?= 4096
INT_ORG ?= MyCompany
INT_CN ?= Intermediate CA
INT_SAN_DNS ?= localhost
# Additional variables are defined in %/intermediate.conf target below.

#------------------------------------------------------------------------
# variables: intermediate CA (Istio)
ISTIO_SERIAL ?= $(shell echo $$RANDOM) 	# certificate serial number (uses current PID)
ISTIO_DAYS ?= 3650
ISTIO_KEYSZ ?= 4096
ISTIO_ORG ?= MyCompany
ISTIO_SAN_DNS ?= localhost
# Additional variables are defined in %/intermediate.conf target below.

#------------------------------------------------------------------------
##help:		print this help message
.PHONY: help

help: Makefile
  @sed -n 's/^##//p' $<

#------------------------------------------------------------------------
##root-ca:	generate root CA files (key and certifcate) in current directory
.PHONY: root-ca

root-ca: root-key.pem root-cert.pem

root-cert.pem: root-cert.csr root-key.pem
  @echo ""generating $@""
  @openssl x509 -req -days $(ROOTCA_DAYS) -signkey root-key.pem \
    -extensions req_ext -extfile root-ca.conf \
    -in $< -out $@

root-cert.csr: root-key.pem root-ca.conf
  @echo ""generating $@""
  @openssl req -new -key $< -config root-ca.conf -out $@ 

root-ca.conf: 
  @echo ""[ req ]"" > $@
  @echo ""encrypt_key = no"" >> $@
  @echo ""prompt = no"" >> $@
  @echo ""utf8 = yes"" >> $@
  @echo ""default_md = sha256"" >> $@
  @echo ""default_bits = $(ROOTCA_KEYSZ)"" >> $@
  @echo ""req_extensions = req_ext"" >> $@
  @echo ""x509_extensions = req_ext"" >> $@
  @echo ""distinguished_name = req_dn"" >> $@
  @echo ""[ req_ext ]"" >> $@
  @echo ""subjectKeyIdentifier = hash"" >> $@
  @echo ""basicConstraints = critical, CA:true"" >> $@
  @echo ""keyUsage = critical, digitalSignature, nonRepudiation, keyEncipherment, keyCertSign"" >> $@
  @echo ""[ req_dn ]"" >> $@
  @echo ""O = $(ROOTCA_ORG)"" >> $@
  @echo ""CN = $(ROOTCA_CN)"" >> $@

root-key.pem:
  @echo ""generating $@""
  @openssl genrsa -out $@ 4096

#------------------------------------------------------------------------
##intermediate-ca:	generate intermediate certificate authority. Includes all PEM files needed.
.PHONY: intermediate-ca

intermediate-ca: int/int-cert-chain.pem root-cert.pem
  @echo ""int inputs stored in $(dir $<)""
  @cp root-cert.pem $(dir $<)

int/int-cert-chain.pem: int/int-ca-cert.pem root-cert.pem
  @echo ""generating $@""
  @cat $^ > $@

int/int-ca-cert.pem: int/int-ca.csr root-key.pem root-cert.pem
  @echo ""generating $@""
  @openssl x509 -req -days $(INT_DAYS) \
    -CA root-cert.pem -CAkey root-key.pem -set_serial $(INT_SERIAL) \
    -extensions req_ext -extfile $(dir $<)/int-intermediate.conf \
    -in $< -out $@

int/int-ca.csr: L=$(dir $@)
int/int-ca.csr: int/int-ca-key.pem int/int-intermediate.conf
  @echo ""generating $@""
  @openssl req -new -config $(L)/int-intermediate.conf -key $< -out $@ 

int/int-ca-key.pem:
  @echo ""generating $@""
  @mkdir -p $(dir $@)
  @openssl genrsa -out $@ 4096

int/int-intermediate.conf: L=$(dir $@)
int/int-intermediate.conf:
  @echo ""[ req ]"" > $@
  @echo ""encrypt_key = no"" >> $@
  @echo ""prompt = no"" >> $@
  @echo ""utf8 = yes"" >> $@
  @echo ""default_md = sha256"" >> $@
  @echo ""default_bits = $(INT_KEYSZ)"" >> $@
  @echo ""req_extensions = req_ext"" >> $@
  @echo ""x509_extensions = req_ext"" >> $@
  @echo ""distinguished_name = req_dn"" >> $@
  @echo ""[ req_ext ]"" >> $@
  @echo ""subjectKeyIdentifier = hash"" >> $@
  @echo ""basicConstraints = critical, CA:true"" >> $@
  @echo ""keyUsage = critical, digitalSignature, nonRepudiation, keyEncipherment, keyCertSign"" >> $@
  @echo ""subjectAltName=@san"" >> $@
  @echo ""[ san ]"" >> $@
  @echo ""DNS.1 = $(INT_SAN_DNS)"" >> $@
  @echo ""[ req_dn ]"" >> $@
  @echo ""O = $(INT_ORG)"" >> $@
  @echo ""CN = $(INT_CN)"" >> $@
  @echo ""L = $(L:/=)"" >> $@

#------------------------------------------------------------------------
##<name>-certs:	generate Istio certificate authority for <name>. Includes all PEM files needed.
.PHONY: %-certs

%-certs: %/cert-chain.pem int/int-ca-cert.pem int/int-cert-chain.pem int/root-cert.pem
  @echo ""ISTIO inputs stored in $(dir $<)""
  @cp int/int-ca-cert.pem $(dir $<)
  @cp int/root-cert.pem $(dir $<)/root-cert.pem

%/cert-chain.pem: %/ca-cert.pem int/int-ca-cert.pem int/root-cert.pem
  @echo ""generating $@""
  @cat $^ > $@

%/ca-cert.pem: %/cluster-ca.csr int/int-ca-key.pem int/int-ca-cert.pem
  @echo ""generating $@""
  @openssl x509 -req -days $(ISTIO_DAYS) \
    -CA int/int-ca-cert.pem -CAkey int/int-ca-key.pem -set_serial $(ISTIO_SERIAL) \
    -extensions req_ext -extfile $(dir $<)/intermediate.conf \
    -in $< -out $@

%/cluster-ca.csr: L=$(dir $@)
%/cluster-ca.csr: %/ca-key.pem %/intermediate.conf
  @echo ""generating $@""
  @openssl req -new -config $(L)/intermediate.conf -key $< -out $@ 

%/ca-key.pem:
  @echo ""generating $@""
  @mkdir -p $(dir $@)
  @openssl genrsa -out $@ 4096

%/intermediate.conf: L=$*_eks_cluster
%/intermediate.conf:
  @echo ""[ req ]"" > $@
  @echo ""encrypt_key = no"" >> $@
  @echo ""prompt = no"" >> $@
  @echo ""utf8 = yes"" >> $@
  @echo ""default_md = sha256"" >> $@
  @echo ""default_bits = $(ISTIO_KEYSZ)"" >> $@
  @echo ""req_extensions = req_ext"" >> $@
  @echo ""x509_extensions = req_ext"" >> $@
  @echo ""distinguished_name = req_dn"" >> $@
  @echo ""[ req_ext ]"" >> $@
  @echo ""subjectKeyIdentifier = hash"" >> $@
  @echo ""basicConstraints = critical, CA:true"" >> $@
  @echo ""keyUsage = critical, digitalSignature, nonRepudiation, keyEncipherment, keyCertSign"" >> $@
  @echo ""subjectAltName=@san"" >> $@
  @echo ""[ san ]"" >> $@
  @echo ""URI.1 = spiffe://cluster.local/ns/istio-system/sa/citadel"" >> $@
  @echo ""URI.2 = spiffe://$(L:/=)/ns/istio-system/sa/citadel"" >> $@
  @echo ""URI.3 = spiffe://cluster.global/ns/istio-system/sa/citadel"" >> $@
  @echo ""DNS.1 = $(ISTIO_SAN_DNS)"" >> $@
  @echo ""[ req_dn ]"" >> $@
  @echo ""O = $(ISTIO_ORG)"" >> $@
  @echo ""CN = $*_eks_cluster Intermediate CA"" >> $@
  @echo ""L = $(L:/=)"" >> $@
 apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: details
spec:
  hosts:
  # must be of form name.namespace.global
  - details.default.global
  # Treat remote cluster services as part of the service mesh
  # as all clusters in the service mesh share the same root of trust.
  location: MESH_INTERNAL
  ports:
  - name: http
    number: 9080
    protocol: http
  resolution: DNS
  addresses:
  # the IP address to which httpbin.bar.global will resolve to
  # must be unique for each remote service, within a given cluster.
  # This address need not be routable. Traffic for this IP will be captured
  # by the sidecar and routed appropriately.
  - 240.0.1.4
  endpoints:
  # This is the routable address of the ingress gateway in cluster2 that
  # sits in front of sleep.foo service. Traffic from the sidecar will be
  # routed to this address.
  - address: ${DNS OF INGRESS CONTROLLER NLB}
    ports:
      http: 15443 # Do not change this port value
  EOF",,,,,
Questions about Gateways and Let's Encrypt - Security - Discuss Istio,"apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: myapp-gateway
  namespace: myapp
spec:
  servers:
    - port:
        number: 80
        name: http-myapp
        protocol: HTTP
      hosts:
        - myapp.company.com
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: myapp
  namespace: myapp
spec:
  hosts:
    - ""*""
  gateways:
    - production-gateway
  http:
    - match:
      - uri:
          prefix: /api
      route:
        - destination:
            host: backend
            port:
              number: 80
    - route:
        - destination:
            host: frontend
            port:
              number: 80
   --set values.gateways.istio-ingressgateway.sds.enabled=true \
  --set values.global.k8sIngress.enabled=true \
  --set values.global.k8sIngress.enableHttps=true \
  --set values.global.k8sIngress.gatewayName=ingressgateway
 [Envoy (Epoch 0)] [2020-04-19 03:28:38.123][19][warning][config] [external/envoy/source/common/config/grpc_subscription_impl.cc:87] gRPC config for type.googleapis.com/envoy.api.v2.Listener rejected: Error adding/updating listener(s) 0.0.0.0_443: Invalid path: /etc/istio/ingressgateway-certs/tls.crt
 apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: myapp-certificate
  namespace: istio-system
spec:
  secretName: myapp-tls
  issuerRef:
    name: letsencrypt-prod-istio
    kind: ClusterIssuer
  dnsNames:
    - myapp.company.com
 apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: myapp-gateway
  namespace: myapp
spec:
  servers:
    - port:
        number: 80
        name: http-myapp
        protocol: HTTP
      hosts:
        - myapp.company.com
      tls:
        httpsRedirect: true
    - port:
        number: 443
        name: https-myapp
        protocol: HTTPS
      hosts:
        - myapp.company.com
      tls:
        credentialName: myapp-tls
        mode: SIMPLE
        privateKey: sds
        serverCertificate: sds
 2020-04-19T04:34:14.808156Z	warn	secretfetcher	failed load server cert/key pair from secret myapp-tls: server cert or private key is empty
2020-04-19T04:34:18.409583Z	info	secretfetcher	scrtUpdated is called on kubernetes secret myapp-tls
2020-04-19T04:34:18.409632Z	warn	secretfetcher	failed load server cert/key pair from secret myapp-tls: server cert or private key is empty
 2020-04-19T04:36:39.395275Z	info	sds	node:router~100.106.199.214~istio-ingressgateway-85576dff98-qt7pz.istio-system~istio-system.svc.cluster.local-3 resource:myapp-tls new connection
2020-04-19T04:36:39.395578Z	info	sds	node:router~100.106.199.214~istio-ingressgateway-85576dff98-qt7pz.istio-system~istio-system.svc.cluster.local-3 resource:myapp-tls pushed key/cert pair to proxy
2020-04-19T04:36:39.395600Z	info	sds	node:router~100.106.199.214~istio-ingressgateway-85576dff98-qt7pz.istio-system~istio-system.svc.cluster.local-3 resource:myapp-tls pushed secret
",,,"apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: ingressgateway
  namespace: istio-system
  labels:
    release: istio
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
      - ""*""
    # Additional ports in gateaway for the ingressPorts - apps using dedicated port instead of hostname
 apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: a-gateway
  namespace: a
spec:
  servers:
    - port:
        number: 80
        name: http-a
        protocol: HTTP
      hosts:
        - a.com
      tls:
        httpsRedirect: true
    - port:
        number: 443
        name: https-a
        protocol: HTTPS
      hosts:
        - a.com
      tls:
        credentialName: a-com-tls
        mode: SIMPLE
        privateKey: sds
        serverCertificate: sds
 apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: b-gateway
  namespace: b
spec:
  servers:
    - port:
        number: 80
        name: http-b
        protocol: HTTP
      hosts:
        - b.com
      tls:
        httpsRedirect: true
    - port:
        number: 443
        name: https-b
        protocol: HTTPS
      hosts:
        - b.com
      tls:
        credentialName: b-com-tls
        mode: SIMPLE
        privateKey: sds
        serverCertificate: sds
",,,,,
Forward headers with EnvoyFilters - Security - Discuss Istio,"apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name:  httpbin-virtualservice
spec:
  hosts:
  - ""httpbin.example.com""
  gateways:
  - my-gateway
  http:      
  - route:
    - destination:
        host: httpbin
    headers:
      request:
        add:                  
          added: ""header""
        set:                  
          test: ""true""          
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: httpbin-destination
spec:
  host: httpbin
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL  
    loadBalancer:
      simple: ROUND_ROBIN
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: httpbin-lua-inbound
spec:
  workloadLabels:
    app: httpbin
  filters:
  - listenerMatch:
      listenerType: ANY
    insertPosition:
      index: FIRST
    filterName: envoy.lua
    filterType: HTTP
    filterConfig:    
      inlineCode: |
        local inbound_header
        function envoy_on_request(request_handle)
          request_handle:logInfo("">>>> SIDECAR_INBOUND envoy_on_request called  "")
          inbound_header = request_handle:headers():get(""foo"")
        end

  - listenerMatch:
      listenerType: SIDECAR_OUTBOUND
    insertPosition:
      index: BEFORE
      relativeTo: envoy.router
    filterName: envoy.lua
    filterType: HTTP
    filterConfig:    
      inlineCode: |
        function envoy_on_request(request_handle)
          request_handle:logInfo("">>>> SIDECAR_OUTBOUND envoy_on_request called  "")
          -- somehow read inbound_header and add that to the request header here 
          request_handle:headers():add(""foo"", inbound_header)       
        end

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: httpbin
---
apiVersion: v1
kind: Service
metadata:
  name: httpbin
  labels:
    app: httpbin
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: httpbin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpbin
  template:
    metadata:
      labels:
        app: httpbin
    spec:
      serviceAccountName: httpbin
      containers:
      - image: salrashid123/httpbin-remote:1
        imagePullPolicy: IfNotPresent
        name: httpbin
        ports:
        - containerPort: 8080
",,,
Help with blacklist for jwt compromised - Security - Discuss Istio,,,,"apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: deny-jwt
  namespace: istio-system
spec:
  selector:
    matchLabels:
      app: istio-ingressgateway
  action: DENY
  rules:
    when:
    - key: request.auth.claims[user]
      values: [""admin1""]
"
503 error with requestPrincipals in AuthorizationPlicy (istio 1.5.2) - Security - Discuss Istio,"apiVersion: ""security.istio.io/v1beta1""
kind: ""RequestAuthentication""
metadata:
  name: ""jwt-setup""
  namespace: dev
spec:
  selector:
    matchLabels:
      k8s-app: myapp-server
  jwtRules:
  - issuer: ""mycompany""
    jwksuri: ""mycompany/jwts.json""
    forwardOriginalToken: true
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: myapp-policy
 namespace: dev
spec:
 action: ALLOW
 selector:
   matchLabels:
     k8s-app: myapp-server
 rules:
 - from:
   - source:
       requestPrincipals: [""*""]
 kind: VirtualService
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: myapp-virtual-service
  namespace: dev
spec:
  hosts:
    - dev.mycompany
  gateways:
    - myapp-gateway
  http:
    - match:
        - method:
            exact: POST
          uri:
            prefix: /api
      name: myapp-server
      rewrite:
        uri: /graphql
      route:
        - destination:
            host: myapp-service
            port:
              number: 5000
 kind: Gateway
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: myapp-gateway
  namespace: dev
spec:
  servers:
    - hosts:
        - dev.mycompany
      port:
        name: http
        number: 80
        protocol: HTTP
    - hosts:
        - dev.mycompany
      port:
        name: https
        number: 443
        protocol: HTTP
  selector:
    istio: ingressgateway
",,,,,
Routing seems broken when enabling mtls on namespace basis - Security - Discuss Istio,"apiVersion: [authentication.istio.io/v1alpha1](http://authentication.istio.io/v1alpha1)
kind: Policy
metadata:
name: default
namespace: bobby
spec:
peers:
- mtls: {}apiVersion: [networking.istio.io/v1alpha3](http://networking.istio.io/v1alpha3)

kind: DestinationRule
metadata:
name: bobby-destination-rule
namespace: bobby
spec:
host: '*.bobby.svc.cluster.local'
trafficPolicy:
tls:
mode: ISTIO_MUTUAL
 apiVersion: [authentication.istio.io/v1alpha1](http://authentication.istio.io/v1alpha1)
kind: Policy
metadata:
name: default
namespace: bob
spec:
peers:
- mtls: {}apiVersion: [networking.istio.io/v1alpha3](http://networking.istio.io/v1alpha3)

kind: DestinationRule
metadata:
name: bob-destination-rule
namespace: bob
spec:
host: '*.bob.svc.cluster.local'
trafficPolicy:
tls:
mode: ISTIO_MUTUAL
 [2020-05-26T16:51:07.240Z] ""- - -"" 0 UF,URX ""-"" ""-"" 0 0 3 - ""-"" ""-"" ""-"" ""-"" ""10.244.0.183:7001"" outbound|7001||bobbys-front-end-admin-server.bobby.svc.cluster.local - 10.244.0.183:7001 10.244.0.187:42956 - -
[2020-05-26T16:51:07.252Z] ""- - -"" 0 UF,URX ""-"" ""-"" 0 0 3 - ""-"" ""-"" ""-"" ""-"" ""10.244.0.183:7001"" outbound|7001||bobbys-front-end-admin-server.bobby.svc.cluster.local - 10.244.0.183:7001 10.244.0.187:42962 - -
 [2020-05-26T20:26:26.352Z] ""- - -"" 0 UF,URX ""-"" ""-"" 0 0 4 - ""-"" ""-"" ""-"" ""-"" ""10.244.0.84:7001"" outbound|7001||bobs-bookstore-admin-server.bob.svc.cluster.local - 10.244.0.84:7001 10.244.0.86:51450 - -
[2020-05-26T20:26:26.369Z] ""- - -"" 0 UF,URX ""-"" ""-"" 0 0 4 - ""-"" ""-"" ""-"" ""-"" ""10.244.0.84:7001"" outbound|7001||bobs-bookstore-admin-server.bob.svc.cluster.local - 10.244.0.84:7001 10.244.0.86:51460 - -
",,"[2020-05-26T16:51:02.633Z] ""POST /admin-server-deployer/DeploymentService HTTP/1.1"" 200 - ""-"" ""-"" 1507 1 5 4 ""-"" ""Java1.8.0_211"" ""4db4d71c-1a63-9a06-ab1d-f33d96a46f20"" ""bobs-bookstore-admin-server:7001"" ""10.244.0.183:7001"" outbound|7001||bobs-bookstore-admin-server.bob.svc.cluster.local - 10.244.0.183:7001 10.244.0.187:42636 - default
[2020-05-26T16:51:02.886Z] ""POST /admin-server-deployer/DeploymentService HTTP/1.1"" 200 - ""-"" ""-"" 1666 1 5 4 ""-"" ""Java1.8.0_211"" ""5c937442-67ab-9741-a433-abd817854bb3"" ""bobs-bookstore-admin-server:7001"" ""10.244.0.183:7001"" outbound|7001||bobs-bookstore-admin-server.bob.svc.cluster.local - 10.244.0.183:7001 10.244.0.187:42654 - default
[2020-05-26T16:51:02.959Z] ""- - -"" 0 UF,URX ""-"" ""-"" 0 0 3 - ""-"" ""-"" ""-"" ""-"" ""10.244.0.183:7001"" outbound|7001||bobbys-front-end-admin-server.bobby.svc.cluster.local - 10.244.0.183:7001 10.244.0.187:42668 - -
[2020-05-26T16:51:02.964Z] ""- - -"" 0 UF,URX ""-"" ""-"" 0 0 2 - ""-"" ""-"" ""-"" ""-"" ""10.244.0.183:7001"" outbound|7001||bobbys-front-end-admin-server.bobby.svc.cluster.local - 10.244.0.183:7001 10.244.0.187:42674 - -
 apiVersion: v1
kind: Service
metadata:
  name: bobbys-front-end-admin-server
  namespace: bobby
spec:
  clusterIP: None
  ports:
  - name: istio-probe
    port: 8888
    protocol: TCP
    targetPort: 8888
  - name: istio-q3
    port: 7001
    protocol: TCP
    targetPort: 7001
  - name: istio-q3channel
    port: 30101
    protocol: TCP
    targetPort: 30101
  publishNotReadyAddresses: true
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
"
Problems create lua filter - Security - Discuss Istio,"kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: lua-filter
  namespace: foo
spec:
  workloadSelector:
    labels:
      app:  httpbin
  configPatches:
    # The first patch adds the lua filter to the listener/http connection manager
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: ""envoy.http_connection_manager""
            subFilter:
              name: ""envoy.router""
    patch:
      operation: INSERT_BEFORE
      value: # lua filter specification
       name: envoy.lua
       typed_config:
         ""@type"": ""type.googleapis.com/envoy.config.filter.http.lua.v2.Lua""
         inlineCode: |
           function envoy_on_request(request_handle)
             request_handle:headers():replace(""lua-filter"", ""lua-filter"")
           end
EOF
",,,
"Envoy LUA filter, contact local container for external authorization - Security - Discuss Istio",,,,,,,"2019-08-06 21:25:05
Running ./bazel-bin/test/cel/benchmark_test
Run on (12 X 4000 MHz CPU s)
CPU Caches:
  L1 Data 32K (x6)
  L1 Instruction 32K (x6)
  L2 Unified 256K (x6)
  L3 Unified 15360K (x1)
Load Average: 1.08, 1.47, 1.79
***WARNING*** CPU scaling is enabled, the benchmark real time measurements may be noisy and will incur extra overhead.
-----------------------------------------------------------
Benchmark                 Time             CPU   Iterations
-----------------------------------------------------------
Native                 108 ns          108 ns     5957712
RBAC                   292 ns          292 ns     2339761
CEL                   3535 ns         3535 ns      194319
CEL_FlattenedMap      1164 ns         1164 ns      653968
LuaJIT                1573 ns         1573 ns      453999
",,"apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: auth-local
spec:
  hosts:
  - auth.local
  location: MESH_INTERNAL
  ports:
  - number: 8080
    name: http
    protocol: HTTP
  resolution: STATIC
  endpoints:
  - address: 127.0.0.1
             local response_headers, response_body = request_handle:httpCall(
                ""outbound|8080||auth.local"",
                authentication_request,
                """",                             -- empty body
                5000
            )
",,,"apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: envoy-ext-authz-http-test
spec:
  workloadLabels:
    ext-authz: ""ext_authz_example"" . // filter will act on pods with this label
  filters:
    - insertPosition:
        index: FIRST
      listenerMatch:
        portNumber: 8080
        listenerType: SIDECAR_INBOUND
        listenerProtocol: HTTP
      filterType: HTTP
      filterName: ""envoy.ext_authz""
      filterConfig:
        http_service:
          server_uri:
            uri: http://127.0.0.1:8081
            cluster: outbound|8081||auth.local // the same cluster name you've in your ServiceEntry
            timeout: 20s
        failure_mode_allow: false
        with_request_body:
          max_request_bytes: 8192
          allow_partial_message: true
",,,"apiVersion: config.istio.io/v1alpha2
kind: authorization
metadata:
  name: authzrequestcontext
  namespace: istio-system
  action:
    method: request.method | """"
    namespace: destination.namespace | """"
    path: request.path | """"
    properties:
      token: request.headers[""authorization""] | """"
    service: destination.service.name | """"
  subject:
    groups: request.auth.principal | """"
    properties:
      namespace: source.namespace | """"
      service: source.workload.name | """"
    user: request.auth.principal | """"
",,,
"[Question] Decode JWT and put ""sub"" into a request header - Security - Discuss Istio",,,,,,,,"apiVersion: config.istio.io/v1alpha2
kind: rule
metadata:
  name: auth-headers
  namespace: istio-system
spec:
  match: source.labels[""istio""] == ""ingressgateway""
  actions:
  - handler: keyval.istio-system
    instances: [ keyval ]
  request_header_operations:
  - name: X-company-userId
    values:
    - request.auth.claims[""sub""]",,"request.auth.claims[""abc""]
",,,,,"apiVersion: config.istio.io/v1alpha2
kind: rule
metadata:
  name: auth-headers
spec:
  request_header_operations:
  - name: X-company
    values:
    - request.auth.claims[""org_human_identifier""]
 apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: echo-server-svc
spec:
  hosts:
  - echo-server.poc03.svc.cluster.local
  http:
  - match:
    - name: header
      headers:
        x-company:
          exact: westeros
    route:
    - destination:
        host: echo-server.poc03.svc.cluster.local
        subset: westeros
  - route:
    - destination:
        host: echo-server.poc03.svc.cluster.local
        subset: devtesting
",
mTLS uses wrong SNI in TLS Client Hello - Security - Discuss Istio,"---
apiVersion: v1
kind: Service
metadata:
  name: headless
spec:
  clusterIP: None
  selector:
    galera.v1beta2.sql.databases/galera-name: galera-cluster
  ports:
    - name: s3306
      protocol: TCP
      port: 3306
      targetPort: 3306
    - name: s4444
      protocol: TCP
      port: 4444
      targetPort: 4444
    - name: s4567
      protocol: TCP
      port: 4567
      targetPort: 4567
    - name: s4568
      protocol: TCP
      port: 4568
      targetPort: 4568
---
apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: default
spec:
  peers:
    - mtls: {}
---
apiVersion: ""networking.istio.io/v1alpha3""
kind: ""DestinationRule""
metadata:
  name: default
spec:
  host: ""*.x2.svc.cluster.local""
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
---
 istioctl authn tls-check galera-cluster-bb55l -n x2 | grep x2.svc
headless.x2.svc.cluster.local:3306                                 OK         STRICT         ISTIO_MUTUAL     x2/default                                     x2/default
headless.x2.svc.cluster.local:4444                                 OK         STRICT         ISTIO_MUTUAL     x2/default                                     x2/default
headless.x2.svc.cluster.local:4567                                 OK         STRICT         ISTIO_MUTUAL     x2/default                                     x2/default
headless.x2.svc.cluster.local:4568                                 OK         STRICT         ISTIO_MUTUAL     x2/default                                     x2/default
 istioctl authn tls-check galera-cluster-24z99 -n x3 | grep x3.svc
headless.x3.svc.cluster.local:3306                                 OK         STRICT         ISTIO_MUTUAL     x3/default                                     x3/default
headless.x3.svc.cluster.local:4444                                 OK         STRICT         ISTIO_MUTUAL     x3/default                                     x3/default
headless.x3.svc.cluster.local:4567                                 OK         STRICT         ISTIO_MUTUAL     x3/default                                     x3/default
headless.x3.svc.cluster.local:4568                                 OK         STRICT         ISTIO_MUTUAL     x3/default                                     x3/default
",,,
Access K8s Secrets from Istio - Security - Discuss Istio,"apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: vecho-get
  namespace: vadal
spec:
  selector:
    matchLabels:
      app: vecho
      action: ALLOW
  rules:
  - to:
    - operation:
        methods: [""GET""]
    when:
      - key: request.headers[x-vadal-key]
        values: [""secret""]
"
"Istio 1.6.3: ingressgateway error ""Proto constraint validation failed"" - Security - Discuss Istio","apiVersion: ""security.istio.io/v1beta1""
kind: ""RequestAuthentication""
metadata:
  name: ""h-ingress-jwt""
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  jwtRules:
  - issuer: ""http://192.168.202.21:8000/auth/realms/istio""
    jwksUri: ""http://192.168.202.21:8000/auth/realms/istio/protocol/openid-connect/certs""
 2020-07-09T09:36:50.669693Z     warn    Envoy proxy is NOT ready: config not received from Pilot (is Pilot running?): cds updates: 7 successful, 0 rejected; lds updates: 0 successful, 7 rejected
2020-07-09T09:36:52.669736Z     warn    Envoy proxy is NOT ready: config not received from Pilot (is Pilot running?): cds updates: 7 successful, 0 rejected; lds updates: 0 successful, 7 rejected
2020-07-09T09:36:54.670022Z     warn    Envoy proxy is NOT ready: config not received from Pilot (is Pilot running?): cds updates: 7 successful, 0 rejected; lds updates: 0 successful, 7 rejected
2020-07-09T09:36:55.068148Z     warning envoy config    [external/envoy/source/common/config/grpc_subscription_impl.cc:101] gRPC config for type.googleapis.com/envoy.api.v2.Listener rejected: Error adding/updating listener(s) 0.0.0.0_8443: Proto constraint validation failed (JwtAuthenticationValidationError.Providers[key]: [""embedded message failed validation""] | caused by JwtProviderValidationError.LocalJwks: [""embedded message failed validation""] | caused by DataSourceValidationError.InlineString: [""value length must be at least "" '\x01' "" bytes""]): providers {
  key: ""origins-0""
  value {
    issuer: ""http://192.168.202.21:8000/auth/realms/istio""
    local_jwks {
      inline_string: """"
    }
    payload_in_metadata: ""http://192.168.202.21:8000/auth/realms/istio""
  }
}
rules {
  match {
    prefix: ""/""
  }
  requires {
    requires_any {
      requirements {
        provider_name: ""origins-0""
      }
      requirements {
        allow_missing {
        }
      }
    }
  }
}

0.0.0.0_8080: Proto constraint validation failed (JwtAuthenticationValidationError.Providers[key]: [""embedded message failed validation""] | caused by JwtProviderValidationError.LocalJwks: [""embedded message failed validation""] | caused by DataSourceValidationError.InlineString: [""value length must be at least "" '\x01' "" bytes""]): providers {
  key: ""origins-0""
  value {
    issuer: ""http://192.168.202.21:8000/auth/realms/istio""
    local_jwks {
      inline_string: """"
    }
    payload_in_metadata: ""http://192.168.202.21:8000/auth/realms/istio""
  }
}
rules {
  match {
    prefix: ""/""
  }
  requires {
    requires_any {
      requirements {
        provider_name: ""origins-0""
      }
      requirements {
        allow_missing {
        }
      }
    }
  }
}


2020-07-09T09:36:55.706732Z     warning envoy config    [external/envoy/source/common/config/grpc_subscription_impl.cc:101] gRPC config for type.googleapis.com/envoy.api.v2.Listener rejected: Error adding/updating listener(s) 0.0.0.0_8443: Proto constraint validation failed (JwtAuthenticationValidationError.Providers[key]: [""embedded message failed validation""] | caused by JwtProviderValidationError.LocalJwks: [""embedded message failed validation""] | caused by DataSourceValidationError.InlineString: [""value length must be at least "" '\x01' "" bytes""]): providers {
  key: ""origins-0""
  value {
    issuer: ""http://192.168.202.21:8000/auth/realms/istio""
    local_jwks {
      inline_string: """"
    }
    payload_in_metadata: ""http://192.168.202.21:8000/auth/realms/istio""
  }
}
rules {
  match {
    prefix: ""/""
  }
  requires {
    requires_any {
      requirements {
        provider_name: ""origins-0""
      }
      requirements {
        allow_missing {
        }
      }
    }
  }
}

0.0.0.0_8080: Proto constraint validation failed (JwtAuthenticationValidationError.Providers[key]: [""embedded message failed validation""] | caused by JwtProviderValidationError.LocalJwks: [""embedded message failed validation""] | caused by DataSourceValidationError.InlineString: [""value length must be at least "" '\x01' "" bytes""]): providers {
  key: ""origins-0""
  value {
    issuer: ""http://192.168.202.21:8000/auth/realms/istio""
    local_jwks {
      inline_string: """"
    }
    payload_in_metadata: ""http://192.168.202.21:8000/auth/realms/istio""
  }
}
rules {
  match {
    prefix: ""/""
  }
  requires {
    requires_any {
      requirements {
        provider_name: ""origins-0""
      }
      requirements {
        allow_missing {
        }
      }
    }
  }
}


2020-07-09T09:36:56.669676Z     warn    Envoy proxy is NOT ready: config not received from Pilot (is Pilot running?): cds updates: 9 successful, 0 rejected; lds updates: 0 successful, 9 rejected
 kubectl exec -it istio-ingressgateway-66cc54b468-pkmd7 -n istio-system -- curl  http://192.168.202.21:8000/auth/realms/istio
{""realm"":""istio"",""public_key"":""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwC48QVPBIDZ9ormmLqlwjZDCrur1HOyQOBsIRlWr6ieMQTNqqulWtRlmv+IcGScsXvZtotNfwJlRxGvYwoK/gg1J7gT4EzDwxVs7FKN7YktDKcT8HyYuAIXFZta15jxC+pOhJseZVQDpWPLjv5dn1vGEMe400v4uFTjqC1mZJohoPcNA5Q3IjwPC72LvJ0hGGPLzpv6gmMg/XNw3xK/z+5dctIH0PaOM+hh7wcDw45j32gEOyEHHxDWJzlJl1s4ckwVLCg+Wmof7UyW/aaqqoOqGxdjnNHz/nuYO61Rp7z1sHBn9/GMsJxZwlsxjCV23Vabccu1Iswjkn97sXZDtfQIDAQAB"",""token-service"":""http://192.168.202.21:8000/auth/realms/istio/protocol/openid-connect"",""account-service"":""http://192.168.202.21:8000/auth/realms/istio/account"",""tokens-not-before"":0}
",,"sysop@hdev:~$ kubectl exec -it istiod-777dc7dc48-rxf45 -n istio-system -- curl  http://192.168.202.21:8000/auth/realms/istio
{""realm"":""istio"",""public_key"":""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwC48QVPBIDZ9ormmLqlwjZDCrur1HOyQOBsIRlWr6ieMQTNqqulWtRlmv+IcGScsXvZtotNfwJlRxGvYwoK/gg1J7gT4EzDwxVs7FKN7YktDKcT8HyYuAIXFZta15jxC+pOhJseZVQDpWPLjv5dn1vGEMe400v4uFTjqC1mZJohoPcNA5Q3IjwPC72LvJ0hGGPLzpv6gmMg/XNw3xK/z+5dctIH0PaOM+hh7wcDw45j32gEOyEHHxDWJzlJl1s4ckwVLCg+Wmof7UyW/aaqqoOqGxdjnNHz/nuYO61Rp7z1sHBn9/GMsJxZwlsxjCV23Vabccu1Iswjkn97sXZDtfQIDAQAB"",""token-service"":""http://192.168.202.21:8000/auth/realms/istio/protocol/openid-connect"",""account-service"":""http://192.168.202.21:8000/auth/realms/istio/account"",""tokens-not-before"":0}sysop@hdev:~$ 
",
Istio 1.5 AuthorizationPolicy using JWT - Security - Discuss Istio,"
kubectl apply -f - <<EOF
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: require-jwt
  namespace: foo
spec:
  selector:
    matchLabels:
      app: httpbin
  action: ALLOW
  rules:
  - from:
    - source:
       requestPrincipals: [""testing@secure.istio.io/testing@secure.istio.io""]
EOF

",,,,
Can Istio Security Peer Authentication & JWT Authentication Used in Parallel - Security - Discuss Istio,,,"matchLabels:

  app: elasticsearch-master
 matchLabels:

  app: elasticsearch-master
",,,"apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: elk-auth-policy
  namespace: my-test-namespace
spec:
  selector:
    matchLabels:
      app: elasticsearch-master
  action: DENY
  rules:
  - from:
    - source:
        notRequestPrincipals: [""*""]
        principals: [""cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account""]
","matchLabels:

  app: elasticsearch-master
",,
Does Authorization Policy Conditions support object array value for request.auth.claims? - Security - Discuss Istio,"{
    ""jti"": ""b8063b15-8a8e-4717-b3a9-33d466628b1f"",
    ""exp"": 1581788041,
    ""nbf"": 0,
    ""iat"": 1581780841,
    ""aud"": ""bookinfo"",
    ""typ"": ""Bearer"",
    ""auth_time"": 0,
    ""acr"": ""1"",
    **""permissions"": [
        {
            ""scopes"": [
                ""httpbin:headers""
            ],
            ""rsid"": ""b7e88219-2adf-4d70-baad-6d5386d4606a"",
            ""rsname"": ""httpbin""
        }**
    ],
    ""active"": true
}
 apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: api-gateway-httpbin
spec:
  selector:
    matchLabels:
      app: httpbin
  rules:
  - from:
    - source:
        namespaces: [""istio-system""]
    to:
    - operation:
        paths: [""/headers""]
    when:
    **- key: request.auth.claims[permissions][scopes]** It seems doesn't work, how to config it correctly or current not support?
      values: 
        - httpbin:headers
",
Authorization Policy IP allow/deny not working on services different than ingress-gateway - Security - Discuss Istio,"apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: ingress-policy
  namespace: istio-system
spec:
  selector:
    matchLabels:
      app: istio-ingressgateway
  action: DENY
  rules:
  - from:
    - source:
       ipBlocks: [""186.116.204.204""]
 apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: httpbin-policy
  namespace: foo
spec:
  selector:
    matchLabels:
      app: httpbin
  action: DENY
  rules:
  - from:
    - source:
        ipBlocks: [""186.116.204.204""]
",,,"apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: httpbin
  namespace: foo
spec:
  workloadSelector:
    labels:
      app: httpbin
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: ""envoy.http_connection_manager""
              subFilter:
                name: ""envoy.router""
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.rbac 
          config:
            rules:
              action: ALLOW
              policies:
                ""ip-premissions"":
                  permissions:
                    - any: true
                  principals:
                    - remote_ip:
                        address_prefix: 186.168.165.52
                        prefix_len: 32
",,
TLS SDS/credentialName not working with Ingress Gateway - Security - Discuss Istio,"tls:
  mode: SIMPLE
  privateKey: /etc/istio/ingressgateway-certs/tls.key
  serverCertificate: /etc/istio/ingressgateway-certs/tls.crt
 tls:
  credentialName: api-termination-istio-tls-secret-autogen
  mode: SIMPLE
 [centos@k8s-master-0 ~]$ kubectl get pod -n istio-system
NAME                                      READY   STATUS      RESTARTS   AGE
...
istio-ingressgateway-7dd57888b8-68d4q     2/2     Running     0          16h
 [centos@k8s-master-0 ~]$ kubectl describe pod istio-ingressgateway-7dd57888b8-68d4q -n istio-system
Name:               istio-ingressgateway-7dd57888b8-68d4q
Namespace:          istio-system
Priority:           0
PriorityClassName:  <none>
Node:               high-memory-node-0/10.0.40.13
Start Time:         Tue, 20 Aug 2019 20:28:40 +0000
Labels:             app=istio-ingressgateway
                    chart=gateways
                    heritage=Tiller
                    istio=ingressgateway
                    pod-template-hash=7dd57888b8
                    release=istio
Annotations:        sidecar.istio.io/inject: false
Status:             Running
IP:                 10.233.72.210
Controlled By:      ReplicaSet/istio-ingressgateway-7dd57888b8
Containers:
  istio-proxy:
    Container ID:  docker://7d4f6a94f7c2b24f3cb9734497e9ecb46085ee0c04d0f34eb1e0ef7761417386
    Image:         docker.io/istio/proxyv2:1.2.3
    Image ID:      docker-pullable://istio/proxyv2@sha256:6db6c0ae3f65d02edc97e7900e816c1139b6269182ffb17fa3843f036d17b264
    Ports:         15020/TCP, 80/TCP, 443/TCP, 31400/TCP, 15029/TCP, 15030/TCP, 15031/TCP, 15032/TCP, 15443/TCP, 15090/TCP
    Host Ports:    0/TCP, 0/TCP, 0/TCP, 0/TCP, 0/TCP, 0/TCP, 0/TCP, 0/TCP, 0/TCP, 0/TCP
    Args:
      proxy
      router
      --domain
      $(POD_NAMESPACE).svc.cluster.local
      --log_output_level=default:info
      --drainDuration
      45s
      --parentShutdownDuration
      1m0s
      --connectTimeout
      10s
      --serviceCluster
      istio-ingressgateway
      --zipkinAddress
      zipkin:9411
      --proxyAdminPort
      15000
      --statusPort
      15020
      --controlPlaneAuthPolicy
      NONE
      --discoveryAddress
      istio-pilot:15010
    State:          Running
      Started:      Tue, 20 Aug 2019 20:28:42 +0000
    Ready:          True
    Restart Count:  0
    Limits:
      cpu:     2
      memory:  1Gi
    Requests:
      cpu:      10m
      memory:   40Mi
    Readiness:  http-get http://:15020/healthz/ready delay=1s timeout=1s period=2s #success=1 #failure=30
    Environment:
      NODE_NAME:                     (v1:spec.nodeName)
      POD_NAME:                     istio-ingressgateway-7dd57888b8-68d4q (v1:metadata.name)
      POD_NAMESPACE:                istio-system (v1:metadata.namespace)
      INSTANCE_IP:                   (v1:status.podIP)
      HOST_IP:                       (v1:status.hostIP)
      ISTIO_META_POD_NAME:          istio-ingressgateway-7dd57888b8-68d4q (v1:metadata.name)
      ISTIO_META_CONFIG_NAMESPACE:  istio-system (v1:metadata.namespace)
      ISTIO_META_ROUTER_MODE:       sni-dnat
    Mounts:
      /etc/certs from istio-certs (ro)
      /etc/istio/ingressgateway-ca-certs from ingressgateway-ca-certs (ro)
      /etc/istio/ingressgateway-certs from ingressgateway-certs (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from istio-ingressgateway-service-account-token-rxrms (ro)
  ingress-sds:
    Container ID:   docker://95f1a55d3fb83f0cfaba44951e2ef00ed479888cf29b0283c7c95b297abd917c
    Image:          gcr.io/istio-release/node-agent-k8s:master-latest-daily
    Image ID:       docker-pullable://gcr.io/istio-release/node-agent-k8s@sha256:a290b89c16ee17f233405a64618d94af425bdce70d468960dcc10d1ea1f589dc
    Port:           <none>
    Host Port:      <none>
    State:          Running
      Started:      Tue, 20 Aug 2019 20:28:46 +0000
    Ready:          True
    Restart Count:  0
    Limits:
      cpu:     2
      memory:  1Gi
    Requests:
      cpu:     100m
      memory:  128Mi
    Environment:
      ENABLE_WORKLOAD_SDS:         false
      ENABLE_INGRESS_GATEWAY_SDS:  true
      INGRESS_GATEWAY_NAMESPACE:   istio-system (v1:metadata.namespace)
    Mounts:
      /var/run/ingress_gateway from ingressgatewaysdsudspath (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from istio-ingressgateway-service-account-token-rxrms (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  ingressgatewaysdsudspath:
    Type:    EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:
  istio-certs:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  istio.istio-ingressgateway-service-account
    Optional:    true
  ingressgateway-certs:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  istio-ingressgateway-certs
    Optional:    true
  ingressgateway-ca-certs:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  istio-ingressgateway-ca-certs
    Optional:    true
  istio-ingressgateway-service-account-token-rxrms:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  istio-ingressgateway-service-account-token-rxrms
    Optional:    false
QoS Class:       Burstable
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:          <none>
 [centos@k8s-master-0 ~]$ kubectl get secret -n istio-system
NAME                                                 TYPE                                  DATA   AGE
api-termination-istio-tls-secret-autogen             kubernetes.io/tls                     2      22h
default-token-q4vwd                                  kubernetes.io/service-account-token   3      13d
istio-ca-secret                                      istio.io/ca-root                      5      13d
istio-ingressgateway-certs                           kubernetes.io/tls                     2      12d
istio-ingressgateway-service-account-token-rxrms     kubernetes.io/service-account-token   3      13d
istio.default                                        istio.io/key-and-cert                 3      13d
istio.istio-ingressgateway-service-account           istio.io/key-and-cert                 3      13d
 [centos@k8s-master-0 ~]$ kubectl logs istio-ingressgateway-7dd57888b8-68d4q -n istio-system ingress-sds
2019-08-20T20:28:46.959055Z	info	ControlZ available at 127.0.0.1:9876
2019-08-20T20:28:47.035608Z	warn	secretFetcherLog	failed load server cert/key pair from secret kiali: server cert or private key is empty
2019-08-20T20:28:47.064675Z	info	sdsServiceLog	SDS gRPC server for ingress gateway controller starts, listening on ""/var/run/ingress_gateway/sds""

2019-08-20T20:28:47.064763Z	info	sdsServiceLog	Start SDS grpc server for ingress gateway proxy
2019-08-20T20:28:47.064893Z	info	citadel agent monitor has started.
2019-08-20T20:28:47.065525Z	info	monitor	Monitor server started.
 [centos@k8s-master-0 ~]$ curl -v https://api-termination-istio.dc.k8s.com/loginproxy
* About to connect() to api-termination-istio.dc.k8s.com port 443 (#0)
*   Trying 192.168.24.239...
* Connected to api-termination-istio.dc.k8s.com (192.168.24.239) port 443 (#0)
* Initializing NSS with certpath: sql:/etc/pki/nssdb
*   CAfile: /etc/pki/tls/certs/ca-bundle.crt
  CApath: none
* NSS error -5938 (PR_END_OF_FILE_ERROR)
* Encountered end of file
* Closing connection 0
curl: (35) Encountered end of file
","          ""tls_certificate_sds_secret_configs"": [
           {
            ""name"": ""httpbin-credential"",
            ""sds_config"": {
             ""api_config_source"": {
              ""api_type"": ""GRPC"",
              ""grpc_services"": [
               {
                ""google_grpc"": {
                 ""target_uri"": ""unix:/var/run/ingress_gateway/sds"",
                 ""stat_prefix"": ""sdsstat""
                }
               }
              ]
             },
             ""initial_fetch_timeout"": ""0s""
            }
           }
          ]
 {
 	""clients"": [
 		{
 			""connection_id"": ""router~10.4.3.252~istio-ingressgateway-699f69df6b-vv2f2.istio-system~istio-system.svc.cluster.local-1"",
 			""proxy"": ""router~10.4.3.252~istio-ingressgateway-699f69df6b-vv2f2.istio-system~istio-system.svc.cluster.local"",
 			""resource_name"": ""httpbin-credential"",
 			""certificate_chain"": ""LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZVekNDQXp1Z0F3SUJBZ0lERUFJU01BMEdDU3FHU0liM0RRRUJDd1VBTUVveEN6QUpCZ05WQkFZVEFsVlQKTVE4d0RRWURWUVFJREFaRVpXNXBZV3d4RERBS0JnTlZCQW9NQTBScGN6RWNNQm9HQTFVRUF3d1RhSFIwY0dKcApiaTVsZUdGdGNHeGxMbU52YlRBZUZ3MHhPVEE0TWpFeE56QTNNRE5hRncweU1EQTRNekF4TnpBM01ETmFNR0F4CkN6QUpCZ05WQkFZVEFsVlRNUTh3RFFZRFZRUUlEQVpFWlc1cFlXd3hGREFTQmdOVkJBY01DMU53Y21sdVoyWnAKWld4a01Rd3dDZ1lEVlFRS0RBTkVhWE14SERBYUJnTlZCQU1NRTJoMGRIQmlhVzR1WlhoaGJYQnNaUzVqYjIwdwpnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFESDV0UERBcXZVa0N6TEVLUU5WRmJzCmwrMzRRMU1VUnNoMjB4cG16WGZZRk91K1R1N252USszRWhtT2swcS9YMEdyZHoyK09PMm9wYllSYy9jSE0rOE4KVlhMZnltQkJWZHZvZ0dsbHBFQUZ4NWVoYitDSFVwRDZnWUxwVjRKWGxwZXMzZk5YeXNIZm54UjRoblN3a25xWAppaCtqOVoxbHZIM1BwWFdvMzcvbEtPdmdXK3RpUER5VlNheFhmc2pEZWZWZGNIeVVKamt6a091cjFuekd3clR1ClM0RVdsTW1jaThmUmN3bS9qWjFNcTc4N2hsMXRGYnVSOVMrK0hrOU95TEZZQkd3czRwZ21MQkJjdkFpeUFVcXcKZi9mRFFJOUpVckRUc1dIcjBWeDdpcmdnQzJHWUhORmoycnQ4Vm9aU2FkL2JtQkFCTk9McWxMWlJZdDNuZ0syUApBZ01CQUFHamdnRXFNSUlCSmpBSkJnTlZIUk1FQWpBQU1CRUdDV0NHU0FHRytFSUJBUVFFQXdJR1FEQXpCZ2xnCmhrZ0JodmhDQVEwRUpoWWtUM0JsYmxOVFRDQkhaVzVsY21GMFpXUWdVMlZ5ZG1WeUlFTmxjblJwWm1sallYUmwKTUIwR0ExVWREZ1FXQkJTbmlLaFNUYnVFUWplSVAwWHRrQ3lCQzB0Q1N6Q0JqQVlEVlIwakJJR0VNSUdCZ0JRWgp6cndZdVEzdENUY0xCZTljNE1jQTB6aExnS0ZrcEdJd1lERUxNQWtHQTFVRUJoTUNWVk14RHpBTkJnTlZCQWdNCkJrUmxibWxoYkRFVU1CSUdBMVVFQnd3TFUzQnlhVzVuWm1sbGJHUXhEREFLQmdOVkJBb01BMFJwY3pFY01Cb0cKQTFVRUF3d1RhSFIwY0dKcGJpNWxlR0Z0Y0d4bExtTnZiWUlERUFJU01BNEdBMVVkRHdFQi93UUVBd0lGb0RBVApCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0RBVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBSk9KQUw4OWYrUUlzCllhZnQwblkzTjdYai9xdlRsV1FkaU0vUCtKMXRMbjZGQk5Pc29UdE5NZGpSaGo2aTcxN1g5SFEvMXNHYjBrU2IKN0JMMVdKKzFlZFdDV2g1a1NnemJIL1FYaGlHcUoxcnU5UTk0KzhKcWJ2U3VOb2ltdCtPVStHNXRMUE5NeGIySQpVSlJxVlUzYURjbVJzaGhCSEhVZm11aG9DRE5PUjFWb09oYmZXVXlZdDVaUTQrOVlDR0c3RkFjMHFjWm9JbHEyCkVUM2pueG5wejc4L0NnQm16aXltWEI1dVJmSng1SXI4MGdvQXFIVUlUUlpFbVFmRlRwbmxuNmRYL1M2KzNLejIKY0lTcFg5c3pLUGgycm5HRHBta1F2M0RrL2QxTlJRYVVNck4yMUhGaTRKdjFoRjJtUHlZQzBsbm1HbzArTUVZQwp1bFlXcmloaFpDMzNMeTEvdkpCZkIxR1E0d09FK1dzMzBwT1kxd2wwRE5VcXJ0RkpSTDVrZW9tMVRtKzcrYzd2CldFOFRIUGpVdFFjRmFjenAzQ2M3Vzd6YlJJRk9LWHhFT3IzTkdGYVIxWmRxZk55eFZ6TmRuK3JhdGtnTWthNlgKOG5ML1FKSVlIQ0tjbWM0bXFtRHZ6dlhBUEdqZFlqb1JvOGpRbU5WKzV1VHpheUhKVTBzMldmNVlGU1VZQU5wSQpMazFNZy9IdnpVaTRrcFY0ckhKV3IzVDUzS3NTSzkyZlBubEhVZ0dCTzJQTDJHWER1a3pWWXpBMW9UWGM0UGRUCnJPOGg0d1BRSndSSUhZQ2YwelBGcUMrZ1BXb0tyQkxlbXN2VXM5clAyYnlyRDBaOVVUU0E4cWZQeitNbmhVamcKd3pnS3gwc3RFR3pKQm5scURER0Q2anJVU1FYcG5Rbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="",
 			""root_cert"": """",
 			""created_time"": ""2019-08-21T17:07:55Z"",
 			""expire_time"": ""2020-08-30T17:07:03Z""
 		}
 	]
 }
","root@istio-ingressgateway-6845fd4977-hgthj:/var/run/ingress_gateway# ls -la
total 0
drwxrwxrwx. 2 root root 17 Aug 21 19:59 .
drwxr-xr-x. 1 root root 44 Aug 21 19:59 ..
srw-rw-rw-. 1 root root  0 Aug 21 19:59 sds
 root@istio-ingressgateway-6845fd4977-hgthj:/var/run/ingress_gateway# curl http://localhost:8080/debug/sds/gateway
{
 	""clients"": []
}
 [centos@k8s-master-0 ~]$ kubectl get secret api-termination-istio-tls-secret-autogen -o yaml -n istio-system
apiVersion: v1
data:
  tls.crt: REDACTED
  tls.key: REDACTED
kind: Secret
metadata:
  creationTimestamp: 2019-08-20T14:35:16Z
  name: api-termination-istio-tls-secret-autogen
  namespace: istio-system
  resourceVersion: ""33667053""
  selfLink: /api/v1/namespaces/istio-system/secrets/api-termination-istio-tls-secret-autogen
  uid: ba7ce062-c357-11e9-b4a3-fa163ed0611a
type: kubernetes.io/tls
",,,,,,
Envoy filter - per_filter_config - Security - Discuss Istio,,,,,"apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: filter-bypass
  namespace: default
spec:
  configPatches:
  - applyTo: ROUTE_CONFIGURATION # http connection manager is a filter in Envoy
    match:
      context: ANY
      routeConfiguration:
        vhost:
          name: login-svc:8080
          route: ""/""
    patch:
      operation: MERGE
      value:
        per_filter_config:
          envoy.ext_authz:
            disabled: true
 apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: bypass-filter
  namespace: default
spec:
  configPatches:
    # The first patch adds the lua filter to the listener/http connection manager
  - applyTo: VIRTUAL_HOST
    match:
      routeConfiguration:
        vhost:
          name: smb-login-svc:8080
          route: ""/""
  patch:
      operation: MERGE
      value:
        per_filter_config:
          envoy.ext_authz:
            disabled: true

",,"apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: by-pass
spec:
  configPatches:
  - applyTo: HTTP_ROUTE
    match:
      context: GATEWAY
      routeConfiguration:
        portNumber: 443
        vhost:
          name: ""*:443""
    patch:
      operation: MERGE
      value:
          per_filter_config:
            envoy.ext_authz:
              disabled: true
",,"apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: ext-authz
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      app: istio-ingressgateway
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        # context: SIDECAR_INBOUND
        listener: 
          filterChain:
            sni: api.httpbin.com
            filter:
              name: ""envoy.http_connection_manager""
              # subFilter:
              #   name: ""envoy.router""
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.ext_authz #FILTER NAME
          config:
            status_on_error:
              code: 503
            failure_mode_allow: false
            http_service:
              path_prefix: /decisions
              server_uri:
                uri: https://oathkeeper.com
                cluster: outbound|443||oathkeeper.com
                timeout: 10s
              authorizationRequest:
                allowedHeaders:
                  patterns:
                  - exact: ""authorization""
                  - exact: ""cookie""
                  - exact: ""content-type""
                  - exact: ""access-control-allow-origin""
                  - exact: ""origin""
                  - exact: ""x-envoy-external-address""
                  - exact: ""x-forwarded-for""
                  - exact: ""proxy-authorization""
                  - exact: ""user-agent""
                  - exact: ""x-forwarded-host""
                  - exact: ""x-forwarded-proto""
                  - exact: ""x-requested-with""
              authorizationResponse:
                allowed_upstream_headers:
                  patterns:
                  - exact: ""authorization""
                  - exact: ""cookie""
                  - exact: ""x-forwarded-for""
                  - exact: ""user-agent""
                  - exact: ""vary""
                  - exact: ""origin""
                  - exact: ""content-type""
                  - exact: ""access-control-allow-credentials""
                  - exact: ""access-control-allow-origin""
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: bypass-ext-authz
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      app: istio-ingressgateway
  configPatches:
    - applyTo: HTTP_ROUTE
      match:
        routeConfiguration:
          vhost:
            name: api.httpbin.com:443
            route:
              name: rewrite-api-http-route #from virtual service http route name
      patch:
        operation: MERGE
        value:
          typed_per_filter_config:
            envoy.filters.http.ext_authz:
              ""@type"": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
              disabled: true"
Principle of least privilege for external service access - Security - Discuss Istio,"apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: ubuntu-archive   
 namespace: istio-system
spec:
 selector:
   matchLabels:
     app: istio-egressgateway
 action: ALLOW
 rules:
 - from:
   - source:
       principals: [""cluster.local/ns/default/sa/httpbin""]
   trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
",,,,,,,"apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: istio-egressgateway-archive
spec:
  selector:
    istio: egressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTPS
    hosts:
    - archive.ubuntu.com
    tls:
      mode: ISTIO_MUTUAL
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: ubuntu-archive
spec:
  host: istio-egressgateway.istio-system.svc.cluster.local
  subsets:
  - name: ubuntu-archive
  trafficPolicy:
    portLevelSettings:
     - port:
         number: 80
       tls:
         mode: ISTIO_MUTUAL

 curl http://archive.ubuntu.com
upstream connect error or disconnect/reset before headers. reset reason: connection failureroot@httpbin-9d7cdcff6-j5497:/#
",,,
Istio mTLS strange behavior (bug?) - Security - Discuss Istio,,,,,,"apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: istio-system
spec:
  mtls:
    mode: STRICT
",,,"[2020-09-11T17:50:48.061Z] ""- - -"" 0 - ""-"" ""-"" 402 0 3885 - ""-"" ""-"" ""-"" ""-"" ""10.160.12.136:80"" PassthroughCluster 10.160.162.112:46154 10.160.12.136:80 10.160.162.112:46146 - 
",
AuthorizationPolicy not Enforced - Security - Discuss Istio,"apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: tenna-oidc-userpool
  namespace: alb-system
spec:
  selector:
    matchLabels:
      app: istio-ingressgateway
  jwtRules:
  - forwardOriginalToken: true
    issuer: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_jkfldsjkl
 apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: global-healthcheck-policy
  namespace: alb-system
spec:
  selector:
    matchLabels:
      app: istio-ingressgateway
  rules:
  - from:
    - source:
        requestPrincipals: [""*""]
  - to:
    - operation:
        paths: [""/healthz"", ""/stats/prometheus""]
 apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: ingestion-bobber-admin-policy
  namespace: alb-system
spec:
  action: ALLOW
  selector:
    matchLabels:
      app: istio-ingressgateway
  rules:
  - to:
    - operation:
        paths: [""ingestion/bobber/admin""]
    when:
      - key: request.auth.claims[email]
        values: [""*@xyz.com""]
 apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: ingestion-bobber-admin-policy
  namespace: alb-system
spec:
  action: DENY
  selector:
    matchLabels:
      app: istio-ingressgateway
  rules:
  - to:
    - operation:
        paths: [""ingestion/bobber/admin""]
    when:
      - key: request.auth.claims[email]
        notValues: [""*@xyz.com""]
",,
TLS handshake with custom CA using wildcard egress - Security - Discuss Istio,"apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: istio-egressgateway
spec:
  selector:
    istio: egressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - ""*.mydomain.com""
    tls:
      mode: PASSTHROUGH
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: egressgateway-for-mydomain
spec:
  host: istio-egressgateway.istio-system.svc.cluster.local
  subsets:
    - name: mydomain
  trafficPolicy:
    tls:
      mode: SIMPLE
      caCertificates: /etc/istio/mydomain-ca-certs/mydomain.crt
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: direct-mydomain-through-egress-gateway
spec:
  hosts:
  - ""*.mydomain.com""
  gateways:
  - mesh
  - istio-egressgateway
  tls:
  - match:
    - gateways:
      - mesh
      port: 443
      sniHosts:
      - ""*.mydomain.com""
    route:
    - destination:
        host: istio-egressgateway.istio-system.svc.cluster.local
        subset: mydomain
        port:
          number: 443
      weight: 100
  - match:
    - gateways:
      - istio-egressgateway
      port: 443
      sniHosts:
      - ""*.mydomain.com""
    route:
    - destination:
        host: abc.mydomain.com
        port:
          number: 443
      weight: 100
---
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: www-mydomain
spec:
  hosts:
  - abc.mydomain.com
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  resolution: DNS
",,
Terminating MTLS in ingressgateway - what about authorization? - Security - Discuss Istio,,"apiVersion: ""security.istio.io/v1beta1""
kind: ""AuthorizationPolicy""
metadata:
  name: ingressgateway-authz
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  action: ALLOW
  rules:
  - to:
    - operation:
        ports: [""443"",""9443""]
        hosts:
        - ""pow.servicemesh.mybox""
    when:
    - key: experimental.envoy.filters.network.client_ssl_auth[certificates]
      values:
      - ""[[fingerprint_sha256, 5234981512daca66a79ba1cc2cc5c759d636af07a6dd360077ae42d209b3306a]]""
",,,
Istio Ingress Gateway - https and path based routing - Security - Discuss Istio,,"apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: apps-route
spec:
  hosts:
  - test.abcd.com
  http:
  - name: ""app1""
    match:
    - uri:
        prefix: ""/app1""
    rewrite:
      uri: ""/""
    route:
        - destination:
            host: app1.ns.svc.cluster.local
  - name: ""app2""
    match:
    - uri:
        prefix: ""/app2""
    rewrite:
      uri: ""/""
    route:
        - destination:
            host: app2.ns.svc.cluster.local",,
Minimum TLS version? - Security - Discuss Istio,"apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: gateway-test
  namespace: istio-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - hosts:
    - <something>/<something>
    port:
      name: https
      number: 443
      protocol: HTTPS
    tls:
      mode: PASSTHROUGH
      minProtocolVersion: TLSV1_2
      maxProtocolVersion: TLSV1_3
",," SSLv2      not offered (OK)
 SSLv3      not offered (OK)
 TLS 1      not offered
 TLS 1.1    offered (deprecated)
 TLS 1.2    offered (OK)
 TLS 1.3    offered (OK): final
 NPN/SPDY   not offered
 ALPN/HTTP2 h2, http/1.1, grpc-exp (offered)
 apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  labels:
    operator.istio.io/component: IngressGateway
    operator.istio.io/managed: Reconcile
    operator.istio.io/version: 1.5.1
    release: istio
  name: default-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - hosts:
        - REDACTED
      port:
        name: http
        number: 80
        protocol: http
      tls:
        httpsRedirect: true
    - hosts:
        - REDACTED
      port:
        name: https
        number: 443
        protocol: HTTPS
      tls:
        mode: SIMPLE
        minProtocolVersion: TLSV1_2
        maxProtocolVersion: TLSV1_3
        serverCertificate: /etc/istio/ingressgateway-certs/tls.crt
        privateKey: /etc/istio/ingressgateway-certs/tls.key"," TLS 1.1    offered (deprecated)
 TLS 1.2    offered (OK)
 TLS 1.3    offered (OK): final
 NPN/SPDY   not offered
 ALPN/HTTP2 h2, http/1.1, grpc-exp (offered)
","SSLv2      not offered (OK)
SSLv3      not offered (OK)
TLS 1      not offered
TLS 1.1    not offered
TLS 1.2    offered (OK)
TLS 1.3    offered (OK) : final
NPN/SPDY   not offered
ALPN/HTTP2 h2, http/1.1 (offered)","TLS 1.1 not offered
",,,,"    apiVersion: networking.istio.io/v1alpha3
    kind: Gateway
    metadata:
      name: gateway-test
      namespace: istio-gateway
    spec:
      selector:
        istio: ingressgateway
      servers:
      - hosts:
        - <something>/<something>
        port:
          name: https
          number: 443
          protocol: HTTPS
        tls:
          mode: SIMPLE
          credentialName: <k8s-tls-secert-name>
          minProtocolVersion: TLSV1_2
          maxProtocolVersion: TLSV1_3
          cipherSuites: <list of strings>
",,"apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  labels:
    operator.istio.io/component: IngressGateway
    operator.istio.io/managed: Reconcile
    operator.istio.io/version: 1.5.1
    release: istio
  name: default-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - hosts:
        - <something>/<something>
      port:
        name: http
        number: 80
        protocol: http
      tls:
        httpsRedirect: true
    - hosts:
        - <something>/<something>
      port:
        name: https
        number: 443
        protocol: HTTPS
      tls:
        mode: SIMPLE
        minProtocolVersion: TLSV1_2
        maxProtocolVersion: TLSV1_3
        credentialName: ingressgateway-certs
        cipherSuites:
          - ECDHE-ECDSA-AES128-GCM-SHA256
          - ECDHE-RSA-AES128-GCM-SHA256
          - ECDHE-ECDSA-AES128-SHA
          - AES128-GCM-SHA256
          - AES128-SHA
          - ECDHE-ECDSA-AES256-GCM-SHA384
          - ECDHE-RSA-AES256-GCM-SHA384
          - ECDHE-ECDSA-AES256-SHA
          - AES256-GCM-SHA384
          - AES256-SHA
","apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: someservice-dummy-provider02
  namespace: someservice-dev
spec:
  selector:
    istio: ingressgateway
  servers:
  - hosts:
    - someapi02.dev.someservice.example.net
    port:
      name: someapi02-https
      number: 443
      protocol: HTTPS
    tls:
      credentialName: someapi-ssl-dev
      minProtocolVersion: TLSV1_2
      maxProtocolVersion: TLSV1_3
      mode: SIMPLE
",,
Authservice AuthN Example - Out of Date and Not Working? - Security - Discuss Istio,"apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: bookinfo-productpage
  namespace: bookinfo
spec:
  selector:
    matchLabels:
      app: productpage
  jwtRules:
  - issuer: https://kubernetes.docker.internal/auth/realms/example
    jwksUri: https://kubernetes.docker.internal/auth/realms/example/protocol/openid-connect/certs
  principalBinding: USE_ORIGIN


apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: bookinfo-productpage
  namespace: bookinfo
spec:
  selector:
    matchLabels:
      app: productpage
  # rules:
  # - from:
  #   - source:
  #       requestPrincipals: [""*""]
"
Internal auth with lua filter - Security - Discuss Istio,"apiVersion: networking.istio.io/v1alpha3
    kind: EnvoyFilter
    metadata:
      name: jwt-filter
      namespace: istio-system
    spec:
      workloadSelector:
    labels:
      app: istio-ingressgateway
      configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: ""envoy.http_connection_manager""
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.lua # MUST NOT CHANGE
          typed_config:
            ""@type"": type.googleapis.com/envoy.config.filter.http.lua.v2.Lua
            inlineCode: |
              function envoy_on_request(request_handle)
                local jwtServiceHeaders = {
                    ["":method""] = ""POST"",
                    ["":path""] = ""/filter"",
                    ["":authority""] = ""jwt-token""
                }
                for key, value in pairs(request_handle:headers()) do
                  jwtServiceHeaders[key] = value
                  request_handle:logInfo(""headers "" .. key .. ' --> ' .. value)
                end 
                
                
                local headers, body = request_handle:httpCall(
                  ""outbound|80||auth-srv.auth.svc.cluster.local"",
                  jwtServiceHeaders,
                  """",
                  2000)
                request_handle:logInfo(""response status "" .. headers["":status""])
                if headers["":status""] ~= ""200"" then
                  request_handle:logErr(""Auth failed: status="" .. headers["":status""] )
                  request_handle:respond(
                                  {["":status""] = headers["":status""]},
                                  response_body
                          )
                  return
                end
              end
 apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: auth-virtualservice
  namespace: auth
spec:
  hosts:
  - auth-srv.auth.svc.cluster.local
  http:
  - name: ""api-gateway""
    route:
    - destination:
        host: auth-srv.auth.svc.cluster.local
        port:
          number: 80
  exportTo:
    - ""*""
"
Setting request headers with values from a JWT - Security - Discuss Istio,,,,,"apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: jwt-to-header-filter
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      app: istio-ingressgateway
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: ""envoy.http_connection_manager""
            subFilter:
              name: ""envoy.router""
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.lua
        config: 
          inlineCode: |
            function envoy_on_request(request_handle)
              local meta = request_handle:streamInfo():dynamicMetadata():get(""envoy.filters.http.jwt_authn"")
              local claims = meta[""{add the key here from step1. This is most likely your jwt issuer url.}""]
              local user = claims.iss..""/""..claims.username
              request_handle:logInfo(""username""..user)
              request_handle:headers():add(""x-jwt-user"", user)
            end",,"apiVersion: ""security.istio.io/v1beta1""
kind: ""RequestAuthentication""
metadata:
  name: ""jwt-echoserver""
  namespace: foo
spec:
  selector:
    matchLabels:
      app: echoserver
  jwtRules:
  - issuer: ""testing@secure.istio.io""
    jwksUri: ""https://raw.githubusercontent.com/istio/istio/release-1.7/security/tools/jwt/samples/jwks.json""
    outputPayloadToHeader: x-jwt
",,,,,,
End User Auth for external use and MTLS for internal service-service communication? - Security - Discuss Istio,"apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: gateway
spec:
  selector:
    istio: ingressgateway 
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - ""{{domain}}""
    tls:
      httpsRedirect: true
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: ""{{certificate-secret-name}}"" 
    hosts:
    - ""{{domain}}""
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: ingress
spec:
  hosts:
  - ""{{domain}}""
  gateways:
  - gateway
  http:
  - match:
    - uri:
        prefix: /auth/
    - uri:
        prefix: /auth
    rewrite:
      uri: ""/""
    route:
    - destination:
        host: auth
        port:
          number: 8000
  - match:
    - uri:
        prefix: /api/
    - uri:
        prefix: /api
    route:
    - destination:
        host: ""api""
        port:
          number: 8000
 apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: ""auth""
spec:
  targets:
  - name: ""api""
  peers:
  - mtls:
  origins:
  - jwt:
      issuer: ""{{domain}}""
      jwksUri: ""https://{{domain}}/.well-known/jwks.json""
  principalBinding: USE_ORIGIN
 server returned error: HTTP/1.1 401 Unauthorized
",,,,"apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: ""auth""
spec:
  targets:
  - name: ""gateway""
  peers:
  - mtls:
  origins:
  - jwt:
      issuer: ""{{domain}}""
      jwksUri: ""https://{{domain}}/.well-known/jwks.json""
  principalBinding: USE_ORIGIN
 apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: ""auth""
spec:
  targets:
  - name: ""istio-ingressgateway""
  peers:
  - mtls:
  origins:
  - jwt:
      issuer: ""{{domain}}""
      jwksUri: ""https://{{domain}}/.well-known/jwks.json""
  principalBinding: USE_ORIGIN
","apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: ""auth""
  namespace: ""istio-system
spec:
  targets:
  - name: ""istio-ingressgateway""
  peers:
  - mtls:
  origins:
  - jwt:
      issuer: ""{{domain}}""
      jwksUri: ""https://{{domain}}/.well-known/jwks.json""
  principalBinding: USE_ORIGIN
",,"apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: ""auth""
  namespace: ""istio-system
spec:
  targets:
  - name: ""istio-ingressgateway""
  peers:
  - mtls:
  origins:
  - jwt:
      issuer: ""{{tenant1}}""
      jwksUri: ""https://{{tenant1}}/.well-known/jwks.json""
  - jwt: # same certs, different issuer
      issuer: ""{{tenant1}}.local"" 
      jwksUri: ""https://{{tenant1}}/.well-known/jwks.json""
  - jwt: # different certs and issuer
      issuer: ""{{tenant2}}""
      jwksUri: ""https://{{tenant2}}/.well-known/jwks.json""
  principalBinding: USE_ORIGIN
",,,"cat <<EOF | kubectl apply -n foo -f -
apiVersion: ""authentication.istio.io/v1alpha1""
kind: ""Policy""
metadata:
  name: ""jwt-example""
spec:
  targets:
  - name: httpbin
  origins:
  - jwt:
      issuer: ""testing@secure.istio.io""
      jwksUri: ""https://raw.githubusercontent.com/istio/istio/release-1.2/security/tools/jwt/samples/jwks.json""
  principalBinding: USE_ORIGIN
EOF",,,,,"apiVersion: ""security.istio.io/v1beta1""
kind: ""RequestAuthentication""
metadata:
  name: ""ingress-jwt""
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  jwtRules:
  - issuer: ""testing@secure.istio.io""
    jwksUri: ""https://raw.githubusercontent.com/istio/istio/release-1.7/security/tools/jwt/samples/jwks.json""
---
apiVersion: ""security.istio.io/v1beta1""
kind: ""AuthorizationPolicy""
metadata:
  name: ""ingress-jwt""
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  action: ALLOW
  rules:
  - from:
    - source:
        requestPrincipals: [""*""]
 apiVersion: ""security.istio.io/v1beta1""
kind: ""PeerAuthentication""
metadata:
  name: ""default""
  namespace: ""istio-system""
spec:
  mtls:
    mode: STRICT
",,"apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: test-gateway
  namespace: dev
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - ""*""
 apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: test-reqauth
  namespace: dev
spec:
  jwtRules:
  - issuer: ""http://keycloak/auth/realms/realm""
    jwksUri: ""http://keycloak/auth/realms/realm/protocol/openid-connect/certs""
 apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: test-peerauth
  namespace: dev
spec:
  mtls:
    mode: STRICT
 apiVersion: v1
kind: Service
metadata:
  name: kc-istio-integr
  namespace: dev
  labels:
    app: kc-istio-integr
    service: kc-istio-integr
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: kc-istio-integr
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kc-istio-integr
  namespace: dev
spec:
  hosts:
  - ""*""
  gateways:
  - test-gateway
  http:
    - match:
      - uri:
          prefix: /uno
      route:
        - destination:
            port:
              number: 8080
            host: kc-istio-integr.dev.svc.cluster.local
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kc-istio-integr
  namespace: dev
  labels:
    app: kc-istio-integr
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kc-istio-integr
      version: v1
  template:
    metadata:
      labels:
        app: kc-istio-integr
        version: v1
    spec:
      containers:
      - name: kc-istio-integr
        image: image:1.0
        imagePullPolicy: IfNotPresent
        env:
         - name: SERVICE.URL
           value: ""http://kc-istio-integr-2:8080""
        ports:
        - containerPort: 8080
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: kc-istio-integr-authpolicy
 namespace: dev
spec:
 selector:
   matchLabels:
     app: kc-istio-integr
 rules:
 - to:
   - operation:
       methods: [""OPTIONS""]
       paths: [""*""]
 - to:
   - operation:
       methods: [""GET""]
       paths: [""/uno*""]
   when:
   - key: request.auth.claims[realm_access][roles]
     values: [""READ""]
 - to:
   - operation:
       methods: [""POST"", ""PUT"", ""DELETE"", ""PATCH""]
       paths: [""/uno*""]
   when:
   - key: request.auth.claims[realm_access][roles]
     values: [""WRITE""]
 apiVersion: v1
kind: Service
metadata:
  name: kc-istio-integr-2
  namespace: dev
  labels:
    app: kc-istio-integr-2
    service: kc-istio-integr-2
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: kc-istio-integr-2
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kc-istio-integr-2
  namespace: dev
spec:
  hosts:
  - ""*""
  gateways:
  - test-gateway
  http:
    - match:
      - uri:
          prefix: /due
      route:
        - destination:
            port:
              number: 8080
            host: kc-istio-integr-2.dev.svc.cluster.local
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kc-istio-integr-2
  namespace: dev
  labels:
    app: kc-istio-integr-2
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kc-istio-integr-2
      version: v1
  template:
    metadata:
      labels:
        app: kc-istio-integr-2
        version: v1
    spec:
      containers:
      - name: kc-istio-integr-2
        image: image-2:1.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: kc-istio-integr-2-authpolicy
 namespace: dev
spec:
 selector:
   matchLabels:
     app: kc-istio-integr-2
 rules:
 - to:
   - operation:
       methods: [""OPTIONS""]
       paths: [""*""]
 - to:
   - operation:
       methods: [""GET""]
       paths: [""/due*""]
   when:
   - key: request.auth.claims[realm_access][roles]
     values: [""READ""]
 - to:
   - operation:
       methods: [""POST"", ""PUT"", ""DELETE"", ""PATCH""]
       paths: [""/due*""]
   when:
   - key: request.auth.claims[realm_access][roles]
     values: [""WRITE""]
"
Correct way to require a jwt to access a workload from ingress - Security - Discuss Istio,"error	authorization	skipped rule ns[test]-policy[httpbin-test]-rule[1]: 
request.auth.principal must not be used in TCP
 apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: httpbin-test
spec:
  action: ALLOW
  rules:
  - from:
    - source:
        principals:
        - cluster.local/ns/test/sa/sleep
  - from:
    - source:
        namespaces:
        - istio-system
        requestPrincipals:
        - '*'
  selector:
    matchLabels:
      app: httpbin
      version: v1
",,
Istio 1.7 CORS Policy not fully working - Security - Discuss Istio,"apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  namespace: ingestion
  name: http-bobber-2-public
spec:
  hosts:
    - '*'
  gateways:
    - alb-system/default-istio-gateway
  http:
    - name: http-bobber-2-default-public-route
      match:
        - uri:
            prefix: /ingestion/http-bobber-2/
      rewrite:
        uri: /
      route:
        - destination:
            host: http-bobber-2.ingestion.svc.cluster.local
      corsPolicy:
        allowOrigins:
          - exact: ""*""
        allowMethods:
          - GET
          - POST
          - PATCH
          - PUT
          - DELETE
          - OPTIONS
        allowCredentials: false
        allowHeaders:
          - authorization
        maxAge: ""24h""
","kind: AuthorizationPolicy
apiVersion: security.istio.io/v1beta1
metadata:
  name: http-bobber-policy
  namespace: alb-system
spec:
  rules:
    - from:
        - source:
            requestPrincipals:
              - '*'
    - to:
        - operation:
            paths:
              - /ingestion/http-bobber-2/*
            methods:
              - OPTIONS
  selector:
    matchLabels:
      app: istio-ingressgateway
"
